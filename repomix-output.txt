This file is a merged representation of the entire codebase, combining all repository files into a single document.
Generated by Repomix on: 2024-11-23T11:37:17.508Z

================================================================
File Summary
================================================================

Purpose:
--------
This file contains a packed representation of the entire repository's contents.
It is designed to be easily consumable by AI systems for analysis, code review,
or other automated processes.

File Format:
------------
The content is organized as follows:
1. This summary section
2. Repository information
3. Repository structure
4. Multiple file entries, each consisting of:
  a. A separator line (================)
  b. The file path (File: path/to/file)
  c. Another separator line
  d. The full contents of the file
  e. A blank line

Usage Guidelines:
-----------------
- This file should be treated as read-only. Any changes should be made to the
  original repository files, not this packed version.
- When processing this file, use the file path to distinguish
  between different files in the repository.
- Be aware that this file may contain sensitive information. Handle it with
  the same level of security as you would the original repository.

Notes:
------
- Some files may have been excluded based on .gitignore rules and Repomix's
  configuration.
- Binary files are not included in this packed representation. Please refer to
  the Repository Structure section for a complete list of file paths, including
  binary files.

Additional Info:
----------------

For more information about Repomix, visit: https://github.com/yamadashy/repomix

================================================================
Repository Structure
================================================================
app/app_prefs.dart
app/app.dart
app/constant.dart
app/di/di.dart
app/extensions.dart
app/functions.dart
data/data_source/remote_data_source.dart
data/mapper/mapper.dart
data/mapper/prompt_category_mapper.dart
data/mapper/prompt_mapper.dart
data/network/app_api.dart
data/network/app_api.g.dart
data/network/auth_interceptor.dart
data/network/dio_factory.dart
data/network/error_handler.dart
data/network/failure.dart
data/network/network_info.dart
data/repository/prompt_repository_impl.dart
data/repository/repository_impl.dart
data/request/ai_chat/authentication/request.dart
data/request/ai_chat/authentication/request.g.dart
data/request/ai_chat/send_message/assistant.dart
data/request/ai_chat/send_message/assistant.g.dart
data/request/ai_chat/send_message/chat_conversation.dart
data/request/ai_chat/send_message/chat_conversation.g.dart
data/request/ai_chat/send_message/chat_message.dart
data/request/ai_chat/send_message/chat_message.g.dart
data/request/ai_chat/send_message/message_role.dart
data/request/ai_chat/send_message/send_message_metadata.dart
data/request/ai_chat/send_message/send_message_metadata.g.dart
data/request/ai_chat/send_message/send_message_request.dart
data/request/ai_chat/send_message/send_message_request.g.dart
data/request/request.dart
data/request/request.g.dart
data/responses/ai_chat/send_message_response.dart
data/responses/ai_chat/send_message_response.g.dart
data/responses/responses.dart
data/responses/responses.g.dart
data/responses/token/token_usage_response.dart
data/responses/token/token_usage_response.g.dart
domain/model/model.dart
domain/model/prompt.dart
domain/repository/prompt_repository.dart
domain/repository/repository.dart
domain/usecase/base_usecase.dart
domain/usecase/create_prompt_usecase.dart
domain/usecase/delete_prompt_usecase.dart
domain/usecase/get_public_prompts_usecase.dart
domain/usecase/refresh_token_usecase.dart
domain/usecase/send_message_usecase.dart
domain/usecase/send_message_usecase.g.dart
domain/usecase/sign_in_usecase.dart
domain/usecase/sign_out_usecase.dart
domain/usecase/sign_up_usecase.dart
domain/usecase/update _prompt_usecase.dart
domain/usecase/usage_token_usecase.dart
main.dart
presentation/authencation/forgot_password/forgot_password_viewmodel.dart
presentation/authencation/forgot_password/forgot_password.dart
presentation/authencation/sign_in/sign_in_viewmodel.dart
presentation/authencation/sign_in/sign_in.dart
presentation/authencation/sign_out/sign_out_viewmodel.dart
presentation/authencation/sign_out/sign_out.dart
presentation/authencation/sign_up/sign_up_viewmodel.dart
presentation/authencation/sign_up/sign_up.dart
presentation/base/baseviewmodel.dart
presentation/chat/chat_view.dart
presentation/chat/chat_viewmodel.dart
presentation/chatbot/chat/chat_bot_view.dart
presentation/chatbot/create_bot/create_bot_view.dart
presentation/chatbot/edit_bot/edit_bot_view.dart
presentation/chatbot/main_chatbot_view.dart
presentation/chatbot/preview_bot/preview_bot.dart
presentation/common/animated_toggle_tab/animated_toggle_tab.dart
presentation/common/app_drawer.dart
presentation/common/bottom_navigation.dart
presentation/common/chat_input_box.dart
presentation/common/custome_header_bar.dart
presentation/common/dialog_util.dart
presentation/common/freezed_data_classes.dart
presentation/common/freezed_data_classes.freezed.dart
presentation/getting_started/getting_started_viewmodel.dart
presentation/getting_started/getting_started.dart
presentation/knowledge/knowledge_create/knowledge_create.dart
presentation/knowledge/knowledge_delete/knowledge_delete.dart
presentation/knowledge/knowledge_detail/knowledge_detail.dart
presentation/knowledge/knowledge_edit/knowledge_edit.dart
presentation/knowledge/knowledge_view.dart
presentation/main/main_view.dart
presentation/profile/detail_profile_view.dart
presentation/profile/profile_view.dart
presentation/prompt/create_prompt/create_prompt_view.dart
presentation/prompt/edit_prompt/edit_prompt_view.dart
presentation/prompt/main_prompt_view.dart
presentation/resources/assets_manager.dart
presentation/resources/color_manager.dart
presentation/resources/font_manager.dart
presentation/resources/language_manager.dart
presentation/resources/route_manager.dart
presentation/resources/strings_manager.dart
presentation/resources/style_manager.dart
presentation/resources/theme_manager.dart
presentation/resources/values_manager.dart
presentation/splash/splash_viewmodel.dart
presentation/splash/splash.dart
presentation/unit_add/unit_add_confluence.dart
presentation/unit_add/unit_add_ggdrive.dart
presentation/unit_add/unit_add_localfile.dart
presentation/unit_add/unit_add_slack.dart
presentation/unit_add/unit_add_website.dart
presentation/unit_add/unit_add.dart
presentation/upgrade/upgrade.dart
test.dart

================================================================
Repository Files
================================================================

================
File: app/app_prefs.dart
================
// lib/app/app_prefs.dart

import 'package:flutter_secure_storage/flutter_secure_storage.dart';
import 'package:jarvis/presentation/resources/language_manager.dart';
import 'package:shared_preferences/shared_preferences.dart';

const String PREFS_KEY_LANG = "PREFS_KEY_LANG";
const String KEY_ACCESS_TOKEN = "KEY_ACCESS_TOKEN";
const String KEY_REFRESH_TOKEN = "KEY_REFRESH_TOKEN";

class AppPreferences {
  final SharedPreferences _sharedPreferences;
  final FlutterSecureStorage _secureStorage;

  AppPreferences(this._sharedPreferences, this._secureStorage);

  String getAppLanguage() {
    String? language = _sharedPreferences.getString(PREFS_KEY_LANG);
    if (language != null && language.isNotEmpty) {
      return language;
    } else {
      return LanguageType.ENGLISH.getValue();
    }
  }

  // Access Token
  Future<String> getAccessToken() async {
    return await _secureStorage.read(key: KEY_ACCESS_TOKEN) ?? '';
  }

  Future<void> setAccessToken(String token) async {
    await _secureStorage.write(key: KEY_ACCESS_TOKEN, value: token);
  }

  Future<void> deleteAccessToken() async {
    await _secureStorage.delete(key: KEY_ACCESS_TOKEN);
  }

  // Refresh Token
  Future<String> getRefreshToken() async {
    return await _secureStorage.read(key: KEY_REFRESH_TOKEN) ?? '';
  }

  Future<void> setRefreshToken(String token) async {
    await _secureStorage.write(key: KEY_REFRESH_TOKEN, value: token);
  }

  Future<void> deleteRefreshToken() async {
    await _secureStorage.delete(key: KEY_REFRESH_TOKEN);
  }

  // Xóa tất cả token
  Future<void> clearTokens() async {
    await _secureStorage.delete(key: KEY_ACCESS_TOKEN);
    await _secureStorage.delete(key: KEY_REFRESH_TOKEN);
  }

  // bool hasToken() {
  //   return _sharedPreferences.containsKey(PREFS_KEY_TOKEN);
  // }
}

================
File: app/app.dart
================
import 'package:flutter/material.dart';
import 'package:jarvis/presentation/resources/route_manager.dart';
import 'package:jarvis/presentation/resources/theme_manager.dart';

// ignore: must_be_immutable
class MyApp extends StatefulWidget {
  MyApp._internal(); // private named constructor

  static final MyApp instance = MyApp._internal(); // single instance -- singleton

  int appState = 0;

  factory MyApp() => instance; // factory for the class instance

  @override
  State<MyApp> createState() => _MyAppState();
}

class _MyAppState extends State<MyApp> {
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      debugShowCheckedModeBanner: false,
      onGenerateRoute: RouteGenerator.getRoute,
      initialRoute: Routes.splashRoute,
      theme: getApplicationTheme(),
    );
  }
}

================
File: app/constant.dart
================
class Constant {
  static const String baseUrl = "https://api.dev.jarvis.cx";
  static const String APPLICATION_JSON = "application/json";
  static const String CONTENT_TYPE = "content-type";
  static const String ACCEPT = "accept";
  static const String AUTHORIZATION = "authorization";
  static const String DEFAULT_LANGUAGE = "language";
}

class ConstantAPI {
  static const signIn = '/api/v1/auth/sign-in';
  static const signUp = '/api/v1/auth/sign-up';
  static const signOut = '/api/v1/auth/sign-out';
  static const refreshToken = '/api/v1/auth/refresh';
  static const sendMessage = '/api/v1/ai-chat/messages';
  static const tokenUsage = '/api/v1/tokens/usage';
}

class ConstantAssistantID {
    static const String CLAUDE_3_HAIKU_20240307 = 'Claude 3 Haiku';
    static const String CLAUDE_3_SONNET_20240229 = 'Claude 3 Sonnet';
    static const String GEMINI_15_FLASH_LATEST = "Gemini 1.5 Flash";
    static const String GEMINI_15_PRO_LATEST = "Gemini 1.5 Pro";
    static const String GPT_4_O = "GPT-4o";
    static const String GPT_4_O_MINI = "GPT-4o Mini";
}

class ConstantAssistantModel {
  static const String DIFY = "dify";
}

================
File: app/di/di.dart
================
// lib/app/di/di.dart

import 'package:flutter_secure_storage/flutter_secure_storage.dart';
import 'package:get_it/get_it.dart';
import 'package:dio/dio.dart';
import 'package:internet_connection_checker/internet_connection_checker.dart';
import 'package:jarvis/app/app_prefs.dart';
import 'package:jarvis/data/data_source/remote_data_source.dart';
import 'package:jarvis/data/network/app_api.dart';
import 'package:jarvis/data/network/dio_factory.dart';
import 'package:jarvis/data/network/network_info.dart';
import 'package:jarvis/data/repository/repository_impl.dart';
import 'package:jarvis/domain/repository/repository.dart';
import 'package:jarvis/domain/usecase/create_prompt_usecase.dart';
import 'package:jarvis/domain/usecase/refresh_token_usecase.dart';
import 'package:jarvis/domain/usecase/send_message_usecase.dart';
import 'package:jarvis/domain/usecase/sign_in_usecase.dart';
import 'package:jarvis/domain/usecase/sign_out_usecase.dart';
import 'package:jarvis/domain/usecase/sign_up_usecase.dart';
import 'package:jarvis/domain/usecase/usage_token_usecase.dart';
import 'package:jarvis/presentation/authencation/sign_in/sign_in_viewmodel.dart';
import 'package:jarvis/presentation/authencation/sign_out/sign_out_viewmodel.dart';
import 'package:jarvis/presentation/authencation/sign_up/sign_up_viewmodel.dart';
import 'package:jarvis/presentation/chat/chat_viewmodel.dart';
import 'package:jarvis/presentation/splash/splash_viewmodel.dart';
import 'package:shared_preferences/shared_preferences.dart';

import '../../data/repository/prompt_repository_impl.dart';
import '../../domain/repository/prompt_repository.dart';
import '../../domain/usecase/delete_prompt_usecase.dart';
import '../../domain/usecase/get_public_prompts_usecase.dart';
import '../../domain/usecase/update _prompt_usecase.dart';
import '../../presentation/prompt/main_prompt_view.dart';


final getIt = GetIt.instance;

Future<void> setupLocator() async {
  // Register SharedPreferences
  final sharedPreferences = await SharedPreferences.getInstance();
  getIt.registerLazySingleton<SharedPreferences>(() => sharedPreferences);
   // Đăng ký FlutterSecureStorage
  getIt.registerLazySingleton<FlutterSecureStorage>(
    () => const FlutterSecureStorage(),
  );

  // Register AppPreferences
  getIt.registerLazySingleton<AppPreferences>(
      () => AppPreferences(getIt<SharedPreferences>(), getIt<FlutterSecureStorage>()));

  // Register DioFactory
  getIt.registerLazySingleton<DioFactory>(
      () => DioFactory(getIt<AppPreferences>()));

  // Register Dio
  getIt.registerLazySingleton<Dio>(() => getIt<DioFactory>().getDio());

  // Register AppServiceClient
  getIt.registerLazySingleton<AppServiceClient>(
    () => AppServiceClient(getIt<Dio>()),
  );

  // Register InternetConnectionChecker
  getIt.registerLazySingleton<InternetConnectionChecker>(
    () => InternetConnectionChecker(),
  );

  // Register NetworkInfo
  getIt.registerLazySingleton<NetworkInfo>(
    () => NetworkInfoImpl(getIt<InternetConnectionChecker>()),
  );

  // Register RemoteDataSource
  getIt.registerLazySingleton<RemoteDataSource>(
    () => RemoteDataSourceImplementer(getIt<AppServiceClient>()),
  );

  // Register Repository
  getIt.registerLazySingleton<Repository>(
    () => RepositoryImpl(getIt<RemoteDataSource>(), getIt<NetworkInfo>()),
  );

  // Register UseCases
  getIt.registerFactory<SignInUseCase>(
    () => SignInUseCase(getIt<Repository>()),
  );

  getIt.registerFactory<SignUpUseCase>(
    () => SignUpUseCase(getIt<Repository>()),
  );
  
  getIt.registerFactory<RefreshTokenUseCase>(
    () => RefreshTokenUseCase(getIt<Repository>()),
  );

  getIt.registerFactory<SignOutUseCase>(
    () => SignOutUseCase(getIt<Repository>()),
  );
  // Register ViewModels
  getIt.registerFactory<SignInViewModel>(
    () => SignInViewModel(getIt<SignInUseCase>(), getIt<AppPreferences>()),
  );

  getIt.registerFactory<SignUpViewModel>(
    () => SignUpViewModel(getIt<SignUpUseCase>(), getIt<AppPreferences>()),
  );

  getIt.registerFactory<SignOutViewModel>(
    () => SignOutViewModel(
      getIt<SignOutUseCase>(),
      getIt<AppPreferences>(),
    ),
  );

  getIt.registerLazySingleton<PromptRepository>(
        () => PromptRepositoryImpl(getIt<RemoteDataSource>(), getIt<NetworkInfo>()),
  );

  getIt.registerFactory<GetPublicPromptsUseCase>(
        () => GetPublicPromptsUseCase(getIt<PromptRepository>()),
  );

  getIt.registerFactory<GetPrivatePromptsUseCase>(
        () => GetPrivatePromptsUseCase(getIt<PromptRepository>()),
  );

  getIt.registerFactory<PromptViewModel>(
        () => PromptViewModel(
      getIt<GetPublicPromptsUseCase>(),
      getIt<AddPromptToFavoriteUseCase>(),
      getIt<CreatePromptUseCase>(),
      getIt<GetPrivatePromptsUseCase>(),
      getIt<UpdatePromptUseCase>(),
      getIt<DeletePromptUseCase>()
    ),
  );
  getIt.registerFactory<AddPromptToFavoriteUseCase>(
        () => AddPromptToFavoriteUseCase(getIt<PromptRepository>()),
  );
  getIt.registerFactory<CreatePromptUseCase>(
        () => CreatePromptUseCase(getIt<PromptRepository>()),
  );

  getIt.registerFactory<DeletePromptUseCase>(
        () => DeletePromptUseCase(getIt<PromptRepository>()),
  );

  getIt.registerFactory<UpdatePromptUseCase>(
        () => UpdatePromptUseCase(getIt<PromptRepository>()),
  );

  getIt.registerFactory<SendMessageUseCase>(
    () => SendMessageUseCase(getIt<Repository>()),
  );

    getIt.registerFactory<UsageTokenUseCase>(
    () => UsageTokenUseCase(getIt<Repository>()),
  );

  getIt.registerFactory<ChatViewModel>(
    () => ChatViewModel(getIt<SendMessageUseCase>(), getIt<UsageTokenUseCase>()),
  );

  getIt.registerFactory<SplashViewModel>(
    () => SplashViewModel(getIt<AppPreferences>()),
  );
}

================
File: app/extensions.dart
================
// extension on String
import 'package:jarvis/data/mapper/mapper.dart';

extension NonNullString on String? {
  String orEmpty() {
    if (this == null) {
      return EMPTY;
    }
    else {
      return this!;
    }
  }
}

// extension on Integer

extension NonNullInteger on int? {
  int orZero() {
    if (this == null) {
      return ZERO;
    }
    else {
      return this!;
    }
  }
}

================
File: app/functions.dart
================
import "package:jarvis/app/constant.dart";

String getModelId(String modelConstant) {
    switch (modelConstant) {
        case ConstantAssistantID.CLAUDE_3_HAIKU_20240307:
            return 'claude-3-haiku-20240307';
        case ConstantAssistantID.CLAUDE_3_SONNET_20240229:
            return 'claude-3-sonnet-20240229';
        case ConstantAssistantID.GEMINI_15_FLASH_LATEST:
            return 'gemini-1.5-flash-latest';
        case ConstantAssistantID.GEMINI_15_PRO_LATEST:
            return 'gemini-1.5-pro-latest';
        case ConstantAssistantID.GPT_4_O:
            return 'gpt-4o';
        case ConstantAssistantID.GPT_4_O_MINI:
            return 'gpt-4o-mini';
        default:
            return 'unknown_model';
    }
}

String getModelName(String modelConstant) {
    switch (modelConstant) {
        case ConstantAssistantID.CLAUDE_3_HAIKU_20240307:
            return 'Claude 3 Haiku';
        case ConstantAssistantID.CLAUDE_3_SONNET_20240229:
            return 'Claude 3 Sonnet';
        case ConstantAssistantID.GEMINI_15_FLASH_LATEST:
            return 'Gemini 1.5 Flash';
        case ConstantAssistantID.GEMINI_15_PRO_LATEST:
            return 'Gemini 1.5 Pro';
        case ConstantAssistantID.GPT_4_O:
            return 'GPT-4o';
        case ConstantAssistantID.GPT_4_O_MINI:
            return 'GPT-4o mini';
        default:
            return 'Unknown Model';
    }
}

================
File: data/data_source/remote_data_source.dart
================
import 'dart:developer';

import 'package:jarvis/data/network/app_api.dart';
import 'package:jarvis/data/request/ai_chat/send_message/send_message_request.dart';
import 'package:jarvis/data/request/ai_chat/authentication/request.dart';
import 'package:jarvis/data/responses/ai_chat/send_message_response.dart';
import 'package:jarvis/data/responses/responses.dart';
import 'package:jarvis/data/responses/token/token_usage_response.dart';

import '../request/request.dart';

abstract class RemoteDataSource {
  Future<SignInResponse> signIn(SignInRequest signInRequest);
  Future<SignUpResponse> signUp(SignUpRequest signUpRequest);
  Future<void> signOut();
  Future<RefreshTokenResponse> refreshToken(String refreshTokenRequest);
  Future<SendMessageResponse> sendMessage(SendMessageRequest sendMessageRequest);
  Future<TokenUsageResponse> getTokenUsage();
  Future<GetPromptsResponse> getPrompts(String? category, bool isPublic,  {bool? isFavorite, String? query});
  Future<void> addToFavorites(String promptId);
  Future<PromptResponse> createPrompt(CreatePromptRequest request);
  Future<void> updatePrompt(String promptId, UpdatePromptRequest request);
  Future<void> deletePrompt(String promptId);
}

class RemoteDataSourceImplementer implements RemoteDataSource {
  final AppServiceClient _appServiceClient;

  RemoteDataSourceImplementer(this._appServiceClient);

  @override
  Future<SignInResponse> signIn(SignInRequest signInRequest) async {
    return await _appServiceClient.signIn(signInRequest);
  }

  @override
  Future<SignUpResponse> signUp(SignUpRequest signUpRequest) async {
    return await _appServiceClient.signUp(signUpRequest);
  }

  @override
  Future<void> signOut() async {
    return await _appServiceClient.signOut();
  }

  @override
  Future<RefreshTokenResponse> refreshToken(String refreshTokenRequest) async {
    return await _appServiceClient.refreshToken(refreshTokenRequest);
  }

  @override
  Future<SendMessageResponse> sendMessage(SendMessageRequest sendMessageRequest) async {
    return await _appServiceClient.sendMessage(sendMessageRequest);
  }

  @override
  Future<TokenUsageResponse> getTokenUsage() async {
    return await _appServiceClient.getTokenUsage();
  }

  @override
  Future<GetPromptsResponse> getPrompts(String? category, bool isPublic,  {bool? isFavorite, String? query}) async {
    return await _appServiceClient.getPrompts(category, isPublic, isFavorite, query);
  }

  @override
  Future<void> addToFavorites(String promptId) async {
    return await _appServiceClient.addPromptToFavorite(promptId);
  }

  Future<PromptResponse> createPrompt(CreatePromptRequest request) async {
    return await _appServiceClient.createPrompt(request);
  }

  @override
  Future<void> updatePrompt(String promptId, UpdatePromptRequest request) async {
    return await _appServiceClient.updatePrompt(promptId, request);
  }

  @override
  Future<void> deletePrompt(String promptId) async {
    return await _appServiceClient.deletePrompt(promptId);
  }
}

================
File: data/mapper/mapper.dart
================
import 'package:jarvis/app/extensions.dart';
import 'package:jarvis/data/responses/ai_chat/send_message_response.dart';
import 'package:jarvis/data/responses/responses.dart';
import 'package:jarvis/data/responses/token/token_usage_response.dart';
import 'package:jarvis/domain/model/model.dart';

const EMPTY = "";
const ZERO = 0;

extension UserResponseMapper on UserResponse {
  User toDomain() {
    return User(
      id: id.orEmpty(),
      email: email.orEmpty(),
      username: username.orEmpty(),
      isActive: isActive,
      roles: roles,
      createdAt: createdAt.orEmpty(),
      updatedAt: updatedAt.orEmpty(),
    );
  }
}

extension TokenResponseMapper on TokenResponse {
  Token toDomain() {
    return Token(
      accessToken: accessToken.orEmpty(),
      refreshToken: refreshToken.orEmpty(),
    );
  }
}

extension SignInResponseMapper on SignInResponse {
  Token toDomain() {
    return token.toDomain();
  }
}

extension SignUpResponseMapper on SignUpResponse {
  User toDomain() {
    return user.toDomain();
  }
}

extension RefreshTokenResponseMapper on RefreshTokenResponse {
  Token toDomain() {
    return token.toDomain();
  }
}

// extension MessageResponseMapper on MessageResponse {
//   Message toDomain(bool isUser) {
//     return Message(conversationId: conversationId, message: message, remainingUsage: remainingUsage, isUser: isUser);
//   }
// }

extension SendMessageResponseMapper on SendMessageResponse {
  Message toDomain({bool isUser = false}) {
    return Message(conversationId: conversationId, message: message, remainingUsage: remainingUsage, isUser: isUser);
  }
}

extension TokenUsageResponseMapper on TokenUsageResponse {
  TokenUsage toDomain() {
    return TokenUsage(availaleTokens: availableTokens, totalToken: totalTokens, unlimited: unlimited, date: date);
  }
}

================
File: data/mapper/prompt_category_mapper.dart
================
import '../../domain/model/model.dart';
import '../responses/responses.dart';

extension PromptCategoryResponseMapper on PromptCategoryResponse {
  PromptCategoryItem toDomain() {
    return PromptCategoryItem(
        value: value != null ? PromptCategory.values.firstWhere((e) => e.toString() == value) : null,
        label: label
    );
  }
}

================
File: data/mapper/prompt_mapper.dart
================
import '../../domain/model/prompt.dart';
import 'package:jarvis/app/extensions.dart';
import 'package:jarvis/data/responses/responses.dart';
import 'package:jarvis/domain/model/model.dart';

const EMPTY = "";
const ZERO = 0;

extension PromptResponseMapper on PromptResponse {
  Prompt toDomain() {
    return Prompt(
      id: id.orEmpty(),
      title: title,
      content: content ?? '',
      description: description ?? '',
      category: category,
      isPublic: isPublic ?? false,
      userName: userName ?? '',
      isFavorite: isFavorite ?? false,
    );
  }
}

================
File: data/network/app_api.dart
================
// app_api.dart

import 'package:dio/dio.dart';
import 'package:jarvis/app/constant.dart';
import 'package:jarvis/data/request/ai_chat/send_message/send_message_request.dart';
import 'package:jarvis/data/responses/ai_chat/send_message_response.dart';
import 'package:jarvis/data/responses/responses.dart';
import 'package:jarvis/data/request/ai_chat/authentication/request.dart';
import 'package:jarvis/data/responses/token/token_usage_response.dart';
import 'package:retrofit/retrofit.dart';

import '../request/request.dart';

part 'app_api.g.dart';

@RestApi(baseUrl: Constant.baseUrl)
abstract class AppServiceClient {
  factory AppServiceClient(Dio dio, {String baseUrl}) = _AppServiceClient;
  
  @POST(ConstantAPI.signIn)
  Future<SignInResponse> signIn(
    @Body() SignInRequest request,
  );

  @POST(ConstantAPI.signUp)
  Future<SignUpResponse> signUp(
    @Body() SignUpRequest request,
  );

  @GET(ConstantAPI.signOut)
  Future<void> signOut();

  @GET(ConstantAPI.refreshToken)
  Future<RefreshTokenResponse> refreshToken(
    @Query('refreshToken') String refreshToken,
  );

  @POST(ConstantAPI.sendMessage)
  Future<SendMessageResponse> sendMessage(
    @Body() SendMessageRequest request,
  );

  @GET("/api/v1/prompts")
  Future<GetPromptsResponse> getPrompts(
      @Query("category") String? category,
      @Query("isPublic") bool isPublic,
      @Query("isFavorite") bool? isFavorite,
      @Query("query") String? query,
      );

  @POST("/api/v1/prompts/{id}/favorite")
  Future<void> addPromptToFavorite(@Path("id") String promptId);

  @POST("/api/v1/prompts")
  Future<PromptResponse> createPrompt(@Body() CreatePromptRequest request);

  @PATCH("/api/v1/prompts/{id}")
  Future<void> updatePrompt(
      @Path("id") String promptId,
      @Body() UpdatePromptRequest request
      );

  @DELETE("/api/v1/prompts/{id}")
  Future<void> deletePrompt(@Path("id") String promptId);

  @GET(ConstantAPI.tokenUsage)
  Future<TokenUsageResponse> getTokenUsage();
}

================
File: data/network/app_api.g.dart
================
// GENERATED CODE - DO NOT MODIFY BY HAND

part of 'app_api.dart';

// **************************************************************************
// RetrofitGenerator
// **************************************************************************

// ignore_for_file: unnecessary_brace_in_string_interps,no_leading_underscores_for_local_identifiers,unused_element

class _AppServiceClient implements AppServiceClient {
  _AppServiceClient(
    this._dio, {
    this.baseUrl,
    this.errorLogger,
  }) {
    baseUrl ??= 'https://api.dev.jarvis.cx';
  }

  final Dio _dio;

  String? baseUrl;

  final ParseErrorLogger? errorLogger;

  @override
  Future<SignInResponse> signIn(SignInRequest request) async {
    final _extra = <String, dynamic>{};
    final queryParameters = <String, dynamic>{};
    final _headers = <String, dynamic>{};
    final _data = <String, dynamic>{};
    _data.addAll(request.toJson());
    final _options = _setStreamType<SignInResponse>(Options(
      method: 'POST',
      headers: _headers,
      extra: _extra,
    )
        .compose(
          _dio.options,
          '/api/v1/auth/sign-in',
          queryParameters: queryParameters,
          data: _data,
        )
        .copyWith(
            baseUrl: _combineBaseUrls(
          _dio.options.baseUrl,
          baseUrl,
        )));
    final _result = await _dio.fetch<Map<String, dynamic>>(_options);
    late SignInResponse _value;
    try {
      _value = SignInResponse.fromJson(_result.data!);
    } on Object catch (e, s) {
      errorLogger?.logError(e, s, _options);
      rethrow;
    }
    return _value;
  }

  @override
  Future<SignUpResponse> signUp(SignUpRequest request) async {
    final _extra = <String, dynamic>{};
    final queryParameters = <String, dynamic>{};
    final _headers = <String, dynamic>{};
    final _data = <String, dynamic>{};
    _data.addAll(request.toJson());
    final _options = _setStreamType<SignUpResponse>(Options(
      method: 'POST',
      headers: _headers,
      extra: _extra,
    )
        .compose(
          _dio.options,
          '/api/v1/auth/sign-up',
          queryParameters: queryParameters,
          data: _data,
        )
        .copyWith(
            baseUrl: _combineBaseUrls(
          _dio.options.baseUrl,
          baseUrl,
        )));
    final _result = await _dio.fetch<Map<String, dynamic>>(_options);
    late SignUpResponse _value;
    try {
      _value = SignUpResponse.fromJson(_result.data!);
    } on Object catch (e, s) {
      errorLogger?.logError(e, s, _options);
      rethrow;
    }
    return _value;
  }

  @override
  Future<void> signOut() async {
    final _extra = <String, dynamic>{};
    final queryParameters = <String, dynamic>{};
    final _headers = <String, dynamic>{};
    const Map<String, dynamic>? _data = null;
    final _options = _setStreamType<void>(Options(
      method: 'GET',
      headers: _headers,
      extra: _extra,
    )
        .compose(
          _dio.options,
          '/api/v1/auth/sign-out',
          queryParameters: queryParameters,
          data: _data,
        )
        .copyWith(
            baseUrl: _combineBaseUrls(
          _dio.options.baseUrl,
          baseUrl,
        )));
    await _dio.fetch<void>(_options);
  }

  @override
  Future<RefreshTokenResponse> refreshToken(String refreshToken) async {
    final _extra = <String, dynamic>{};
    final queryParameters = <String, dynamic>{r'refreshToken': refreshToken};
    final _headers = <String, dynamic>{};
    const Map<String, dynamic>? _data = null;
    final _options = _setStreamType<RefreshTokenResponse>(Options(
      method: 'GET',
      headers: _headers,
      extra: _extra,
    )
        .compose(
          _dio.options,
          '/api/v1/auth/refresh',
          queryParameters: queryParameters,
          data: _data,
        )
        .copyWith(
            baseUrl: _combineBaseUrls(
          _dio.options.baseUrl,
          baseUrl,
        )));
    final _result = await _dio.fetch<Map<String, dynamic>>(_options);
    late RefreshTokenResponse _value;
    try {
      _value = RefreshTokenResponse.fromJson(_result.data!);
    } on Object catch (e, s) {
      errorLogger?.logError(e, s, _options);
      rethrow;
    }
    return _value;
  }

  @override
  Future<SendMessageResponse> sendMessage(SendMessageRequest request) async {
    final _extra = <String, dynamic>{};
    final queryParameters = <String, dynamic>{};
    final _headers = <String, dynamic>{};
    final _data = <String, dynamic>{};
    _data.addAll(request.toJson());
    final _options = _setStreamType<SendMessageResponse>(Options(
      method: 'POST',
      headers: _headers,
      extra: _extra,
    )
        .compose(
          _dio.options,
          '/api/v1/ai-chat/messages',
          queryParameters: queryParameters,
          data: _data,
        )
        .copyWith(
            baseUrl: _combineBaseUrls(
          _dio.options.baseUrl,
          baseUrl,
        )));
    final _result = await _dio.fetch<Map<String, dynamic>>(_options);
    late SendMessageResponse _value;
    try {
      _value = SendMessageResponse.fromJson(_result.data!);
    } on Object catch (e, s) {
      errorLogger?.logError(e, s, _options);
      rethrow;
    }
    return _value;
  }

  @override
  Future<GetPromptsResponse> getPrompts(
    String? category,
    bool isPublic,
    bool? isFavorite,
    String? query,
  ) async {
    final _extra = <String, dynamic>{};
    final queryParameters = <String, dynamic>{
      r'category': category,
      r'isPublic': isPublic,
      r'isFavorite': isFavorite,
      r'query': query,
    };
    queryParameters.removeWhere((k, v) => v == null);
    final _headers = <String, dynamic>{};
    const Map<String, dynamic>? _data = null;
    final _options = _setStreamType<GetPromptsResponse>(Options(
      method: 'GET',
      headers: _headers,
      extra: _extra,
    )
        .compose(
          _dio.options,
          '/api/v1/prompts',
          queryParameters: queryParameters,
          data: _data,
        )
        .copyWith(
            baseUrl: _combineBaseUrls(
          _dio.options.baseUrl,
          baseUrl,
        )));
    final _result = await _dio.fetch<Map<String, dynamic>>(_options);
    late GetPromptsResponse _value;
    try {
      _value = GetPromptsResponse.fromJson(_result.data!);
    } on Object catch (e, s) {
      errorLogger?.logError(e, s, _options);
      rethrow;
    }
    return _value;
  }

  @override
  Future<void> addPromptToFavorite(String promptId) async {
    final _extra = <String, dynamic>{};
    final queryParameters = <String, dynamic>{};
    final _headers = <String, dynamic>{};
    const Map<String, dynamic>? _data = null;
    final _options = _setStreamType<void>(Options(
      method: 'POST',
      headers: _headers,
      extra: _extra,
    )
        .compose(
          _dio.options,
          '/api/v1/prompts/${promptId}/favorite',
          queryParameters: queryParameters,
          data: _data,
        )
        .copyWith(
            baseUrl: _combineBaseUrls(
          _dio.options.baseUrl,
          baseUrl,
        )));
    await _dio.fetch<void>(_options);
  }

  @override
  Future<PromptResponse> createPrompt(CreatePromptRequest request) async {
    final _extra = <String, dynamic>{};
    final queryParameters = <String, dynamic>{};
    final _headers = <String, dynamic>{};
    final _data = <String, dynamic>{};
    _data.addAll(request.toJson());
    final _options = _setStreamType<PromptResponse>(Options(
      method: 'POST',
      headers: _headers,
      extra: _extra,
    )
        .compose(
          _dio.options,
          '/api/v1/prompts',
          queryParameters: queryParameters,
          data: _data,
        )
        .copyWith(
            baseUrl: _combineBaseUrls(
          _dio.options.baseUrl,
          baseUrl,
        )));
    final _result = await _dio.fetch<Map<String, dynamic>>(_options);
    late PromptResponse _value;
    try {
      _value = PromptResponse.fromJson(_result.data!);
    } on Object catch (e, s) {
      errorLogger?.logError(e, s, _options);
      rethrow;
    }
    return _value;
  }

  @override
  Future<void> updatePrompt(
    String promptId,
    UpdatePromptRequest request,
  ) async {
    final _extra = <String, dynamic>{};
    final queryParameters = <String, dynamic>{};
    final _headers = <String, dynamic>{};
    final _data = <String, dynamic>{};
    _data.addAll(request.toJson());
    final _options = _setStreamType<void>(Options(
      method: 'PATCH',
      headers: _headers,
      extra: _extra,
    )
        .compose(
          _dio.options,
          '/api/v1/prompts/${promptId}',
          queryParameters: queryParameters,
          data: _data,
        )
        .copyWith(
            baseUrl: _combineBaseUrls(
          _dio.options.baseUrl,
          baseUrl,
        )));
    await _dio.fetch<void>(_options);
  }

  @override
  Future<void> deletePrompt(String promptId) async {
    final _extra = <String, dynamic>{};
    final queryParameters = <String, dynamic>{};
    final _headers = <String, dynamic>{};
    const Map<String, dynamic>? _data = null;
    final _options = _setStreamType<void>(Options(
      method: 'DELETE',
      headers: _headers,
      extra: _extra,
    )
        .compose(
          _dio.options,
          '/api/v1/prompts/${promptId}',
          queryParameters: queryParameters,
          data: _data,
        )
        .copyWith(
            baseUrl: _combineBaseUrls(
          _dio.options.baseUrl,
          baseUrl,
        )));
    await _dio.fetch<void>(_options);
  }

  @override
  Future<TokenUsageResponse> getTokenUsage() async {
    final _extra = <String, dynamic>{};
    final queryParameters = <String, dynamic>{};
    final _headers = <String, dynamic>{};
    const Map<String, dynamic>? _data = null;
    final _options = _setStreamType<TokenUsageResponse>(Options(
      method: 'GET',
      headers: _headers,
      extra: _extra,
    )
        .compose(
          _dio.options,
          '/api/v1/tokens/usage',
          queryParameters: queryParameters,
          data: _data,
        )
        .copyWith(
            baseUrl: _combineBaseUrls(
          _dio.options.baseUrl,
          baseUrl,
        )));
    final _result = await _dio.fetch<Map<String, dynamic>>(_options);
    late TokenUsageResponse _value;
    try {
      _value = TokenUsageResponse.fromJson(_result.data!);
    } on Object catch (e, s) {
      errorLogger?.logError(e, s, _options);
      rethrow;
    }
    return _value;
  }

  RequestOptions _setStreamType<T>(RequestOptions requestOptions) {
    if (T != dynamic &&
        !(requestOptions.responseType == ResponseType.bytes ||
            requestOptions.responseType == ResponseType.stream)) {
      if (T == String) {
        requestOptions.responseType = ResponseType.plain;
      } else {
        requestOptions.responseType = ResponseType.json;
      }
    }
    return requestOptions;
  }

  String _combineBaseUrls(
    String dioBaseUrl,
    String? baseUrl,
  ) {
    if (baseUrl == null || baseUrl.trim().isEmpty) {
      return dioBaseUrl;
    }

    final url = Uri.parse(baseUrl);

    if (url.isAbsolute) {
      return url.toString();
    }

    return Uri.parse(dioBaseUrl).resolveUri(url).toString();
  }
}

================
File: data/network/auth_interceptor.dart
================
import 'package:dio/dio.dart';
import 'package:flutter/foundation.dart';
import 'package:jarvis/app/app_prefs.dart';
import 'package:jarvis/app/constant.dart';
import 'package:jarvis/data/network/app_api.dart';
import 'package:pretty_dio_logger/pretty_dio_logger.dart';

class AuthInterceptor extends Interceptor {
  final AppPreferences _appPreferences;
  final Dio _dio;

  AuthInterceptor(this._appPreferences, this._dio);

  @override
  void onRequest(RequestOptions options, RequestInterceptorHandler handler) async {
    // Do not add Authorization header to the refresh token request
    if (options.path != ConstantAPI.refreshToken) {
      final accessToken = await _appPreferences.getAccessToken();
      if (accessToken.isNotEmpty) {
        options.headers[Constant.AUTHORIZATION] = 'Bearer $accessToken';
      }
    }
    handler.next(options);
  }

  @override
  void onError(DioException err, ErrorInterceptorHandler handler) async {
    if (err.response?.statusCode == 401) {
      try {
        final refreshed = await _handleRefreshToken();
        if (refreshed) {
          // Get new access token
          final accessToken = await _appPreferences.getAccessToken();
          // Update the headers
          final options = err.requestOptions;
          options.headers[Constant.AUTHORIZATION] = 'Bearer $accessToken';
          // Retry the request
          final response = await _dio.fetch(options);
          return handler.resolve(response);
        } else {
          // Refresh token failed, navigate to login
          await _appPreferences.clearTokens();
          _navigateToLogin();
          return handler.reject(err);
        }
      } catch (e) {
        // Handle error and navigate to login
        await _appPreferences.clearTokens();
        _navigateToLogin();
        return handler.reject(err);
      }
    } else {
      handler.next(err);
    }
  }

  Future<bool> _handleRefreshToken() async {
    try {
      final refreshToken = await _appPreferences.getRefreshToken();
      if (refreshToken.isEmpty) return false;

      // Use a new Dio instance without interceptors for refresh token
      Dio refreshDio = Dio();
      refreshDio.options = BaseOptions(
        baseUrl: Constant.baseUrl,
        headers: {
          Constant.CONTENT_TYPE: Constant.APPLICATION_JSON,
          Constant.ACCEPT: Constant.APPLICATION_JSON,
        },
      );

      final appServiceClient = AppServiceClient(refreshDio);

      // final refreshTokenRequest = RefreshTokenRequest(refreshToken: refreshToken);
      // Make the refresh token request
      final response = await appServiceClient.refreshToken(refreshToken);

      if (!kReleaseMode) {
            refreshDio.interceptors.add(PrettyDioLogger(
              requestHeader: true,
              requestBody: true,
              responseHeader: true,
              responseBody: true,
              compact: true,
            ));
          }
      // Save the new access token
      final newToken = response.token;
      await _appPreferences.setAccessToken(newToken.accessToken);

      return true;
    } catch (e) {
      print('Error while refreshing token: $e');
      return false;
    }
  }

  void _navigateToLogin() {
    // Navigate to the sign-in screen
    print("navigate to sign in");
    // Implement navigation logic here using navigatorKey or any other method
  }
}

================
File: data/network/dio_factory.dart
================
// lib/data/network/dio_factory.dart

import 'package:dio/dio.dart';
import 'package:flutter/foundation.dart';
import 'package:jarvis/app/app_prefs.dart';
import 'package:jarvis/app/constant.dart';
import 'package:jarvis/data/network/auth_interceptor.dart';
import 'package:pretty_dio_logger/pretty_dio_logger.dart';

class DioFactory {
  final AppPreferences _appPreferences;

  DioFactory(this._appPreferences);

  Dio getDio() {
    Dio dio = Dio();

    final language = _appPreferences.getAppLanguage();

    Map<String, String> headers = {
      Constant.CONTENT_TYPE: Constant.APPLICATION_JSON,
      Constant.ACCEPT: Constant.APPLICATION_JSON,
      Constant.DEFAULT_LANGUAGE: language,
      // AUTHORIZATION will be added by the AuthInterceptor
    };

    const timeOut = 60; // 1 minute

    dio.options = BaseOptions(
      baseUrl: Constant.baseUrl,
      connectTimeout: const Duration(seconds: timeOut),
      receiveTimeout: const Duration(seconds: timeOut),
      headers: headers,
    );

    // Add the AuthInterceptor
    dio.interceptors.add(AuthInterceptor(_appPreferences, dio));
    
    if (!kReleaseMode) {
      dio.interceptors.add(PrettyDioLogger(
        requestHeader: true,
        requestBody: true,
        responseHeader: true,
        responseBody: true,
        compact: true,
      ));
    }

    return dio;
  }
}

================
File: data/network/error_handler.dart
================
import 'package:dio/dio.dart';
import 'package:jarvis/data/network/failure.dart';

enum DataSource {
  SUCCESS,
  NO_CONTENT,
  BAD_REQUEST,
  FORBIDDEN,
  UNAUTHORISED,
  NOT_FOUND,
  INTERNAL_SERVER_ERROR,
  CONNECT_TIMEOUT,
  CANCEL,
  RECEIVE_TIMEOUT,
  SEND_TIMEOUT,
  CACHE_ERROR,
  NO_INTERNET_CONNECTION,
  DEFAULT,
}

class ErrorHandler implements Exception {
  late Failure failure;

  ErrorHandler.handle(dynamic error) {
    if (error is DioException) {
      // dio exception so its error from response of the API
      failure = _handleError(error);
    } else {
      // default error
      failure = DataSource.DEFAULT.getFailure();
    }
  }

  Failure _handleError(DioException error) {
    switch (error.type) {
      case DioExceptionType.connectionTimeout:
        return DataSource.CONNECT_TIMEOUT.getFailure();

      case DioExceptionType.sendTimeout:
        return DataSource.SEND_TIMEOUT.getFailure();

      case DioExceptionType.receiveTimeout:
        return DataSource.RECEIVE_TIMEOUT.getFailure();

      case DioExceptionType.cancel:
        return DataSource.CANCEL.getFailure();

      case DioExceptionType.connectionError:
        return DataSource.CONNECT_TIMEOUT.getFailure();

      case DioExceptionType.unknown:
        return DataSource.DEFAULT.getFailure();

      case DioExceptionType.badCertificate:
        return DataSource.DEFAULT.getFailure();

      case DioExceptionType.badResponse:
        switch (error.response?.statusCode) {
          case ResponseCode.BAD_REQUEST:
            return DataSource.BAD_REQUEST.getFailure();
          case ResponseCode.FORBIDDEN:
            return DataSource.FORBIDDEN.getFailure();
          case ResponseCode.UNAUTHORISED:
            return DataSource.UNAUTHORISED.getFailure();
          case ResponseCode.NOT_FOUND:
            return DataSource.NOT_FOUND.getFailure();
          case ResponseCode.INTERNAL_SERVER_ERROR:
            return DataSource.INTERNAL_SERVER_ERROR.getFailure();
          default:
            return DataSource.DEFAULT.getFailure();
        }
      default:
        return DataSource.DEFAULT.getFailure();
    }
  }
}

extension DataSourceExtension on DataSource {
  Failure getFailure() {
    switch (this) {
      case DataSource.BAD_REQUEST:
        return Failure(ResponseCode.BAD_REQUEST, ResponseMessage.BAD_REQUEST);

      case DataSource.FORBIDDEN:
        return Failure(ResponseCode.FORBIDDEN, ResponseMessage.FORBIDDEN);

      case DataSource.UNAUTHORISED:
        return Failure(ResponseCode.UNAUTHORISED, ResponseMessage.UNAUTHORISED);

      case DataSource.NOT_FOUND:
        return Failure(ResponseCode.NOT_FOUND, ResponseMessage.NOT_FOUND);

      case DataSource.INTERNAL_SERVER_ERROR:
        return Failure(ResponseCode.INTERNAL_SERVER_ERROR,
            ResponseMessage.INTERNAL_SERVER_ERROR);

      case DataSource.CONNECT_TIMEOUT:
        return Failure(
            ResponseCode.CONNECT_TIMEOUT, ResponseMessage.CONNECT_TIMEOUT);

      case DataSource.CANCEL:
        return Failure(ResponseCode.CANCEL, ResponseMessage.CANCEL);

      case DataSource.RECEIVE_TIMEOUT:
        return Failure(
            ResponseCode.RECEIVE_TIMEOUT, ResponseMessage.RECEIVE_TIMEOUT);

      case DataSource.SEND_TIMEOUT:
        return Failure(ResponseCode.SEND_TIMEOUT, ResponseMessage.SEND_TIMEOUT);

      case DataSource.CACHE_ERROR:
        return Failure(ResponseCode.CACHE_ERROR, ResponseMessage.CACHE_ERROR);

      case DataSource.NO_INTERNET_CONNECTION:
        return Failure(ResponseCode.NO_INTERNET_CONNECTION,
            ResponseMessage.NO_INTERNET_CONNECTION);

      case DataSource.DEFAULT:
        return Failure(ResponseCode.DEFAULT, ResponseMessage.DEFAULT);

      default:
        return Failure(ResponseCode.DEFAULT, ResponseMessage.DEFAULT);
    }
  }
}

class ResponseCode {
  // API status code
  static const int SUCCESS = 200; // succes with data
  static const int NO_CONTENT = 201; // success without content
  static const int FORBIDDEN = 403; // failure, api reject the request
  static const int BAD_REQUEST = 400; // failure, api reject the request
  static const int UNAUTHORISED = 401; //failure, user is not authorised
  static const int NOT_FOUND = 404; // failure, api url is incorrect and not found
  static const int INTERNAL_SERVER_ERROR = 500; // failure, crash happened in server side

  // local status code
  static const int DEFAULT = -1;
  static const int CONNECT_TIMEOUT = -2;
  static const int CANCEL = -3;
  static const int RECEIVE_TIMEOUT = -4;
  static const int SEND_TIMEOUT = -5;
  static const int CACHE_ERROR = -6;
  static const int NO_INTERNET_CONNECTION = -7;
}

class ResponseMessage {
  // API status code
  static const String SUCCESS = "Success"; // succes with data
  static const String NO_CONTENT =
      "Success without content"; // success without content
  static const String FORBIDDEN =
      "Forbidden request, try again later"; // failure, api reject the request
  static const String BAD_REQUEST =
      "Bad request, try again later"; // failure, api reject the request
  static const String UNAUTHORISED =
      "User is unauthorised, try again later"; //failure, user is not authorised
  static const String NOT_FOUND =
      "Url is not found, try again later"; // failure, api url is incorrect and not found
  static const String INTERNAL_SERVER_ERROR =
      "Some thing went wrong, try again later"; // failure, crash happened in server side

  // local status code
  static const String DEFAULT = "Some thing went wrong, try again later";
  static const String CONNECT_TIMEOUT = "Time out error, try again later";
  static const String CANCEL = "Request was cancelled, try again later";
  static const String RECEIVE_TIMEOUT = "Time out error, try again later";
  static const String SEND_TIMEOUT = "Time out error, try again later";
  static const String CACHE_ERROR = "Cache error, try again later";
  static const String NO_INTERNET_CONNECTION = "Please check your internet connection";
}

class ApiInternalStatus {
  static const int SUCCESS = 0;
  static const int FAILURE = 1;
}

================
File: data/network/failure.dart
================
class Failure {
  int code; // 200 or 400
  String message; // failure or success

  Failure(this.code, this.message);
}

================
File: data/network/network_info.dart
================
import 'package:internet_connection_checker/internet_connection_checker.dart';

abstract class NetworkInfo {
  Future<bool> get isConnected;
}

class NetworkInfoImpl implements NetworkInfo {
  final InternetConnectionChecker _internetConnectionChecker;

  NetworkInfoImpl(this._internetConnectionChecker);

  @override
  Future<bool> get isConnected => _internetConnectionChecker.hasConnection;
}

================
File: data/repository/prompt_repository_impl.dart
================
import 'dart:developer';

import 'package:dartz/dartz.dart';
import 'package:jarvis/data/mapper/prompt_mapper.dart';
import '../data_source/remote_data_source.dart';
import '../network/error_handler.dart';
import '../network/failure.dart';
import '../network/network_info.dart';
import '../../domain/model/prompt.dart';
import '../../domain/repository/prompt_repository.dart';
import '../request/request.dart';

class PromptRepositoryImpl implements PromptRepository {
  final RemoteDataSource _remoteDataSource;
  final NetworkInfo _networkInfo;

  PromptRepositoryImpl(this._remoteDataSource, this._networkInfo);

  @override
  Future<Either<Failure, List<Prompt>>> getPublicPrompts(String category, {bool? isFavorite, String? query}) async {
    if (await _networkInfo.isConnected) {
      try {
        // Only pass category if it's not "all"
        final categoryParam = category.toLowerCase() == "all" ? null : category.toLowerCase();

        final response = await _remoteDataSource.getPrompts(
            categoryParam,
            true,
            isFavorite: isFavorite,
            query: query
        );
        log("hello"+response.toString());
        return Right(response.items.map((e) => e.toDomain()).toList());
      } catch (error) {
        return Left(ErrorHandler.handle(error).failure);
      }
    } else {
      return Left(DataSource.NO_INTERNET_CONNECTION.getFailure());
    }
  }

  @override
  Future<Either<Failure, List<Prompt>>> getPrivatePrompts(String category, {bool? isFavorite, String? query}) async {
    if (await _networkInfo.isConnected) {
      try {
        // Only pass category if it's not "all"
        final categoryParam = category.toLowerCase() == "all" ? null : category.toLowerCase();

        final response = await _remoteDataSource.getPrompts(
          categoryParam,
          false,
          isFavorite: isFavorite,
          query: query,
        );
        return Right(response.items.map((e) => e.toDomain()).toList());
      } catch (error) {
        return Left(ErrorHandler.handle(error).failure);
      }
    } else {
      return Left(DataSource.NO_INTERNET_CONNECTION.getFailure());
    }
  }

  @override
  Future<Either<Failure, void>> addToFavorites(String promptId) async {
    if (await _networkInfo.isConnected) {
      try {
        await _remoteDataSource.addToFavorites(promptId);
        return const Right(null);
      } catch (error) {
        return Left(ErrorHandler.handle(error).failure);
      }
    } else {
      return Left(DataSource.NO_INTERNET_CONNECTION.getFailure());
    }
  }

  Future<Either<Failure, Prompt>> createPrompt(CreatePromptRequest request) async {
    if (await _networkInfo.isConnected) {
      try {
        final response = await _remoteDataSource.createPrompt(request);
        return Right(response.toDomain());
      } catch (error) {
        return Left(ErrorHandler.handle(error).failure);
      }
    } else {
      return Left(DataSource.NO_INTERNET_CONNECTION.getFailure());
    }
  }
  @override
  Future<Either<Failure, void>> updatePrompt(String promptId, UpdatePromptRequest request) async {
    if (await _networkInfo.isConnected) {
      try {
        await _remoteDataSource.updatePrompt(promptId, request);
        return const Right(null);
      } catch (error) {
        return Left(ErrorHandler.handle(error).failure);
      }
    } else {
      return Left(DataSource.NO_INTERNET_CONNECTION.getFailure());
    }
  }

  @override
  Future<Either<Failure, void>> deletePrompt(String promptId) async {
    if (await _networkInfo.isConnected) {
      try {
        await _remoteDataSource.deletePrompt(promptId);
        return const Right(null);
      } catch (error) {
        return Left(ErrorHandler.handle(error).failure);
      }
    } else {
      return Left(DataSource.NO_INTERNET_CONNECTION.getFailure());
    }
  }

}

================
File: data/repository/repository_impl.dart
================
import 'package:dartz/dartz.dart';
import 'package:jarvis/data/data_source/remote_data_source.dart';
import 'package:jarvis/data/mapper/mapper.dart';
import 'package:jarvis/data/network/error_handler.dart';
import 'package:jarvis/data/network/failure.dart';
import 'package:jarvis/data/network/network_info.dart';
import 'package:jarvis/data/request/ai_chat/authentication/request.dart';
import 'package:jarvis/data/request/ai_chat/send_message/send_message_request.dart';
import 'package:jarvis/domain/model/model.dart';
import 'package:jarvis/domain/repository/repository.dart';

class RepositoryImpl implements Repository {
  final RemoteDataSource _remoteDataSource;
  final NetworkInfo _networkInfo;

  RepositoryImpl(this._remoteDataSource, this._networkInfo);

  @override
  Future<Either<Failure, Token>> signIn(SignInRequest signInRequest) async {
    if (await _networkInfo.isConnected) {
      try {
        final response = await _remoteDataSource.signIn(signInRequest);

        return Right(response.toDomain());
      } catch (error) {
        return Left(ErrorHandler.handle(error).failure);
      }
    } else {
      return Left(DataSource.NO_INTERNET_CONNECTION.getFailure());
    }
  }

  @override
  Future<Either<Failure, User>> signUp(SignUpRequest signUpRequest) async {
    if (await _networkInfo.isConnected) {
      try {
        final response = await _remoteDataSource.signUp(signUpRequest);

        return Right(response.toDomain());
      } catch (error) {
        return Left(ErrorHandler.handle(error).failure);
      }
    } else {
      return Left(DataSource.NO_INTERNET_CONNECTION.getFailure());
    }
  }

  @override
  Future<Either<Failure, void>> signOut() async {
    if (await _networkInfo.isConnected) {
      try {
        await _remoteDataSource.signOut();
        
        return const Right(null);
      } catch (error) {
        return Left(ErrorHandler.handle(error).failure);
      }
    } else {
      return Left(DataSource.NO_INTERNET_CONNECTION.getFailure());
    }
  }
  
  @override
  Future<Either<Failure, Token>> refreshToken(String refreshTokenRequest) async {
    if (await _networkInfo.isConnected) {
      try {
        final response = await _remoteDataSource.refreshToken(refreshTokenRequest);

        return Right(response.toDomain());
      } catch (error) {
        return Left(ErrorHandler.handle(error).failure);
      }
    } else {
      return Left(DataSource.NO_INTERNET_CONNECTION.getFailure());
    }
  }

  @override
  Future<Either<Failure, Message>> sendMessage(SendMessageRequest sendMessageRequest) async {
    if (await _networkInfo.isConnected) {
      try {
        final response = await _remoteDataSource.sendMessage(sendMessageRequest);

        return Right(response.toDomain(isUser: false));
      } catch (error) {
        return Left(ErrorHandler.handle(error).failure);
      }
    } else {
      return Left(DataSource.NO_INTERNET_CONNECTION.getFailure());
    }
  }

  @override
  Future<Either<Failure, TokenUsage>> getTokenUsage() async {
    if (await _networkInfo.isConnected) {
      try {
        final response = await _remoteDataSource.getTokenUsage();

        return Right(response.toDomain());
      } catch (error) {
        return Left(ErrorHandler.handle(error).failure);
      }
    } else {
      return Left(DataSource.NO_INTERNET_CONNECTION.getFailure());
    }
  }

}

================
File: data/request/ai_chat/authentication/request.dart
================
// request.dart

import 'package:json_annotation/json_annotation.dart';

part 'request.g.dart';

@JsonSerializable()
class SignInRequest {
  final String email;
  final String password;

  SignInRequest({
    required this.email,
    required this.password,
  });

  factory SignInRequest.fromJson(Map<String, dynamic> json) =>
      _$SignInRequestFromJson(json);

  Map<String, dynamic> toJson() => _$SignInRequestToJson(this);
}

@JsonSerializable()
class SignUpRequest {
  final String email;
  final String password;
  final String username;

  SignUpRequest({
    required this.email,
    required this.password,
    required this.username,
  });

  factory SignUpRequest.fromJson(Map<String, dynamic> json) =>
      _$SignUpRequestFromJson(json);

  Map<String, dynamic> toJson() => _$SignUpRequestToJson(this);
}

@JsonSerializable()
class RefreshTokenRequest {
  final String refreshToken;

  RefreshTokenRequest({required this.refreshToken});

  factory RefreshTokenRequest.fromJson(Map<String, dynamic> json) =>
      _$RefreshTokenRequestFromJson(json);

  Map<String, dynamic> toJson() => _$RefreshTokenRequestToJson(this);
}

================
File: data/request/ai_chat/authentication/request.g.dart
================
// GENERATED CODE - DO NOT MODIFY BY HAND

part of 'request.dart';

// **************************************************************************
// JsonSerializableGenerator
// **************************************************************************

SignInRequest _$SignInRequestFromJson(Map<String, dynamic> json) =>
    SignInRequest(
      email: json['email'] as String,
      password: json['password'] as String,
    );

Map<String, dynamic> _$SignInRequestToJson(SignInRequest instance) =>
    <String, dynamic>{
      'email': instance.email,
      'password': instance.password,
    };

SignUpRequest _$SignUpRequestFromJson(Map<String, dynamic> json) =>
    SignUpRequest(
      email: json['email'] as String,
      password: json['password'] as String,
      username: json['username'] as String,
    );

Map<String, dynamic> _$SignUpRequestToJson(SignUpRequest instance) =>
    <String, dynamic>{
      'email': instance.email,
      'password': instance.password,
      'username': instance.username,
    };

RefreshTokenRequest _$RefreshTokenRequestFromJson(Map<String, dynamic> json) =>
    RefreshTokenRequest(
      refreshToken: json['refreshToken'] as String,
    );

Map<String, dynamic> _$RefreshTokenRequestToJson(
        RefreshTokenRequest instance) =>
    <String, dynamic>{
      'refreshToken': instance.refreshToken,
    };

================
File: data/request/ai_chat/send_message/assistant.dart
================
import 'package:json_annotation/json_annotation.dart';

part 'assistant.g.dart';

@JsonSerializable()
class Assistant {
  final String? id;
  final String model;
  final String name;

  Assistant({
    this.id,
    required this.model,
    required this.name,
  });

  factory Assistant.fromJson(Map<String, dynamic> json) =>
      _$AssistantFromJson(json);

  Map<String, dynamic> toJson() => _$AssistantToJson(this);
}

================
File: data/request/ai_chat/send_message/assistant.g.dart
================
// GENERATED CODE - DO NOT MODIFY BY HAND

part of 'assistant.dart';

// **************************************************************************
// JsonSerializableGenerator
// **************************************************************************

Assistant _$AssistantFromJson(Map<String, dynamic> json) => Assistant(
      id: json['id'] as String?,
      model: json['model'] as String,
      name: json['name'] as String,
    );

Map<String, dynamic> _$AssistantToJson(Assistant instance) => <String, dynamic>{
      'id': instance.id,
      'model': instance.model,
      'name': instance.name,
    };

================
File: data/request/ai_chat/send_message/chat_conversation.dart
================
// lib/data/request/chat_conversation.dart

import 'package:json_annotation/json_annotation.dart';
import 'chat_message.dart';

part 'chat_conversation.g.dart';

@JsonSerializable()
class ChatConversation {
  @JsonKey(includeIfNull: false)
  final String? id;
  
  @JsonKey(includeIfNull: false)
  final List<ChatMessage>? messages;

  ChatConversation({
    this.id,
    this.messages,
  });

  factory ChatConversation.fromJson(Map<String, dynamic> json) =>
      _$ChatConversationFromJson(json);

  Map<String, dynamic> toJson() => _$ChatConversationToJson(this);
}

================
File: data/request/ai_chat/send_message/chat_conversation.g.dart
================
// GENERATED CODE - DO NOT MODIFY BY HAND

part of 'chat_conversation.dart';

// **************************************************************************
// JsonSerializableGenerator
// **************************************************************************

ChatConversation _$ChatConversationFromJson(Map<String, dynamic> json) =>
    ChatConversation(
      id: json['id'] as String?,
      messages: (json['messages'] as List<dynamic>?)
          ?.map((e) => ChatMessage.fromJson(e as Map<String, dynamic>))
          .toList(),
    );

Map<String, dynamic> _$ChatConversationToJson(ChatConversation instance) {
  final val = <String, dynamic>{};

  void writeNotNull(String key, dynamic value) {
    if (value != null) {
      val[key] = value;
    }
  }

  writeNotNull('id', instance.id);
  writeNotNull('messages', instance.messages);
  return val;
}

================
File: data/request/ai_chat/send_message/chat_message.dart
================
// lib/data/request/chat_message.dart

import 'package:jarvis/data/request/ai_chat/send_message/message_role.dart';
import 'package:json_annotation/json_annotation.dart';
import 'assistant.dart';

part 'chat_message.g.dart';

@JsonSerializable()
class ChatMessage {
  final Assistant assistant;
  final String content;

  @JsonKey(includeIfNull: false)
  final List<String>? files;
  final MessageRole role;

  ChatMessage({
    required this.assistant,
    required this.content,
    this.files,
    required this.role,
  });

  factory ChatMessage.fromJson(Map<String, dynamic> json) =>
      _$ChatMessageFromJson(json);

  Map<String, dynamic> toJson() => _$ChatMessageToJson(this);
}

================
File: data/request/ai_chat/send_message/chat_message.g.dart
================
// GENERATED CODE - DO NOT MODIFY BY HAND

part of 'chat_message.dart';

// **************************************************************************
// JsonSerializableGenerator
// **************************************************************************

ChatMessage _$ChatMessageFromJson(Map<String, dynamic> json) => ChatMessage(
      assistant: Assistant.fromJson(json['assistant'] as Map<String, dynamic>),
      content: json['content'] as String,
      files:
          (json['files'] as List<dynamic>?)?.map((e) => e as String).toList(),
      role: $enumDecode(_$MessageRoleEnumMap, json['role']),
    );

Map<String, dynamic> _$ChatMessageToJson(ChatMessage instance) {
  final val = <String, dynamic>{
    'assistant': instance.assistant,
    'content': instance.content,
  };

  void writeNotNull(String key, dynamic value) {
    if (value != null) {
      val[key] = value;
    }
  }

  writeNotNull('files', instance.files);
  val['role'] = _$MessageRoleEnumMap[instance.role]!;
  return val;
}

const _$MessageRoleEnumMap = {
  MessageRole.user: 'user',
  MessageRole.model: 'model',
};

================
File: data/request/ai_chat/send_message/message_role.dart
================
import 'package:json_annotation/json_annotation.dart';

enum MessageRole {
  @JsonValue('user')
  user,
  
  @JsonValue('model')
  model,
}

================
File: data/request/ai_chat/send_message/send_message_metadata.dart
================
// lib/data/request/ai_chat_metadata.dart

import 'package:json_annotation/json_annotation.dart';
import 'chat_conversation.dart';

part 'send_message_metadata.g.dart';

@JsonSerializable()
class SendMessageMetadata {
  final ChatConversation? conversation;

  SendMessageMetadata({
   this.conversation,
  });

  factory SendMessageMetadata.fromJson(Map<String, dynamic> json) =>
      _$SendMessageMetadataFromJson(json);

  Map<String, dynamic> toJson() => _$SendMessageMetadataToJson(this);
}

================
File: data/request/ai_chat/send_message/send_message_metadata.g.dart
================
// GENERATED CODE - DO NOT MODIFY BY HAND

part of 'send_message_metadata.dart';

// **************************************************************************
// JsonSerializableGenerator
// **************************************************************************

SendMessageMetadata _$SendMessageMetadataFromJson(Map<String, dynamic> json) =>
    SendMessageMetadata(
      conversation: json['conversation'] == null
          ? null
          : ChatConversation.fromJson(
              json['conversation'] as Map<String, dynamic>),
    );

Map<String, dynamic> _$SendMessageMetadataToJson(
        SendMessageMetadata instance) =>
    <String, dynamic>{
      'conversation': instance.conversation,
    };

================
File: data/request/ai_chat/send_message/send_message_request.dart
================
// lib/data/request/ai_chat_request.dart

import 'package:json_annotation/json_annotation.dart';
import 'assistant.dart';
import 'send_message_metadata.dart';

part 'send_message_request.g.dart';

@JsonSerializable()
class SendMessageRequest {
  final Assistant? assistant;
  final String content;

  @JsonKey(includeIfNull: false)
  final List<String>? files;
  
  final SendMessageMetadata? metadata;

  SendMessageRequest({
    this.assistant,
    required this.content,
    this.files,
    this.metadata,
  });

  factory SendMessageRequest.fromJson(Map<String, dynamic> json) =>
      _$SendMessageRequestFromJson(json);

  Map<String, dynamic> toJson() => _$SendMessageRequestToJson(this);
}

================
File: data/request/ai_chat/send_message/send_message_request.g.dart
================
// GENERATED CODE - DO NOT MODIFY BY HAND

part of 'send_message_request.dart';

// **************************************************************************
// JsonSerializableGenerator
// **************************************************************************

SendMessageRequest _$SendMessageRequestFromJson(Map<String, dynamic> json) =>
    SendMessageRequest(
      assistant: json['assistant'] == null
          ? null
          : Assistant.fromJson(json['assistant'] as Map<String, dynamic>),
      content: json['content'] as String,
      files:
          (json['files'] as List<dynamic>?)?.map((e) => e as String).toList(),
      metadata: json['metadata'] == null
          ? null
          : SendMessageMetadata.fromJson(
              json['metadata'] as Map<String, dynamic>),
    );

Map<String, dynamic> _$SendMessageRequestToJson(SendMessageRequest instance) {
  final val = <String, dynamic>{
    'assistant': instance.assistant,
    'content': instance.content,
  };

  void writeNotNull(String key, dynamic value) {
    if (value != null) {
      val[key] = value;
    }
  }

  writeNotNull('files', instance.files);
  val['metadata'] = instance.metadata;
  return val;
}

================
File: data/request/request.dart
================
// request.dart

import 'package:json_annotation/json_annotation.dart';

part 'request.g.dart';

// @JsonSerializable()
// class SignInRequest {
//   final String email;
//   final String password;
//
//   SignInRequest({
//     required this.email,
//     required this.password,
//   });
//
//   factory SignInRequest.fromJson(Map<String, dynamic> json) =>
//       _$SignInRequestFromJson(json);
//
//   Map<String, dynamic> toJson() => _$SignInRequestToJson(this);
// }
//
// @JsonSerializable()
// class SignUpRequest {
//   final String email;
//   final String password;
//   final String username;
//
//   SignUpRequest({
//     required this.email,
//     required this.password,
//     required this.username,
//   });
//
//   factory SignUpRequest.fromJson(Map<String, dynamic> json) =>
//       _$SignUpRequestFromJson(json);
//
//   Map<String, dynamic> toJson() => _$SignUpRequestToJson(this);
// }

@JsonSerializable()
class RefreshTokenRequest {
  final String refreshToken;

  RefreshTokenRequest({required this.refreshToken});

  factory RefreshTokenRequest.fromJson(Map<String, dynamic> json) =>
      _$RefreshTokenRequestFromJson(json);

  Map<String, dynamic> toJson() => _$RefreshTokenRequestToJson(this);
}
@JsonSerializable()
class CreatePromptRequest {
  final String title;
  final String content;
  final String description;
  final String category;
  final String language;
  final bool isPublic;

  CreatePromptRequest({
    required this.title,
    required this.content,
    required this.description,
    required this.category,
    required this.language,
    required this.isPublic
  });

  factory CreatePromptRequest.fromJson(Map<String, dynamic> json) =>
      _$CreatePromptRequestFromJson(json);

  Map<String, dynamic> toJson() => _$CreatePromptRequestToJson(this);
}

@JsonSerializable()
class UpdatePromptRequest {
  final String? title;
  final String? content;
  final String description;
  final String category;
  final String language;
  final bool isPublic;

  UpdatePromptRequest({
    this.title,
    this.content,
    required this.description,
    required this.category,
    required this.language,
    required this.isPublic
  });

  factory UpdatePromptRequest.fromJson(Map<String, dynamic> json) =>
      _$UpdatePromptRequestFromJson(json);
  Map<String, dynamic> toJson() => _$UpdatePromptRequestToJson(this);
}

================
File: data/request/request.g.dart
================
// GENERATED CODE - DO NOT MODIFY BY HAND

part of 'request.dart';

// **************************************************************************
// JsonSerializableGenerator
// **************************************************************************

RefreshTokenRequest _$RefreshTokenRequestFromJson(Map<String, dynamic> json) =>
    RefreshTokenRequest(
      refreshToken: json['refreshToken'] as String,
    );

Map<String, dynamic> _$RefreshTokenRequestToJson(
        RefreshTokenRequest instance) =>
    <String, dynamic>{
      'refreshToken': instance.refreshToken,
    };

CreatePromptRequest _$CreatePromptRequestFromJson(Map<String, dynamic> json) =>
    CreatePromptRequest(
      title: json['title'] as String,
      content: json['content'] as String,
      description: json['description'] as String,
      category: json['category'] as String,
      language: json['language'] as String,
      isPublic: json['isPublic'] as bool,
    );

Map<String, dynamic> _$CreatePromptRequestToJson(
        CreatePromptRequest instance) =>
    <String, dynamic>{
      'title': instance.title,
      'content': instance.content,
      'description': instance.description,
      'category': instance.category,
      'language': instance.language,
      'isPublic': instance.isPublic,
    };

UpdatePromptRequest _$UpdatePromptRequestFromJson(Map<String, dynamic> json) =>
    UpdatePromptRequest(
      title: json['title'] as String?,
      content: json['content'] as String?,
      description: json['description'] as String,
      category: json['category'] as String,
      language: json['language'] as String,
      isPublic: json['isPublic'] as bool,
    );

Map<String, dynamic> _$UpdatePromptRequestToJson(
        UpdatePromptRequest instance) =>
    <String, dynamic>{
      'title': instance.title,
      'content': instance.content,
      'description': instance.description,
      'category': instance.category,
      'language': instance.language,
      'isPublic': instance.isPublic,
    };

================
File: data/responses/ai_chat/send_message_response.dart
================
// ignore_for_file: public_member_api_docs, sort_constructors_first
// lib/data/response/send_message_response.dart

import 'package:json_annotation/json_annotation.dart';

part 'send_message_response.g.dart';


@JsonSerializable()
class SendMessageResponse {
  final String conversationId;
  final String message;
  final int remainingUsage;
  
  SendMessageResponse({
    required this.conversationId,
    required this.message,
    required this.remainingUsage,
  });

  factory SendMessageResponse.fromJson(Map<String, dynamic> json) =>
      _$SendMessageResponseFromJson(json);

  Map<String, dynamic> toJson() => _$SendMessageResponseToJson(this);
}

================
File: data/responses/ai_chat/send_message_response.g.dart
================
// GENERATED CODE - DO NOT MODIFY BY HAND

part of 'send_message_response.dart';

// **************************************************************************
// JsonSerializableGenerator
// **************************************************************************

SendMessageResponse _$SendMessageResponseFromJson(Map<String, dynamic> json) =>
    SendMessageResponse(
      conversationId: json['conversationId'] as String,
      message: json['message'] as String,
      remainingUsage: (json['remainingUsage'] as num).toInt(),
    );

Map<String, dynamic> _$SendMessageResponseToJson(
        SendMessageResponse instance) =>
    <String, dynamic>{
      'conversationId': instance.conversationId,
      'message': instance.message,
      'remainingUsage': instance.remainingUsage,
    };

================
File: data/responses/responses.dart
================
import 'package:jarvis/domain/model/model.dart';
import 'package:json_annotation/json_annotation.dart';

part 'responses.g.dart';

@JsonSerializable()
class UserResponse {
  final String email;
  final String password;
  final String username;
  final bool isActive;
  final List<String> usedAuthOptions;
  final List<String> roles;
  final String? createdBy;
  final String? updatedBy;
  final String? hashedRefreshToken;
  final String createdAt;
  final String updatedAt;
  final String? deletedAt;
  final String id;

  UserResponse({
    required this.email,
    required this.password,
    required this.username,
    required this.isActive,
    required this.usedAuthOptions,
    required this.roles,
    this.createdBy,
    this.updatedBy,
    this.hashedRefreshToken,
    required this.createdAt,
    required this.updatedAt,
    this.deletedAt,
    required this.id,
  });

  factory UserResponse.fromJson(Map<String, dynamic> json) =>
      _$UserResponseFromJson(json);

  Map<String, dynamic> toJson() => _$UserResponseToJson(this);
}

@JsonSerializable()
class SignUpResponse {
  final UserResponse user;

  SignUpResponse({required this.user});

  factory SignUpResponse.fromJson(Map<String, dynamic> json) =>
      _$SignUpResponseFromJson(json);

  Map<String, dynamic> toJson() => _$SignUpResponseToJson(this);
}

@JsonSerializable()
class TokenResponse {
  final String accessToken;
  final String? refreshToken;

  TokenResponse({
    required this.accessToken,
    this.refreshToken,
  });

  factory TokenResponse.fromJson(Map<String, dynamic> json) =>
      _$TokenResponseFromJson(json);

  Map<String, dynamic> toJson() => _$TokenResponseToJson(this);
}

@JsonSerializable()
class SignInResponse {
  final TokenResponse token;

  SignInResponse({required this.token});

  factory SignInResponse.fromJson(Map<String, dynamic> json) =>
      _$SignInResponseFromJson(json);

  Map<String, dynamic> toJson() => _$SignInResponseToJson(this);
}

@JsonSerializable()
class SignOutResponse {
  SignOutResponse();
  
  factory SignOutResponse.fromJson(Map<String, dynamic> json) =>
      _$SignOutResponseFromJson(json);

  Map<String, dynamic> toJson() => _$SignOutResponseToJson(this);
}

@JsonSerializable()
class RefreshTokenResponse {
  final TokenResponse token;

  RefreshTokenResponse({required this.token});

  factory RefreshTokenResponse.fromJson(Map<String, dynamic> json) =>
      _$RefreshTokenResponseFromJson(json);

  Map<String, dynamic> toJson() => _$RefreshTokenResponseToJson(this);
}

@JsonSerializable()
class PromptCategoryResponse {
  final String? value;
  final String label;

  PromptCategoryResponse({this.value, required this.label});

  factory PromptCategoryResponse.fromJson(Map<String, dynamic> json) {
    return PromptCategoryResponse(
        value: json['value'],
        label: json['label']
    );
  }
}

@JsonSerializable()
class GetPromptsResponse {
  final List<PromptResponse> items;

  GetPromptsResponse({required this.items});

  factory GetPromptsResponse.fromJson(Map<String, dynamic> json) {
    return GetPromptsResponse(
      items: (json['items'] as List)
          .map((e) => PromptResponse.fromJson(e))
          .toList(),
    );
  }
}

@JsonSerializable()
class PromptResponse {
  final String id;
  final String title;
  final String content;
  final String description;
  final String category;
  final bool isPublic;
  final String userName;
  final bool isFavorite;

  PromptResponse({
    required this.id,
    required this.title,
    required this.content,
    required this.description,
    required this.category,
    required this.isPublic,
    required this.userName,
    required this.isFavorite
  });

  factory PromptResponse.fromJson(Map<String, dynamic> json) {
    return PromptResponse(
        id: json['_id'],
        title: json['title'],
        content: json['content']?? '',
        description: json['description'] ?? '',
        category: json['category'],
        isPublic: json['isPublic'],
        userName: json['userName'],
        isFavorite: json['isFavorite']
    );
  }
}

================
File: data/responses/responses.g.dart
================
// GENERATED CODE - DO NOT MODIFY BY HAND

part of 'responses.dart';

// **************************************************************************
// JsonSerializableGenerator
// **************************************************************************

UserResponse _$UserResponseFromJson(Map<String, dynamic> json) => UserResponse(
      email: json['email'] as String,
      password: json['password'] as String,
      username: json['username'] as String,
      isActive: json['isActive'] as bool,
      usedAuthOptions: (json['usedAuthOptions'] as List<dynamic>)
          .map((e) => e as String)
          .toList(),
      roles: (json['roles'] as List<dynamic>).map((e) => e as String).toList(),
      createdBy: json['createdBy'] as String?,
      updatedBy: json['updatedBy'] as String?,
      hashedRefreshToken: json['hashedRefreshToken'] as String?,
      createdAt: json['createdAt'] as String,
      updatedAt: json['updatedAt'] as String,
      deletedAt: json['deletedAt'] as String?,
      id: json['id'] as String,
    );

Map<String, dynamic> _$UserResponseToJson(UserResponse instance) =>
    <String, dynamic>{
      'email': instance.email,
      'password': instance.password,
      'username': instance.username,
      'isActive': instance.isActive,
      'usedAuthOptions': instance.usedAuthOptions,
      'roles': instance.roles,
      'createdBy': instance.createdBy,
      'updatedBy': instance.updatedBy,
      'hashedRefreshToken': instance.hashedRefreshToken,
      'createdAt': instance.createdAt,
      'updatedAt': instance.updatedAt,
      'deletedAt': instance.deletedAt,
      'id': instance.id,
    };

SignUpResponse _$SignUpResponseFromJson(Map<String, dynamic> json) =>
    SignUpResponse(
      user: UserResponse.fromJson(json['user'] as Map<String, dynamic>),
    );

Map<String, dynamic> _$SignUpResponseToJson(SignUpResponse instance) =>
    <String, dynamic>{
      'user': instance.user,
    };

TokenResponse _$TokenResponseFromJson(Map<String, dynamic> json) =>
    TokenResponse(
      accessToken: json['accessToken'] as String,
      refreshToken: json['refreshToken'] as String?,
    );

Map<String, dynamic> _$TokenResponseToJson(TokenResponse instance) =>
    <String, dynamic>{
      'accessToken': instance.accessToken,
      'refreshToken': instance.refreshToken,
    };

SignInResponse _$SignInResponseFromJson(Map<String, dynamic> json) =>
    SignInResponse(
      token: TokenResponse.fromJson(json['token'] as Map<String, dynamic>),
    );

Map<String, dynamic> _$SignInResponseToJson(SignInResponse instance) =>
    <String, dynamic>{
      'token': instance.token,
    };

SignOutResponse _$SignOutResponseFromJson(Map<String, dynamic> json) =>
    SignOutResponse();

Map<String, dynamic> _$SignOutResponseToJson(SignOutResponse instance) =>
    <String, dynamic>{};

RefreshTokenResponse _$RefreshTokenResponseFromJson(
        Map<String, dynamic> json) =>
    RefreshTokenResponse(
      token: TokenResponse.fromJson(json['token'] as Map<String, dynamic>),
    );

Map<String, dynamic> _$RefreshTokenResponseToJson(
        RefreshTokenResponse instance) =>
    <String, dynamic>{
      'token': instance.token,
    };

PromptCategoryResponse _$PromptCategoryResponseFromJson(
        Map<String, dynamic> json) =>
    PromptCategoryResponse(
      value: json['value'] as String?,
      label: json['label'] as String,
    );

Map<String, dynamic> _$PromptCategoryResponseToJson(
        PromptCategoryResponse instance) =>
    <String, dynamic>{
      'value': instance.value,
      'label': instance.label,
    };

GetPromptsResponse _$GetPromptsResponseFromJson(Map<String, dynamic> json) =>
    GetPromptsResponse(
      items: (json['items'] as List<dynamic>)
          .map((e) => PromptResponse.fromJson(e as Map<String, dynamic>))
          .toList(),
    );

Map<String, dynamic> _$GetPromptsResponseToJson(GetPromptsResponse instance) =>
    <String, dynamic>{
      'items': instance.items,
    };

PromptResponse _$PromptResponseFromJson(Map<String, dynamic> json) =>
    PromptResponse(
      id: json['id'] as String,
      title: json['title'] as String,
      content: json['content'] as String,
      description: json['description'] as String,
      category: json['category'] as String,
      isPublic: json['isPublic'] as bool,
      userName: json['userName'] as String,
      isFavorite: json['isFavorite'] as bool,
    );

Map<String, dynamic> _$PromptResponseToJson(PromptResponse instance) =>
    <String, dynamic>{
      'id': instance.id,
      'title': instance.title,
      'content': instance.content,
      'description': instance.description,
      'category': instance.category,
      'isPublic': instance.isPublic,
      'userName': instance.userName,
      'isFavorite': instance.isFavorite,
    };

================
File: data/responses/token/token_usage_response.dart
================
import 'package:json_annotation/json_annotation.dart';

part 'token_usage_response.g.dart';

@JsonSerializable()
class TokenUsageResponse {
  final int availableTokens;
  final int totalTokens;
  final bool unlimited;
  final DateTime date;

  TokenUsageResponse({
    required this.availableTokens,
    required this.totalTokens,
    required this.unlimited,
    required this.date,
  });

  factory TokenUsageResponse.fromJson(Map<String, dynamic> json) =>
      _$TokenUsageResponseFromJson(json);

  Map<String, dynamic> toJson() => _$TokenUsageResponseToJson(this);
}

================
File: data/responses/token/token_usage_response.g.dart
================
// GENERATED CODE - DO NOT MODIFY BY HAND

part of 'token_usage_response.dart';

// **************************************************************************
// JsonSerializableGenerator
// **************************************************************************

TokenUsageResponse _$TokenUsageResponseFromJson(Map<String, dynamic> json) =>
    TokenUsageResponse(
      availableTokens: (json['availableTokens'] as num).toInt(),
      totalTokens: (json['totalTokens'] as num).toInt(),
      unlimited: json['unlimited'] as bool,
      date: DateTime.parse(json['date'] as String),
    );

Map<String, dynamic> _$TokenUsageResponseToJson(TokenUsageResponse instance) =>
    <String, dynamic>{
      'availableTokens': instance.availableTokens,
      'totalTokens': instance.totalTokens,
      'unlimited': instance.unlimited,
      'date': instance.date.toIso8601String(),
    };

================
File: domain/model/model.dart
================
// ignore_for_file: public_member_api_docs, sort_constructors_first
import 'package:jarvis/data/request/ai_chat/send_message/assistant.dart';

class User {
  final String id;
  final String email;
  final String username;
  final bool isActive;
  final List<String> roles;
  final String createdAt;
  final String updatedAt;

  User({
    required this.id,
    required this.email,
    required this.username,
    required this.isActive,
    required this.roles,
    required this.createdAt,
    required this.updatedAt,
  });
}

class Token {
  final String accessToken;
  final String? refreshToken;

  Token({
    required this.accessToken,
    this.refreshToken,
  });
}

class TokenUsage {
  final int availaleTokens;
  final int totalToken;
  final bool unlimited;
  final DateTime date;

  TokenUsage({
    required this.availaleTokens,
    required this.totalToken,
    required this.unlimited,
    required this.date,
  });
}

class Message {
  final String conversationId;
  final String message;
  final int remainingUsage;
  final bool isUser;
  final DateTime timestamp = DateTime.now();

  final Assistant? assistant;

  Message({
    required this.conversationId,
    required this.message,
    required this.remainingUsage,
    required this.isUser,
    this.assistant,
  });

  Message copyWith({
    String? conversationId,
    String? message,
    int? remainingUsage,
    bool? isUser,
  }) {
    return Message(
      conversationId: conversationId ?? this.conversationId,
      message: message ?? this.message,
      remainingUsage: remainingUsage ?? this.remainingUsage,
      isUser: isUser ?? this.isUser,
    );
  }
}

enum PromptCategory {
  ALL,
  MARKETING,
  BUSINESS,
  SEO,
  WRITING,
  CODING,
  CAREER,
  CHATBOT,
  EDUCATION,
  FUN,
  PRODUCTIVITY,
  OTHER
}

class PromptCategoryItem {
  final PromptCategory? value;
  final String label;

  const PromptCategoryItem({this.value, required this.label});
}

================
File: domain/model/prompt.dart
================
class Prompt {
  final String id;
  final String title;
  final String content;
  final String description;
  final String category;
  final bool isPublic;
  final String userName;
  final bool isFavorite;

  Prompt({
    required this.id,
    required this.title,
    required this.content,
    required this.description,
    required this.category,
    required this.isPublic,
    required this.userName,
    required this.isFavorite
  });
}

================
File: domain/repository/prompt_repository.dart
================
import 'package:dartz/dartz.dart';
import '../../data/request/request.dart';
import '../model/prompt.dart';
import '../../data/network/failure.dart';

abstract class PromptRepository {
  Future<Either<Failure, List<Prompt>>> getPublicPrompts(String category,  {bool? isFavorite, String? query});
  Future<Either<Failure, List<Prompt>>> getPrivatePrompts(String category, {bool? isFavorite, String? query});
  Future<Either<Failure, void>> addToFavorites(String promptId);
  Future<Either<Failure, Prompt>> createPrompt(CreatePromptRequest request);
  Future<Either<Failure, void>> updatePrompt(String promptId, UpdatePromptRequest request);
  Future<Either<Failure, void>> deletePrompt(String promptId);
}

================
File: domain/repository/repository.dart
================
import 'package:dartz/dartz.dart';
import 'package:jarvis/data/network/failure.dart';
import 'package:jarvis/data/request/ai_chat/send_message/send_message_request.dart';
import 'package:jarvis/domain/model/model.dart';
import 'package:jarvis/data/request/ai_chat/authentication/request.dart';

abstract class Repository {
  Future<Either<Failure, Token>> signIn(SignInRequest signInRequest);
  Future<Either<Failure, User>> signUp(SignUpRequest signUpRequest);
  Future<Either<Failure, void>> signOut();
  Future<Either<Failure, Token>> refreshToken(String refreshTokenRequest);
  Future<Either<Failure, Message>> sendMessage(SendMessageRequest sendMessageRequest);
  Future<Either<Failure, TokenUsage>> getTokenUsage();
}

================
File: domain/usecase/base_usecase.dart
================
import 'package:dartz/dartz.dart';
import 'package:jarvis/data/network/failure.dart';

abstract class BaseUseCase<In, Out> {
  Future<Either<Failure, Out>> execute(In input);
}

class NoParams {}

================
File: domain/usecase/create_prompt_usecase.dart
================
import 'package:dartz/dartz.dart';

import '../../data/network/failure.dart';
import '../../data/request/request.dart';
import '../model/prompt.dart';
import '../repository/prompt_repository.dart';
import 'base_usecase.dart';

class CreatePromptUseCase implements BaseUseCase<CreatePromptRequest, Prompt> {
  final PromptRepository _repository;

  CreatePromptUseCase(this._repository);

  @override
  Future<Either<Failure, Prompt>> execute(CreatePromptRequest input) async {
    return await _repository.createPrompt(input);
  }
}

================
File: domain/usecase/delete_prompt_usecase.dart
================
import 'package:dartz/dartz.dart';

import '../../data/network/failure.dart';
import '../repository/prompt_repository.dart';
import 'base_usecase.dart';

class DeletePromptUseCase implements BaseUseCase<String, void> {
  final PromptRepository _repository;

  DeletePromptUseCase(this._repository);

  @override
  Future<Either<Failure, void>> execute(String promptId) async {
    return await _repository.deletePrompt(promptId);
  }
}

================
File: domain/usecase/get_public_prompts_usecase.dart
================
import 'dart:developer';

import 'package:dartz/dartz.dart';

import '../../data/network/failure.dart';
import '../model/prompt.dart';
import 'base_usecase.dart';
import '../../domain/repository/prompt_repository.dart';


class GetPublicPromptsUseCase implements BaseUseCase<GetPublicPromptsUseCaseInput, List<Prompt>> {
  final PromptRepository _repository;

  GetPublicPromptsUseCase(this._repository);

  @override
  Future<Either<Failure, List<Prompt>>> execute(GetPublicPromptsUseCaseInput input) async {

    return await _repository.getPublicPrompts(input.category, isFavorite: input.isFavorite, query: input.query);
  }
}

class GetPrivatePromptsUseCase implements BaseUseCase<GetPublicPromptsUseCaseInput, List<Prompt>> {
  final PromptRepository _repository;

  GetPrivatePromptsUseCase(this._repository);

  @override
  Future<Either<Failure, List<Prompt>>> execute(GetPublicPromptsUseCaseInput input) async {
    return await _repository.getPrivatePrompts(input.category, isFavorite: input.isFavorite, query: input.query);
  }
}

class GetPublicPromptsUseCaseInput {
  final String category;
  final bool? isFavorite;
  final String? query;  // Add query parameter


  GetPublicPromptsUseCaseInput(this.category, {this.isFavorite, this.query});
}

class AddPromptToFavoriteUseCase implements BaseUseCase<String, void> {
  final PromptRepository _repository;

  AddPromptToFavoriteUseCase(this._repository);

  @override
  Future<Either<Failure, void>> execute(String promptId) async {
    return await _repository.addToFavorites(promptId);
  }
}

================
File: domain/usecase/refresh_token_usecase.dart
================
// lib/domain/usecase/refresh_token_usecase.dart

import 'package:dartz/dartz.dart';
import 'package:jarvis/data/network/failure.dart';
import 'package:jarvis/domain/model/model.dart';
import 'package:jarvis/domain/repository/repository.dart';
import 'package:jarvis/domain/usecase/base_usecase.dart';

class RefreshTokenUseCase implements BaseUseCase<RefreshTokenUseCaseInput, Token>{
  final Repository _repository;

  RefreshTokenUseCase(this._repository);

  @override
  Future<Either<Failure, Token>> execute(RefreshTokenUseCaseInput input) async {
    return await _repository.refreshToken(input.refreshToken);
  }
}

class RefreshTokenUseCaseInput {
  final String refreshToken;

  RefreshTokenUseCaseInput({required this.refreshToken});
}

================
File: domain/usecase/send_message_usecase.dart
================
// ignore_for_file: public_member_api_docs, sort_constructors_first
import 'package:dartz/dartz.dart';

import 'package:jarvis/data/network/failure.dart';
import 'package:jarvis/data/request/ai_chat/send_message/assistant.dart';
import 'package:jarvis/data/request/ai_chat/send_message/send_message_metadata.dart';
import 'package:jarvis/data/request/ai_chat/send_message/send_message_request.dart';
import 'package:jarvis/domain/model/model.dart';
import 'package:jarvis/domain/repository/repository.dart';
import 'package:jarvis/domain/usecase/base_usecase.dart';
import 'package:json_annotation/json_annotation.dart';
part 'send_message_usecase.g.dart';

class SendMessageUseCase implements BaseUseCase<SendMessageUseCaseInput, Message> {
  final Repository _repository;

  SendMessageUseCase(this._repository);

  @override
  Future<Either<Failure, Message>> execute(SendMessageUseCaseInput input) async {
    return await _repository.sendMessage(
      SendMessageRequest(
        assistant: input.assistant,
        content: input.content,
        files: input.files,
        metadata: input.metadata
      ),
    );
  }
}


@JsonSerializable()
class SendMessageUseCaseInput {
  final Assistant? assistant;
  final String content;
  final List<String>? files;
  final SendMessageMetadata? metadata;

  SendMessageUseCaseInput({
    this.assistant,
    required this.content,
    this.files,
    this.metadata,
  });

  factory SendMessageUseCaseInput.fromJson(Map<String, dynamic> json) =>
      _$SendMessageUseCaseInputFromJson(json);

  Map<String, dynamic> toJson() => _$SendMessageUseCaseInputToJson(this);
}

================
File: domain/usecase/send_message_usecase.g.dart
================
// GENERATED CODE - DO NOT MODIFY BY HAND

part of 'send_message_usecase.dart';

// **************************************************************************
// JsonSerializableGenerator
// **************************************************************************

SendMessageUseCaseInput _$SendMessageUseCaseInputFromJson(
        Map<String, dynamic> json) =>
    SendMessageUseCaseInput(
      assistant: json['assistant'] == null
          ? null
          : Assistant.fromJson(json['assistant'] as Map<String, dynamic>),
      content: json['content'] as String,
      files:
          (json['files'] as List<dynamic>?)?.map((e) => e as String).toList(),
      metadata: json['metadata'] == null
          ? null
          : SendMessageMetadata.fromJson(
              json['metadata'] as Map<String, dynamic>),
    );

Map<String, dynamic> _$SendMessageUseCaseInputToJson(
        SendMessageUseCaseInput instance) =>
    <String, dynamic>{
      'assistant': instance.assistant,
      'content': instance.content,
      'files': instance.files,
      'metadata': instance.metadata,
    };

================
File: domain/usecase/sign_in_usecase.dart
================
import 'package:dartz/dartz.dart';
import 'package:jarvis/data/network/failure.dart';
import 'package:jarvis/data/request/ai_chat/authentication/request.dart';
import 'package:jarvis/domain/model/model.dart';
import 'package:jarvis/domain/repository/repository.dart';
import 'package:jarvis/domain/usecase/base_usecase.dart';

class SignInUseCase implements BaseUseCase<SignInUseCaseInput, Token> {
  final Repository _repository;

  SignInUseCase(this._repository);

  @override
  Future<Either<Failure, Token>> execute(SignInUseCaseInput input) async {
    return await _repository.signIn(
      SignInRequest(
        email: input.email,
        password: input.password,
      ),
    );
  }
}

class SignInUseCaseInput {
  final String email;
  final String password;

  SignInUseCaseInput(this.email, this.password);
}

================
File: domain/usecase/sign_out_usecase.dart
================
import 'package:dartz/dartz.dart';
import 'package:jarvis/domain/repository/repository.dart';
import 'package:jarvis/data/network/failure.dart';
import 'package:jarvis/domain/usecase/base_usecase.dart';

class SignOutUseCase implements BaseUseCase<SignOutUseCaseInput, void> {
  final Repository _repository;

  SignOutUseCase(this._repository);

  @override
  Future<Either<Failure, void>> execute(SignOutUseCaseInput input) async {
    return await _repository.signOut();
  }
}

class SignOutUseCaseInput {
  SignOutUseCaseInput();
}

================
File: domain/usecase/sign_up_usecase.dart
================
import 'package:dartz/dartz.dart';
import 'package:jarvis/data/network/failure.dart';
import 'package:jarvis/data/request/ai_chat/authentication/request.dart';
import 'package:jarvis/domain/model/model.dart';
import 'package:jarvis/domain/repository/repository.dart';
import 'package:jarvis/domain/usecase/base_usecase.dart';

class SignUpUseCase implements BaseUseCase<SignUpUseCaseInput, User> {
  final Repository _repository;

  SignUpUseCase(this._repository);

  @override
  Future<Either<Failure, User>> execute(SignUpUseCaseInput input) async {
    return await _repository.signUp(
      SignUpRequest(
        email: input.email,
        password: input.password, 
        username: input.username,
      ),
    );
  }
}

class SignUpUseCaseInput {
  final String email;
  final String password;
  final String username;

  SignUpUseCaseInput(this.email, this.password, this.username);
}

================
File: domain/usecase/update _prompt_usecase.dart
================
import 'package:dartz/dartz.dart';

import '../../data/network/failure.dart';
import '../../data/request/request.dart';
import '../model/prompt.dart';
import '../repository/prompt_repository.dart';
import 'base_usecase.dart';

class UpdatePromptUseCase implements BaseUseCase<UpdatePromptUseCaseInput, void> {
  final PromptRepository _repository;

  UpdatePromptUseCase(this._repository);

  @override
  Future<Either<Failure, void>> execute(UpdatePromptUseCaseInput input) async {
    return await _repository.updatePrompt(
        input.promptId,
        UpdatePromptRequest(
            title: input.title,
            content: input.content,
            description: input.description,
            category: input.category,
            isPublic: input.isPublic,
            language: input.language,
        )
    );
  }
}

class UpdatePromptUseCaseInput {
  final String promptId;
  final String? title;
  final String? content;
  final String description;
  final String category;
  final String language;
  final bool isPublic;

  UpdatePromptUseCaseInput(
      this.promptId,
      this.title,
      this.content,
      this.description,
      this.category,
      this.language,
      this.isPublic
      );
}

================
File: domain/usecase/usage_token_usecase.dart
================
import 'package:dartz/dartz.dart';
import 'package:jarvis/domain/model/model.dart';
import 'package:jarvis/domain/repository/repository.dart';
import 'package:jarvis/data/network/failure.dart';
import 'package:jarvis/domain/usecase/base_usecase.dart';

class UsageTokenUseCase implements BaseUseCase<NoParams ,TokenUsage> {
  final Repository _repository;

  UsageTokenUseCase(this._repository);

  @override
  Future<Either<Failure, TokenUsage>> execute(NoParams params) async {
    return await _repository.getTokenUsage();
  }
}

================
File: main.dart
================
import 'package:flutter/material.dart';
import 'package:jarvis/app/app.dart';
import 'package:jarvis/app/di/di.dart';

void main() async {
  WidgetsFlutterBinding.ensureInitialized();
  await setupLocator();
  runApp(MyApp());
}

================
File: presentation/authencation/forgot_password/forgot_password_viewmodel.dart
================
import 'package:flutter/src/widgets/framework.dart';
import 'package:jarvis/presentation/base/baseviewmodel.dart';

class ForgotPasswordViewModel extends BaseViewModel {
  @override
  Future<void> navigateNamed(BuildContext context, String route) {
    // TODO: implement navigateNamed
    throw UnimplementedError();
  }

  @override
  Future<void> navigateReplaceNamed(BuildContext context, String route) {
    // TODO: implement navigateReplaceNamed
    throw UnimplementedError();
  }

}

================
File: presentation/authencation/forgot_password/forgot_password.dart
================
import 'package:flutter/material.dart';
import 'package:jarvis/presentation/authencation/forgot_password/forgot_password_viewmodel.dart';
import 'package:jarvis/presentation/resources/assets_manager.dart';
import 'package:jarvis/presentation/resources/color_manager.dart';
import 'package:jarvis/presentation/resources/font_manager.dart';
import 'package:jarvis/presentation/resources/values_manager.dart';

class ForgotPasswordView extends StatefulWidget {
  const ForgotPasswordView({Key? key}) : super(key: key);

  @override
  State<ForgotPasswordView> createState() => _ForgotPasswordViewState();
}

class _ForgotPasswordViewState extends State<ForgotPasswordView> {
  final TextEditingController _emailController = TextEditingController();
  final ForgotPasswordViewModel _forgotPasswordViewModel = ForgotPasswordViewModel();

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      body: Container(
        decoration: BoxDecoration(
          gradient: LinearGradient(
            colors: [ColorManager.teal, ColorManager.white],
            begin: Alignment.topCenter,
            end: Alignment.bottomCenter,
          ),
        ),
        child: Center(
          child: SingleChildScrollView(
            padding: const EdgeInsets.symmetric(horizontal: AppSize.s32),
            child: Column(
              mainAxisAlignment: MainAxisAlignment.center,
              children: [
                const SizedBox(height: AppSize.s16),
                const CircleAvatar(
                  radius: AppSize.s40,
                  backgroundImage: AssetImage(ImageAssets.splashLogo), // Logo placeholder
                ),
                const SizedBox(height: AppSize.s24),
                const Text(
                  'Forgot Password',
                  style: TextStyle(
                    fontSize: AppSize.s28,
                    fontWeight: FontWeightManager.bold,
                  ),
                ),
                const SizedBox(height: AppSize.s8),
                const Text(
                  'Please fill email to get password',
                  style: TextStyle(fontSize: AppSize.s16, color: Colors.grey),
                ),
                const SizedBox(height: AppSize.s16),
                _buildTextField(
                  controller: _emailController,
                  hintText: 'Email',
                  icon: Icons.email,
                ),
                const SizedBox(height: AppSize.s16),
                ElevatedButton(
                  onPressed: () {
                    // TODO: Implement registration functionality
                  },
                  style: ElevatedButton.styleFrom(
                    padding: const EdgeInsets.symmetric(vertical: AppSize.s16),
                    shape: RoundedRectangleBorder(
                      borderRadius: BorderRadius.circular(AppSize.s28),
                    ),
                    backgroundColor: ColorManager.teal,
                    shadowColor: Colors.transparent,
                  ),
                  child: Container(
                    alignment: Alignment.center,
                    height: AppSize.s40,
                    child: Text(
                      'Send Email',
                      style: TextStyle(fontSize: FontSize.s16, color: ColorManager.white),
                    ),
                  ),
                ),
                const SizedBox(height: AppSize.s16),
                const Text('Or Login With'),
                const SizedBox(height: AppSize.s8),
                Row(
                  mainAxisAlignment: MainAxisAlignment.center,
                  children: [
                    _buildSocialButton(ImageAssets.gg_ic),
                  ],
                ),
                const SizedBox(height: AppSize.s16),
                TextButton(
                  onPressed: () {
                    // TODO: Navigate to Login screen
                    Navigator.pop(context);
                  },
                  child: const Text('Already have an account? Login'),
                ),
              ],
            ),
          ),
        ),
      ),
    );
  }

  Widget _buildTextField({
    required TextEditingController controller,
    required String hintText,
    required IconData icon,
    bool obscureText = false,
  }) {
    return TextField(
      controller: controller,
      obscureText: obscureText,
      decoration: InputDecoration(
        prefixIcon: Icon(icon),
        hintText: hintText,
        border: OutlineInputBorder(
          borderRadius: BorderRadius.circular(30),
        ),
        filled: true,
        fillColor: Colors.white,
      ),
    );
  }

  Widget _buildSocialButton(String assetPath) {
    return GestureDetector(
      onTap: () {
        // TODO: Implement social login functionality
      },
      child: CircleAvatar(
        radius: 24,
        backgroundImage: AssetImage(assetPath),
      ),
    );
  }
}

================
File: presentation/authencation/sign_in/sign_in_viewmodel.dart
================
import 'dart:async';

import 'package:flutter/cupertino.dart';
import 'package:jarvis/app/app_prefs.dart';
import 'package:jarvis/app/extensions.dart';
import 'package:jarvis/domain/usecase/sign_in_usecase.dart';
import 'package:jarvis/presentation/base/baseviewmodel.dart';
import 'package:jarvis/presentation/common/freezed_data_classes.dart';

class SignInViewModel extends BaseViewModel
    implements SignInViewModelInputs, SignInViewModelOutputs {
  final StreamController<String> _emailStreamController =
      StreamController<String>.broadcast();

  final StreamController<String> _passwordStreamController =
      StreamController<String>.broadcast();

  final StreamController<String> _errorStreamController =
      StreamController<String>.broadcast();

  final StreamController<bool> _signInStreamController =
      StreamController<bool>.broadcast();

  var signInObject = const SignInObject(email: '', password: '');

  final SignInUseCase _signInUseCase;

  final AppPreferences _appPreferences;

  SignInViewModel(this._signInUseCase, this._appPreferences);

  @override
  void start() {}

  @override
  void dispose() {
    _emailStreamController.close();
    _passwordStreamController.close();
    _errorStreamController.close();
    _signInStreamController.close();
  }

  // Outputs
  @override
  Stream<bool> get isEmailValid =>
      _emailStreamController.stream.map(_isEmailValid);

  @override
  Stream<bool> get isPasswordValid =>
      _passwordStreamController.stream.map(_isPasswordValid);

  Stream<String> get errorStream => _errorStreamController.stream;

  @override
  Stream<bool> get signInStream => _signInStreamController.stream;

  // Inputs
  @override
  Sink get inputEmail => _emailStreamController.sink;

  @override
  Sink get inputPassword => _passwordStreamController.sink;

  @override
  Future<void> signIn() async {
    (await _signInUseCase.execute(
      SignInUseCaseInput(signInObject.email, signInObject.password),
    ))
        .fold(
      (failure) {
        print('SignIn failed: ${failure.message}');
        _errorStreamController.add(failure.message); 
        _signInStreamController.add(false);
      },
      (token) {
        print('SignIn successful. Access Token: ${token.accessToken}');
        _appPreferences.setAccessToken(token.accessToken); 
        _appPreferences.setRefreshToken(token.refreshToken.orEmpty()); 
        _signInStreamController.add(true); 
      },
    );
  }

  @override
  void setEmail(String email) {
    inputEmail.add(email);
    signInObject = signInObject.copyWith(email: email);
  }

  @override
  void setPassword(String password) {
    inputPassword.add(password);
    signInObject = signInObject.copyWith(password: password);
  }

  bool _isEmailValid(String email) {
    return email.isNotEmpty && email.contains('@');
  }

  bool _isPasswordValid(String password) {
    return password.length >= 6;
  }

  @override
  Future<void> navigateReplaceNamed(BuildContext context, String route) async {
    Navigator.pushReplacementNamed(context, route);
  }

  @override
  Future<void> navigateNamed(BuildContext context, String route) async {
    Navigator.pushNamed(context, route);
  }
}

abstract class SignInViewModelInputs {
  void setEmail(String email);

  void setPassword(String password);

  Future<void> signIn();

  // Sink cho Streams
  Sink get inputEmail;

  Sink get inputPassword;
}

abstract class SignInViewModelOutputs {
  Stream<bool> get isEmailValid;

  Stream<bool> get isPasswordValid;

  Stream<bool> get signInStream;
}

================
File: presentation/authencation/sign_in/sign_in.dart
================
import 'package:flutter/material.dart';
import 'package:get_it/get_it.dart';
import 'package:jarvis/app/app_prefs.dart';
import 'package:jarvis/domain/repository/repository.dart';
import 'package:jarvis/domain/usecase/sign_in_usecase.dart';
import 'package:jarvis/presentation/authencation/sign_in/sign_in_viewmodel.dart';
import 'package:jarvis/presentation/common/dialog_util.dart';
import 'package:jarvis/presentation/resources/assets_manager.dart';
import 'package:jarvis/presentation/resources/color_manager.dart';
import 'package:jarvis/presentation/resources/font_manager.dart';
import 'package:jarvis/presentation/resources/route_manager.dart';
import 'package:jarvis/presentation/resources/values_manager.dart';

class SignInView extends StatefulWidget {
  const SignInView({super.key});

  @override
  State<SignInView> createState() => _SignInViewState();
}

class _SignInViewState extends State<SignInView> {
  final getIt = GetIt.instance;
  late SignInViewModel _signInViewModel;

  final TextEditingController _emailController = TextEditingController();
  final TextEditingController _passwordController = TextEditingController();

  bool isSignIn = false;

  _bind() {
    _signInViewModel.start();
    _emailController.addListener(() => _signInViewModel.setEmail(_emailController.text));
    _passwordController.addListener(() => _signInViewModel.setPassword(_passwordController.text));

    _signInViewModel.signInStream.listen((isSuccess) {
      if (isSuccess) {
        // showCustomDialog(
        //   context: context,
        //   type: DialogType.success,
        //   title: 'Sign in successfully',
        //   message: 'Welcome to the Jarvis app!',
        // ).then((_) {
          _signInViewModel.navigateReplaceNamed(context, Routes.mainRoute);
        // });
      }
    });

    _signInViewModel.errorStream.listen((errorMessage) {
      showCustomDialog(
          context: context,
          type: DialogType.error,
          title: 'Sign in failed!',
          message: errorMessage,
        );
    });
  }

  @override
  void initState() {
    super.initState();
    // Khởi tạo signInViewModel với signInUseCase
    _signInViewModel = SignInViewModel(SignInUseCase(getIt<Repository>()), getIt<AppPreferences>());
    _bind();
  }

  @override
  void dispose() {
    _signInViewModel.dispose();
    _emailController.dispose();
    _passwordController.dispose();
    super.dispose();
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      body: Container(
        decoration: const BoxDecoration(
          gradient: LinearGradient(
            colors: [
              Colors.teal,
              Colors.white,
            ],
            begin: Alignment.topCenter,
            end: Alignment.bottomCenter,
          ),
        ),
        child: Center(
          child: SingleChildScrollView(
            padding: const EdgeInsets.symmetric(horizontal: AppSize.s32),
            child: Column(
              mainAxisAlignment: MainAxisAlignment.center,
              children: [
                const SizedBox(height: AppSize.s16),
                const CircleAvatar(
                  radius: AppSize.s40,
                  backgroundImage: AssetImage(ImageAssets.splashLogo),
                ),
                const SizedBox(height: AppSize.s24),
                const Text(
                  'Sign In',
                  style: TextStyle(
                    fontSize: AppSize.s28,
                    fontWeight: FontWeightManager.bold,
                  ),
                ),
                const SizedBox(height: AppSize.s8),
                Text(
                  'Please Sign In to continue',
                  style: TextStyle(fontSize: AppSize.s16, color: ColorManager.grey),
                ),
                const SizedBox(height: AppSize.s24),
                _buildTextField(
                  controller: _emailController,
                  hintText: 'Email',
                  icon: Icons.email,
                ),
                const SizedBox(height: AppSize.s16),
                _buildTextField(
                  controller: _passwordController,
                  hintText: 'Password',
                  icon: Icons.lock,
                  obscureText: true,
                ),
                const SizedBox(height: AppSize.s8),
                Align(
                  alignment: Alignment.centerRight,
                  child: TextButton(
                    onPressed: () {
                      _signInViewModel.navigateNamed(context, Routes.forgotPasswordRoute);
                    },
                    child: const Text('Forgot password?'),
                  ),
                ),
                const SizedBox(height: AppSize.s16),
                ElevatedButton(
                  onPressed: () async {
                    setState(() {
                      isSignIn = true;
                    });
                    await _signInViewModel.signIn();
                    setState(() {
                      isSignIn = false;
                    });
                  },
                  style: ElevatedButton.styleFrom(
                    padding: const EdgeInsets.symmetric(vertical: AppSize.s16),
                    shape: RoundedRectangleBorder(
                      borderRadius: BorderRadius.circular(AppSize.s28),
                    ),
                    backgroundColor: ColorManager.teal,
                    shadowColor: Colors.transparent,
                  ),
                  child: Container(
                    alignment: Alignment.center,
                    height: AppSize.s20,
                    child: Text(
                      'Sign In',
                      style: TextStyle(fontSize: FontSize.s16, color: ColorManager.white),
                    ),
                  ),
                ),
                const SizedBox(height: AppSize.s16),
                isSignIn ? CircularProgressIndicator() : SizedBox.shrink(),
                const SizedBox(height: AppSize.s16),
                const Text('Or Sign In With'),
                const SizedBox(height: 8),
                Row(
                  mainAxisAlignment: MainAxisAlignment.center,
                  children: [
                    _buildSocialButton(ImageAssets.gg_ic),
                    const SizedBox(width: AppSize.s16),
                  ],
                ),
                const SizedBox(height: AppSize.s16),
                TextButton(
                  onPressed: () {
                    _signInViewModel.navigateNamed(context, Routes.signUpRoute);
                  },
                  child: const Text('Don\'t have an account? Register'),
                ),
              ],
            ),
          ),
        ),
      ),
    );
  }

  Widget _buildTextField({
    required TextEditingController controller,
    required String hintText,
    required IconData icon,
    bool obscureText = false,
  }) {
    return StreamBuilder<bool>(
      stream: hintText == 'Email' ? _signInViewModel.isEmailValid : _signInViewModel.isPasswordValid,
      builder: (context, snapshot) {
        return TextField(
          controller: controller,
          obscureText: obscureText,
          decoration: InputDecoration(
            prefixIcon: Icon(icon),
            hintText: hintText,
            errorText: (snapshot.data == false) ? 'Invalid $hintText' : null,
            border: OutlineInputBorder(
              borderRadius: BorderRadius.circular(30),
            ),
            filled: true,
            fillColor: Colors.white,
          ),
        );
      },
    );
  }

  Widget _buildSocialButton(String assetPath) {
    return GestureDetector(
      onTap: () {
        // TODO: Implement social login functionality
      },
      child: CircleAvatar(
        radius: 24,
        backgroundImage: AssetImage(assetPath),
      ),
    );
  }
}

================
File: presentation/authencation/sign_out/sign_out_viewmodel.dart
================
// lib/presentation/authentication/sign_out/sign_out_viewmodel.dart

import 'dart:async';

import 'package:flutter/cupertino.dart';
import 'package:jarvis/app/app_prefs.dart';
import 'package:jarvis/domain/usecase/sign_out_usecase.dart';
import 'package:jarvis/presentation/base/baseviewmodel.dart';

class SignOutViewModel extends BaseViewModel
    implements SignOutViewModelInputs, SignOutViewModelOutputs {
  final StreamController<String> _errorStreamController =
      StreamController<String>.broadcast();

  final StreamController<bool> _signOutStreamController =
      StreamController<bool>.broadcast();

  final SignOutUseCase _signOutUseCase;
  final AppPreferences _appPreferences;

  SignOutViewModel(this._signOutUseCase, this._appPreferences);

  @override
  void start() {}

  @override
  void dispose() {
    _errorStreamController.close();
    _signOutStreamController.close();
  }

  // Outputs
  @override
  Stream<String> get errorStream => _errorStreamController.stream;

  @override
  Stream<bool> get signOutStream => _signOutStreamController.stream;

  @override
  Future<void> signOut() async {
    (await _signOutUseCase.execute(SignOutUseCaseInput())).fold(
      (failure) {
       print('SignOut failed: ${failure.message}');
        _errorStreamController.add(failure.message); // Notify listeners about the error
        _signOutStreamController.add(false); // Indicate sign-out failure
      },
      (_) async {
        print('SignOut successful.');
        await _appPreferences.clearTokens(); // Clear tokens from secure storage
        _signOutStreamController.add(true); // Indicate sign-out success
      },
    );
  }

  @override
  Future<void> navigateReplaceNamed(BuildContext context, String route) async {
    Navigator.pushReplacementNamed(context, route);
  }

  @override
  Future<void> navigateNamed(BuildContext context, String route) async {
    Navigator.pushNamed(context, route);
  }
}

abstract class SignOutViewModelInputs {
  Future<void> signOut();
}

abstract class SignOutViewModelOutputs {
  Stream<String> get errorStream;

  Stream<bool> get signOutStream;
}

================
File: presentation/authencation/sign_out/sign_out.dart
================
// lib/presentation/signout/sign_out_view.dart

import 'package:flutter/material.dart';
import 'package:get_it/get_it.dart';
import 'package:jarvis/presentation/authencation/sign_out/sign_out_viewmodel.dart';
import 'package:jarvis/presentation/common/dialog_util.dart';
import 'package:jarvis/presentation/resources/route_manager.dart';
import 'dart:async';

class SignOutView extends StatefulWidget {
  const SignOutView({Key? key}) : super(key: key);

  @override
  _SignOutViewState createState() => _SignOutViewState();
}

class _SignOutViewState extends State<SignOutView> {
  late SignOutViewModel _viewModel;
  late StreamSubscription<bool> _signOutSubscription;
  late StreamSubscription<String> _errorSubscription;

  @override
  void initState() {
    super.initState();
    _viewModel = GetIt.instance<SignOutViewModel>();

    // Listen to signOutStream
    _signOutSubscription = _viewModel.signOutStream.listen((isSuccess) {
      if (isSuccess) {
        // Show success dialog
        // showCustomDialog(
        //   context: context,
        //   type: DialogType.success,
        //   title: 'Đăng xuất thành công',
        //   message: 'Bạn đã đăng xuất khỏi ứng dụng.',
        // ).then((_) {
          // Navigate to login screen after dialog is dismissed
          _viewModel.navigateReplaceNamed(context, Routes.signInRoute);
        // });
      }
    });

    // Listen to errorStream
    _errorSubscription = _viewModel.errorStream.listen((errorMessage) {
      // Show error dialog
      showCustomDialog(
        context: context,
        type: DialogType.error,
        title: 'Sign out failed!',
        message: errorMessage,
      );
    });

    // Initiate sign-out
    _viewModel.signOut();
  }

  @override
  void dispose() {
    _viewModel.dispose();
    _signOutSubscription.cancel();
    _errorSubscription.cancel();
    super.dispose();
  }

  @override
  Widget build(BuildContext context) {
    // Display a loading indicator while signing out
    return Scaffold(
      appBar: AppBar(
        title: const Text('Sign out'),
        automaticallyImplyLeading: false,
      ),
      body: const Center(
        child: CircularProgressIndicator(),
      ),
    );
  }
}

================
File: presentation/authencation/sign_up/sign_up_viewmodel.dart
================
import 'dart:async';

import 'package:flutter/cupertino.dart';
import 'package:jarvis/app/app_prefs.dart';
import 'package:jarvis/domain/usecase/sign_up_usecase.dart';
import 'package:jarvis/presentation/base/baseviewmodel.dart';
import 'package:jarvis/presentation/common/freezed_data_classes.dart';

class SignUpViewModel extends BaseViewModel
    implements SignUpViewModelInputs, SignUpViewModelOutputs {
  final StreamController<String> _emailStreamController =
      StreamController<String>.broadcast();

  final StreamController<String> _passwordStreamController =
      StreamController<String>.broadcast();
  
  final StreamController<String> _usernameStreamController =
      StreamController<String>.broadcast();

  final StreamController<String> _errorStreamController =
      StreamController<String>.broadcast();

  final StreamController<bool> _signUpStreamController =
      StreamController<bool>.broadcast();

  var signUpObject = const SignUpObject(email: '', password: '', username: '');

  final SignUpUseCase _signUpUseCase;

  final AppPreferences _appPreferences;

  SignUpViewModel(this._signUpUseCase, this._appPreferences);

  @override
  void start() {}

  @override
  void dispose() {
    _emailStreamController.close();
    _passwordStreamController.close();
    _usernameStreamController.close();
    _errorStreamController.close();
    _signUpStreamController.close();
  }

  // Outputs
  @override
  Stream<bool> get isEmailValid =>
      _emailStreamController.stream.map(_isEmailValid);

  @override
  Stream<bool> get isPasswordValid =>
      _passwordStreamController.stream.map(_isPasswordValid);

  @override
  Stream<bool> get isUsernameValid =>
      _usernameStreamController.stream.map(_isUsernameValid);


  Stream<String> get errorStream => _errorStreamController.stream;

  @override
  Stream<bool> get signUpStream => _signUpStreamController.stream;

  // Inputs
  @override
  Sink get inputEmail => _emailStreamController.sink;

  @override
  Sink get inputPassword => _passwordStreamController.sink;

  @override
  Sink get inputUsername => _usernameStreamController.sink;

  @override
  Future<void> signUp() async {
    (await _signUpUseCase.execute(
      SignUpUseCaseInput(signUpObject.email, signUpObject.password, signUpObject.username),
    ))
        .fold(
      (failure) {
        print('Login failed: ${failure.message}');
        _errorStreamController.add(failure.message);
        _signUpStreamController.add(false);
      },
      (user) {
        print('Login successful. User: $user');
        _signUpStreamController.add(true); 
      },
    );
  }

  @override
  void setEmail(String email) {
    inputEmail.add(email);
    signUpObject = signUpObject.copyWith(email: email);
  }

  @override
  void setPassword(String password) {
    inputPassword.add(password);
    signUpObject = signUpObject.copyWith(password: password);
  }

  @override
  void setUsername(String username) {
    inputUsername.add(username);
    signUpObject = signUpObject.copyWith(username: username);
  }

  bool _isEmailValid(String email) {
    return email.isNotEmpty && email.contains('@');
  }

  bool _isPasswordValid(String password) {
    return password.length >= 6;
  }

  bool _isUsernameValid(String username) {
    return username.isNotEmpty;
  }

  @override
  Future<void> navigateReplaceNamed(BuildContext context, String route) async {
    Navigator.pushReplacementNamed(context, route);
  }

  @override
  Future<void> navigateNamed(BuildContext context, String route) async {
    Navigator.pushNamed(context, route);
  }
}

abstract class SignUpViewModelInputs {
  void setEmail(String email);

  void setPassword(String password);

  void setUsername(String username);

  Future<void> signUp();

  // Sink cho Streams
  Sink get inputEmail;

  Sink get inputPassword;

  Sink get inputUsername;
}

abstract class SignUpViewModelOutputs {
  Stream<bool> get isEmailValid;

  Stream<bool> get isPasswordValid;

  Stream<bool> get isUsernameValid;

  Stream<bool> get signUpStream;
}

================
File: presentation/authencation/sign_up/sign_up.dart
================
import 'package:flutter/material.dart';
import 'package:get_it/get_it.dart';
import 'package:jarvis/app/app_prefs.dart';
import 'package:jarvis/domain/repository/repository.dart';
import 'package:jarvis/domain/usecase/sign_up_usecase.dart';
import 'package:jarvis/presentation/authencation/sign_up/sign_up_viewmodel.dart';
import 'package:jarvis/presentation/common/dialog_util.dart';
import 'package:jarvis/presentation/resources/assets_manager.dart';
import 'package:jarvis/presentation/resources/color_manager.dart';
import 'package:jarvis/presentation/resources/font_manager.dart';
import 'package:jarvis/presentation/resources/route_manager.dart';
import 'package:jarvis/presentation/resources/values_manager.dart';

class SignUpView extends StatefulWidget {
  const SignUpView({super.key});

  @override
  State<SignUpView> createState() => _SignUpViewState();
}

class _SignUpViewState extends State<SignUpView> {
  final getIt = GetIt.instance;
  late SignUpViewModel _signUpViewModel;

  final TextEditingController _userNameController = TextEditingController();
  final TextEditingController _emailController = TextEditingController();
  final TextEditingController _passwordController = TextEditingController();

  _bind() {
    _signUpViewModel.start();

    _emailController.addListener(() => _signUpViewModel.setEmail(_emailController.text));
    _passwordController.addListener(() => _signUpViewModel.setPassword(_passwordController.text));
    _userNameController.addListener(() => _signUpViewModel.setUsername(_userNameController.text));

    _signUpViewModel.signUpStream.listen((isSuccess) {
      if (isSuccess) {
        showCustomDialog(
          context: context,
          type: DialogType.success,
          title: 'Sign up successfully',
          message: 'You are being redirected to the Sign in page!',
        ).then((_) {
          _signUpViewModel.navigateReplaceNamed(context, Routes.mainRoute);
        });
      }
    });

    _signUpViewModel.errorStream.listen((errorMessage) {
      showCustomDialog(
          context: context,
          type: DialogType.error,
          title: 'Sign in failed',
          message: errorMessage,
        );
    });
  }

  @override
  void initState() {
    super.initState();
    _signUpViewModel = SignUpViewModel(SignUpUseCase(getIt<Repository>()), getIt<AppPreferences>());
    _bind();
  }

   @override
  void dispose() {
    _signUpViewModel.dispose();
    _emailController.dispose();
    _passwordController.dispose();
    _userNameController.dispose();
    super.dispose();
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      body: Container(
        decoration: BoxDecoration(
          gradient: LinearGradient(
            colors: [ColorManager.teal, ColorManager.white],
            begin: Alignment.topCenter,
            end: Alignment.bottomCenter,
          ),
        ),
        child: Center(
          child: SingleChildScrollView(
            padding: const EdgeInsets.symmetric(horizontal: AppSize.s32),
            child: Column(
              mainAxisAlignment: MainAxisAlignment.center,
              children: [
                const SizedBox(height: AppSize.s16),
                const CircleAvatar(
                  radius: AppSize.s40,
                  backgroundImage: AssetImage(ImageAssets.splashLogo), // Logo placeholder
                ),
                const SizedBox(height: AppSize.s24),
                const Text(
                  'Register',
                  style: TextStyle(
                    fontSize: AppSize.s28,
                    fontWeight: FontWeightManager.bold,
                  ),
                ),
                const SizedBox(height: AppSize.s8),
                const Text(
                  'Please Register to continue',
                  style: TextStyle(fontSize: AppSize.s16, color: Colors.grey),
                ),
                const SizedBox(height: AppSize.s24),
                _buildTextField(
                  controller: _userNameController,
                  hintText: 'Username',
                  icon: Icons.person,
                  name: 'username'
                ),
                const SizedBox(height: AppSize.s16),
                _buildTextField(
                  controller: _emailController,
                  hintText: 'Email',
                  icon: Icons.email,
                  name: 'email',

                ),
                const SizedBox(height: AppSize.s16),
                _buildTextField(
                  controller: _passwordController,
                  hintText: 'Password',
                  icon: Icons.lock,
                  obscureText: true,
                  name: 'password'
                ),
                const SizedBox(height: AppSize.s16),
                ElevatedButton(
                  onPressed: () {
                    // TODO: Implement registration functionality
                    _signUpViewModel.signUp();
                  },
                  style: ElevatedButton.styleFrom(
                    padding: const EdgeInsets.symmetric(vertical: AppSize.s16),
                    shape: RoundedRectangleBorder(
                      borderRadius: BorderRadius.circular(AppSize.s28),
                    ),
                    backgroundColor: ColorManager.teal,
                    shadowColor: Colors.transparent,
                  ),
                  child: Container(
                    alignment: Alignment.center,
                    height: AppSize.s14,
                    child: Text(
                      'Register',
                      style: TextStyle(fontSize: FontSize.s16, color: ColorManager.white),
                    ),
                  ),
                ),
                const SizedBox(height: 8),
                const Text(
                  'By continuing, you agree to our ',
                  style: TextStyle(fontSize: AppSize.s14, color: Colors.grey),
                ),
                TextButton(
                  onPressed: () {
                    // TODO: Implement privacy policy functionality
                  },
                  child: const Text(
                    'Privacy policy',
                    style: TextStyle(decoration: TextDecoration.underline),
                  ),
                ),
                const SizedBox(height: AppSize.s16),
                const Text('Or Login With'),
                const SizedBox(height: AppSize.s8),
                Row(
                  mainAxisAlignment: MainAxisAlignment.center,
                  children: [
                    _buildSocialButton(ImageAssets.gg_ic),
                  ],
                ),
                const SizedBox(height: AppSize.s16),
                TextButton(
                  onPressed: () {
                    // TODO: Navigate to Login screen
                    Navigator.pop(context);
                  },
                  child: const Text('Already have an account? Login'),
                ),
              ],
            ),
          ),
        ),
      ),
    );
  }

    Widget _buildTextField({
    required TextEditingController controller,
    required String hintText,
    required IconData icon,
    required String name,
    bool obscureText = false,
  }) {
    return StreamBuilder<bool>(
      stream: getItemValidate(name),
      builder: (context, snapshot) {
        return TextField(
          controller: controller,
          obscureText: obscureText,
          decoration: InputDecoration(
            prefixIcon: Icon(icon),
            hintText: hintText,
            errorText: (snapshot.data == false) ? 'Invalid $hintText' : null,
            border: OutlineInputBorder(
              borderRadius: BorderRadius.circular(30),
            ),
            filled: true,
            fillColor: Colors.white,
          ),
        );
      },
    );
  }

  Widget _buildSocialButton(String assetPath) {
    return GestureDetector(
      onTap: () {
        // TODO: Implement social login functionality
      },
      child: CircleAvatar(
        radius: 24,
        backgroundImage: AssetImage(assetPath),
      ),
    );
  }
  
  Stream<bool> getItemValidate(String name) {
    switch (name) {
      case 'username':
        return _signUpViewModel.isUsernameValid;
      case 'email':
        return _signUpViewModel.isEmailValid;
      case 'password':
        return _signUpViewModel.isPasswordValid;
      default:
        return Stream.value(true);
    }
  }
}

================
File: presentation/base/baseviewmodel.dart
================
import 'package:flutter/material.dart';

abstract class BaseViewModel
    implements BaseViewModelInputs, BaseViewModelOutputs {
  // shared variables and functions that will be used through any view model.
  @override
  void start() {
    // TODO: implement start
  }

  @override
  void dispose() {
    // TODO: implement dispose
  }
}

abstract class BaseViewModelInputs {
  void start(); // will be called while init of the view model

  void dispose(); // will be called when view model dies

  Future<void> navigateReplaceNamed(BuildContext context, String route);

  Future<void> navigateNamed(BuildContext context, String route);
}

abstract class BaseViewModelOutputs {}

================
File: presentation/chat/chat_view.dart
================
// lib/presentation/chat_view.dart

import 'dart:async';

import 'package:flutter/material.dart';
import 'package:get_it/get_it.dart';
import 'package:jarvis/app/constant.dart';
import 'package:jarvis/data/request/ai_chat/send_message/assistant.dart';
import 'package:jarvis/domain/model/model.dart';
import 'package:jarvis/presentation/chat/chat_viewmodel.dart';
import 'package:jarvis/presentation/common/app_drawer.dart';
import 'package:jarvis/presentation/common/chat_input_box.dart';
import 'package:jarvis/presentation/common/custome_header_bar.dart';
import 'package:jarvis/presentation/resources/color_manager.dart';
import 'package:jarvis/presentation/resources/font_manager.dart';
import 'package:jarvis/presentation/resources/route_manager.dart';
import 'package:jarvis/presentation/resources/values_manager.dart';


class ChatView extends StatefulWidget {
  const ChatView({super.key});

  @override
  State<ChatView> createState() => _ChatViewState();
}

class _ChatViewState extends State<ChatView> {
  final TextEditingController _chatController = TextEditingController();
  late final ChatViewModel _viewModel;
  late final StreamSubscription<String?> _errorSubscription;
  final getIt = GetIt.instance;

  final GlobalKey<ScaffoldState> _scaffoldKey = GlobalKey<ScaffoldState>();

  final List<String> assistantModels = [
    ConstantAssistantID.GPT_4_O,
    ConstantAssistantID.GPT_4_O_MINI,
    ConstantAssistantID.CLAUDE_3_HAIKU_20240307,
    ConstantAssistantID.CLAUDE_3_SONNET_20240229,
    ConstantAssistantID.GEMINI_15_FLASH_LATEST,
    ConstantAssistantID.GEMINI_15_PRO_LATEST,
  ];

  late String selectedModel;
  @override
  void initState() {
    super.initState();
    selectedModel = assistantModels[0];
    _viewModel = getIt<ChatViewModel>();
    _viewModel.start();

    _errorSubscription = _viewModel.errorStream.listen((errorMessage) {
      if (errorMessage != null && errorMessage.isNotEmpty) {
        ScaffoldMessenger.of(context).showSnackBar(
          SnackBar(content: Text(errorMessage)),
        );
      }
    });
  }

  @override
  void dispose() {
    _viewModel.dispose();
    _chatController.dispose();
    _errorSubscription.cancel();
    super.dispose();
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      key: _scaffoldKey,
      drawer: const AppDrawer(),
      appBar: CustomHeaderBar(
              centerWidget: DropdownButton<String>(
              value: selectedModel,
              dropdownColor: ColorManager.teal,
              style: TextStyle(color: ColorManager.white),
              underline: const SizedBox(),
              onChanged: (String? newValue) {
                if (newValue != null) {
                  setState(() {
                    selectedModel = newValue;
                  });
                }
              },
              items: assistantModels.map<DropdownMenuItem<String>>((String value) {
                return DropdownMenuItem<String>(
                  value: value,
                  child: Text(value),
                );
              }).toList(),
            ),
            leading: IconButton(
              icon: const Icon(Icons.menu, color: Colors.white),
              onPressed: () {
                _scaffoldKey.currentState?.openDrawer();
              },
            ),
              actions: [
                TextButton(
                    onPressed: () {
                      Navigator.of(context).pushNamed(Routes.upgradeProRoute);
                    },
                    child: Text(
                      "Upgrade",
                      style: TextStyle(color: Colors.blue.shade100, fontSize: AppSize.s16),
                    )),
                StreamBuilder<int>(
                  stream: _viewModel.remainingUsageStream,
                  builder: (context, snapshot) {
                    int remainingUsage = snapshot.data ?? 50;
                    return Container(
                      margin: const EdgeInsets.only(right: AppSize.s8),
                      padding: const EdgeInsets.symmetric(horizontal: AppSize.s12, vertical: AppSize.s6),
                      decoration: BoxDecoration(
                        color: Colors.teal[400],
                        borderRadius: BorderRadius.circular(20.0),
                      ),
                      child: Row(
                        children: [
                          Text('$remainingUsage', style: TextStyle(color: ColorManager.white, fontSize: AppSize.s16)),
                          const SizedBox(width: AppSize.s4),
                          Icon(Icons.star, color: ColorManager.white, size: AppSize.s16),
                        ],
                      ),
                    );
                  },
                ),
              ],
            ),
      body: SafeArea(
        child: Column(
          children: [
            Expanded(
              child: StreamBuilder<List<Message>>(
                stream: _viewModel.messagesStream,
                builder: (context, snapshot) {
                  if (snapshot.hasData && snapshot.data!.isNotEmpty) {
                    return _buildChatMessages(snapshot.data!);
                  } else {
                    return _buildInitialContent();
                  }
                },
              ),
            ),
            ChatInputBox(
              controller: _chatController,
              onSend: _sendMessage,
            ),
          ],
        ),
      ),
    );
  }

  Widget _buildInitialContent() {
    return SingleChildScrollView(
      padding: const EdgeInsets.all(AppSize.s16),
      child: Column(
        crossAxisAlignment: CrossAxisAlignment.start,
        children: [
          const Text(
            'Hi, good afternoon!',
            style: TextStyle(
                fontSize: AppSize.s24,
                fontWeight: FontWeightManager.bold),
          ),
          const SizedBox(height: AppSize.s8),
          Text(
            'I\'m a chatbot.',
            style: TextStyle(
                fontSize: AppSize.s16, color: ColorManager.grey),
          ),
          const SizedBox(height: AppSize.s20),
          Row(
            mainAxisAlignment: MainAxisAlignment.spaceEvenly,
            children: [
              _buildUploadButton(
                icon: Icons.image,
                label: 'Upload your image',
                color: Colors.teal.shade100,
              ),
              _buildUploadButton(
                icon: Icons.folder,
                label: 'Upload your file',
                color: Colors.blue.shade100,
              ),
            ],
          ),
          const SizedBox(height: AppSize.s20),
          const Text('You can ask me like this',
              style: TextStyle(fontSize: AppSize.s18)),
          const SizedBox(height: AppSize.s10),
          ListView(
            physics: const NeverScrollableScrollPhysics(),
            shrinkWrap: true,
            children: [
              _buildSuggestion('Write an email', 'to submission project'),
              _buildSuggestion('Suggest events', 'for this summer'),
              _buildSuggestion('List some books',
                  'related to adventure'),
              _buildSuggestion('Explain an issue',
                  'why the earth is round'),
            ],
          ),
        ],
      ),
    );
  }

  Widget _buildChatMessages(List<Message> messages) {
    return ListView.builder(
      padding: const EdgeInsets.all(AppSize.s16),
      itemCount: messages.length,
      itemBuilder: (context, index) {
        final message = messages[index];
        return Align(
          alignment:
              message.isUser ? Alignment.centerRight : Alignment.centerLeft,
          child: Container(
            padding: const EdgeInsets.all(AppSize.s12),
            margin: const EdgeInsets.symmetric(vertical: AppSize.s4),
            decoration: BoxDecoration(
              color: message.isUser
                  ? ColorManager.primary
                  : Colors.grey.shade300,
              borderRadius: BorderRadius.circular(AppSize.s8),
            ),
            child: Column(
              crossAxisAlignment: message.isUser
                  ? CrossAxisAlignment.end
                  : CrossAxisAlignment.start,
              children: [
                Text(
                  message.message,
                  style: TextStyle(
                    color: message.isUser ? Colors.white : Colors.black,
                    fontSize: AppSize.s16,
                  ),
                ),
                const SizedBox(height: AppSize.s4),
                Row(
                  mainAxisSize: MainAxisSize.min,
                  children: [
                    // Avatar hoặc biểu tượng
                    if (!message.isUser)
                      const CircleAvatar(
                        radius: 10,
                        backgroundColor: Colors.blue,
                        child: Icon(
                          Icons.person,
                          size: 12,
                          color: Colors.white,
                        ),
                      ),
                    if (!message.isUser) const SizedBox(width: 4),
                    Text(
                      '${message.timestamp.hour}:${message.timestamp.minute.toString().padLeft(2, '0')}',
                      style: TextStyle(
                        color: message.isUser
                            ? Colors.white70
                            : Colors.black54,
                        fontSize: AppSize.s12,
                      ),
                    ),
                    // const SizedBox(width: 4),
                    // Text(
                    //   'Usage: ${message.remainingUsage}',
                    //   style: TextStyle(
                    //     color: message.isUser
                    //         ? Colors.white70
                    //         : Colors.black54,
                    //     fontSize: AppSize.s12,
                    //   ),
                    // ),
                  ],
                ),
              ],
            ),
          ),
        );
      },
    );
  }

  void _sendMessage() {
    String message = _chatController.text.trim();
    if (message.isNotEmpty) {
      _viewModel.sendMessage(message, selectedModel);
      _chatController.clear();
    }
  }

  Widget _buildUploadButton({
    required IconData icon,
    required String label,
    required Color color,
  }) {
    return GestureDetector(
      onTap: () {
        // Logic khi nhấn nút upload
      },
      child: Container(
        width: 150,
        height: 150,
        decoration: BoxDecoration(
          color: color,
          borderRadius: BorderRadius.circular(AppSize.s16),
        ),
        child: Column(
          mainAxisAlignment: MainAxisAlignment.center,
          children: [
            Icon(icon, size: AppSize.s40),
            const SizedBox(height: AppSize.s8),
            Text(label),
          ],
        ),
      ),
    );
  }

  Widget _buildSuggestion(String title, String subtitle) {
    return Container(
      margin: const EdgeInsets.symmetric(vertical: AppSize.s8),
      child: ListTile(
        title: Text(title),
        subtitle: Text(subtitle),
        tileColor: Colors.teal.shade50,
        shape: RoundedRectangleBorder(
          borderRadius: BorderRadius.circular(AppSize.s10),
        ),
        contentPadding: const EdgeInsets.symmetric(horizontal: AppSize.s16),
        onTap: () {
          // Khi người dùng nhấn vào gợi ý, tự động gửi tin nhắn
          _chatController.text = "$title, $subtitle";
          _sendMessage();
        },
      ),
    );
  }
}

================
File: presentation/chat/chat_viewmodel.dart
================
// lib/presentation/viewmodel/chat_viewmodel.dart

import 'dart:async';
import 'dart:convert';

import 'package:flutter/material.dart';
import 'package:jarvis/app/constant.dart';
import 'package:jarvis/app/functions.dart';
import 'package:jarvis/data/request/ai_chat/send_message/assistant.dart';
import 'package:jarvis/data/request/ai_chat/send_message/chat_conversation.dart';
import 'package:jarvis/data/request/ai_chat/send_message/chat_message.dart';
import 'package:jarvis/data/request/ai_chat/send_message/message_role.dart';
import 'package:jarvis/data/request/ai_chat/send_message/send_message_metadata.dart';
import 'package:jarvis/domain/model/model.dart';
import 'package:jarvis/domain/usecase/base_usecase.dart';
import 'package:jarvis/domain/usecase/send_message_usecase.dart';
import 'package:jarvis/domain/usecase/usage_token_usecase.dart';
import 'package:jarvis/presentation/base/baseviewmodel.dart';

class ChatViewModel extends BaseViewModel
    implements ChatViewModelInputs, ChatViewModelOutputs {
  final SendMessageUseCase _sendMessageUseCase;
  final UsageTokenUseCase _usageTokenUseCase;

  final StreamController<List<Message>> _messagesStreamController =
      StreamController<List<Message>>.broadcast();

  final StreamController<String?> _errorStreamController =
      StreamController<String?>.broadcast();

  final StreamController<int> _remainingUsageStreamController =
      StreamController<int>.broadcast();

  final List<Message> _messages = [];

  String? _conversationId;

  int _remainingUsage = 50;

  ChatViewModel(this._sendMessageUseCase, this._usageTokenUseCase);

  // Inputs
  @override
  void sendMessage(String content, String assistantName) async {
    if (content.isEmpty) return;

    // Tạo danh sách ConversationMessage từ _messages
    final conversationMessages = _messages.map((msg) {
      Assistant assistant;
      if (msg.assistant != null) {
        assistant = Assistant(
          id: msg.assistant!.id,
          model: msg.assistant!.model,
          name: msg.assistant!.name,
        );
      } else {
        assistant = Assistant(id: "gpt-4o", model: "Dify", name: "GPT-4o");
      }
      return ChatMessage(
        role: msg.isUser ? MessageRole.user : MessageRole.model,
        content: msg.message,
        assistant: assistant,
      );
    }).toList();

    // Tạo metadata
    final metadata = SendMessageMetadata(
      conversation: _conversationId != null
          ? ChatConversation(
              id: _conversationId,
              messages: conversationMessages,
            )
          : ChatConversation(
              messages: [], // Tin nhắn đầu tiên, danh sách rỗng
            ),
    );

    // Tạo input cho use case
    final assistant = Assistant(
      id: getModelId(assistantName),
      model: ConstantAssistantModel.DIFY,
      name: getModelName(assistantName),
    );
    
    final input = SendMessageUseCaseInput(
      content: content,
      metadata: metadata,
      assistant: assistant,
    );
    print("input: ${jsonEncode(input.toJson())}");
    // Tạo tin nhắn của người dùng
    final userMessage = Message(
      message: content,
      isUser: true,
      conversationId: _conversationId ?? '',
      remainingUsage: 0,
      assistant: assistant,
    );


    _messages.add(userMessage);
    _messagesStreamController.add(List.from(_messages));

    final result = await _sendMessageUseCase.execute(input);

    result.fold(
      (failure) {
        print(failure);
        _errorStreamController.add(failure.message);
      },
      (responseMessage) {
        print('receive message success');
        _conversationId ??= responseMessage.conversationId;

        final assistantMessage = responseMessage;
        _messages.add(assistantMessage);
        _messagesStreamController.add(List.from(_messages)); // Cập nhật stream

        _remainingUsage = assistantMessage.remainingUsage;
        _remainingUsageStreamController.add(_remainingUsage);
      },
    );
  }

  @override
  Future<void> getUsageToken() async {
    final result = await _usageTokenUseCase.execute(NoParams());
    result.fold(
      (failure) {
        print(failure);
        _errorStreamController.add(failure.message);
      },
      (responseMessage) {
        print('get usage token success');

        final assistantMessage = responseMessage;
        _remainingUsage = assistantMessage.availaleTokens;
        _remainingUsageStreamController.add(_remainingUsage);
      },
    );
  }

  // Outputs
  @override
  Stream<List<Message>> get messagesStream => _messagesStreamController.stream;

  @override
  Stream<String?> get errorStream => _errorStreamController.stream;

  @override
  Stream<int> get remainingUsageStream =>
      _remainingUsageStreamController.stream;

  @override
  void start() async {
    await getUsageToken();
  }

  @override
  void dispose() {
    _messagesStreamController.close();
    _errorStreamController.close();
    _remainingUsageStreamController.close();
    super.dispose();
  }

  @override
  Future<void> navigateNamed(BuildContext context, String route) {
    // TODO: implement navigateNamed
    throw UnimplementedError();
  }

  @override
  Future<void> navigateReplaceNamed(BuildContext context, String route) {
    // TODO: implement navigateReplaceNamed
    throw UnimplementedError();
  }
}

abstract class ChatViewModelInputs {
  void sendMessage(String content, String selectedModel);
  void getUsageToken();
  // Sink để gửi các sự kiện nếu cần
}

abstract class ChatViewModelOutputs {
  Stream<List<Message>> get messagesStream;
  Stream<String?> get errorStream;
  Stream<int> get remainingUsageStream;
}

================
File: presentation/chatbot/chat/chat_bot_view.dart
================
import 'package:flutter/material.dart';
import 'package:jarvis/presentation/common/chat_input_box.dart';
import 'package:jarvis/presentation/common/custome_header_bar.dart';
import 'package:jarvis/presentation/resources/font_manager.dart';
import 'package:jarvis/presentation/resources/values_manager.dart';

class ChatBotView extends StatefulWidget {
  const ChatBotView({super.key});

  @override
  State<ChatBotView> createState() => _ChatBotViewState();
}

class _ChatBotViewState extends State<ChatBotView> {
  final TextEditingController _chatController = TextEditingController();

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      backgroundColor: Colors.white,
      appBar: CustomHeaderBar(
        centerWidget: const Text(
          'Name Bot',
          style: TextStyle(
            color: Colors.white,
            fontSize: 20.0,
            fontWeight: FontWeight.bold,
          ),
        ),
        centerTitle: true,
        leading: IconButton(
          icon: Icon(Icons.arrow_back, color: Colors.white),
          onPressed: () {
            Navigator.pop(context);
          },
        ),
      ),
      body: SafeArea(
        child: Column(
          children: [
            Expanded(
              child: SingleChildScrollView(
                child: Column(
                  children: [
                    Padding(
                      padding: EdgeInsets.only(top: 30.0),
                      child: Center(
                        child: CircleAvatar(
                          radius: 40.0,
                          backgroundImage: AssetImage('assets/images/avt.png'),
                        ),
                      ),
                    ),
                    SizedBox(height: AppSize.s8),
                    Center(
                      child: Text("Description", style: TextStyle(
                        fontSize: AppSize.s16,
                        fontWeight: FontWeightManager.medium,
                      ),),
                    )
                  ],
                ),
              ),
            ),
            ChatInputBox(
              controller: _chatController,
              onSend: _sendMessage,
            ),
          ],
        ),
      ),
    );
  }
  
  void _sendMessage() {
    String message = _chatController.text;
    if (message.isNotEmpty) {
      _chatController.clear();
    }
  }
}

================
File: presentation/chatbot/create_bot/create_bot_view.dart
================
import 'package:flutter/material.dart';
import 'package:jarvis/presentation/common/custome_header_bar.dart';
import 'package:jarvis/presentation/resources/color_manager.dart';
import 'package:jarvis/presentation/resources/route_manager.dart';
import 'package:jarvis/presentation/resources/values_manager.dart';

class CreateBotView extends StatelessWidget {
  const CreateBotView({super.key});

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      backgroundColor: Colors.white,
      appBar: CustomHeaderBar(
        centerWidget: const Text(
          'Create Bot',
          style: TextStyle(
            color: Colors.white,
            fontSize: 20.0,
            fontWeight: FontWeight.bold,
          ),
        ),
        centerTitle: true,
        leading: IconButton(
          icon: Icon(Icons.arrow_back, color: Colors.white),
          onPressed: () {
            Navigator.pop(context);
          },
        ),
      ),
      body: SafeArea(
        child: SingleChildScrollView(
          child: Column(
            children: [
              Container(
                padding: EdgeInsets.only(top: 30.0),
                child: Center(
                  child: CircleAvatar(
                    radius: 40.0,
                    backgroundImage: AssetImage('assets/images/avt.png'),
                  ),
                ),
              ),
              const SizedBox(height: 20.0),
              _buildInputField('Bot name', 'Enter bot name', context),
              _buildInputField('Description', 'Example: You are an experienced science fiction writer...', context, maxLines: 5),
              _buildInputField('Persona & Prompt', 'Example: Answer in 2 sentences', context, maxLines: 3),
              _buildKnowledgeField(),
              const SizedBox(height: 40.0),
              Padding(
                padding: const EdgeInsets.symmetric(horizontal: 20.0),
                child: ElevatedButton(
                  style: ElevatedButton.styleFrom(
                    backgroundColor: Colors.teal,
                    foregroundColor: Colors.white,
                    shape: RoundedRectangleBorder(
                      borderRadius: BorderRadius.circular(10.0),
                    ),
                    minimumSize: Size(double.infinity, 50),
                  ),
                  onPressed: () {
                    Navigator.of(context).pushNamed(Routes.previewBotRoute);
                  },
                  child: const Text(
                    'Preview bot',
                    style: TextStyle(
                      fontWeight: FontWeight.w600,
                      fontSize: 16.0,
                    ),
                  ),
                ),
              ),
              const SizedBox(height: 20.0),
            ],
          ),
        ),
      ),
    );
  }

  Widget _buildInputField(String label, String hint, BuildContext context, {int maxLines = 1}) {
    return Padding(
      padding: const EdgeInsets.symmetric(horizontal: 20.0, vertical: 10.0),
      child: Theme(
        data: Theme.of(context).copyWith(
          inputDecorationTheme: InputDecorationTheme(
            floatingLabelStyle: const TextStyle(
              fontSize: 18.0,
              fontWeight: FontWeight.bold,
              color: Colors.black,
            ),
          ),
        ),
        child: TextField(
          maxLines: maxLines,
          style: const TextStyle(
            fontSize: 14.0,
            color: Colors.black,
          ),
          decoration: InputDecoration(
            labelText: label,
            hintText: hint,
            hintStyle: const TextStyle(
              color: Colors.grey,
            ),
            floatingLabelBehavior: FloatingLabelBehavior.always,
            labelStyle: const TextStyle(
              fontSize: 14.0,
              color: Colors.black,
            ),
            border: OutlineInputBorder(
              borderRadius: BorderRadius.circular(10.0),
            ),
            focusedBorder: OutlineInputBorder(
              borderRadius: BorderRadius.circular(10.0),
              borderSide: const BorderSide(
                color: Colors.teal,
                width: 1.0,
              ),
            ),
            contentPadding: const EdgeInsets.symmetric(horizontal: 16.0, vertical: 14.0),
          ),
        ),
      ),
    );
  }

  Widget _buildKnowledgeField() {
    return Padding(
      padding: const EdgeInsets.symmetric(horizontal: 20.0, vertical: 10.0),
      child: Container(
        decoration: BoxDecoration(
          color: Colors.white,
          borderRadius: BorderRadius.circular(10.0),
          border: Border.all(color: Colors.grey),
        ),
        child: Padding(
          padding: const EdgeInsets.symmetric(horizontal: 12.0, vertical: 10.0),
          child: Column(
            crossAxisAlignment: CrossAxisAlignment.start,
            children: [
              Text(
                'Knowledge',
                style: TextStyle(
                  fontSize: 16.0,
                  color: Colors.black,
                  fontWeight: FontWeight.bold,
                ),
              ),
              const SizedBox(height: 6.0),
              Row(
                mainAxisAlignment: MainAxisAlignment.spaceBetween,
                children: [
                  Container(
                    padding: const EdgeInsets.symmetric(horizontal: 10.0, vertical: 6.0),
                    decoration: BoxDecoration(
                      border: Border.all(color: ColorManager.teal), // Set border color and width
                      borderRadius: BorderRadius.circular(AppSize.s8),
                    ),
                    child: Text(
                      '4 units',
                      style: TextStyle(
                        fontSize: 14.0,
                        color: Colors.green.shade800,
                      ),
                    ),
                  ),
                  const SizedBox(width: 10.0),
                  ElevatedButton(
                    style: ElevatedButton.styleFrom(
                      backgroundColor: Colors.teal,
                      elevation: 0,
                      shape: RoundedRectangleBorder(
                        borderRadius: BorderRadius.circular(20.0),
                      ),
                      padding: const EdgeInsets.symmetric(horizontal: 20.0, vertical: 8.0),
                    ),
                    onPressed: () {
                      // Add knowledge logic
                    },
                    child: const Text(
                      'Add',
                      style: TextStyle(
                        fontSize: 14.0,
                        fontWeight: FontWeight.bold,
                        color: Colors.white,
                      ),
                    ),
                  ),
                ],
              ),
            ],
          ),
        ),
      ),
    );
  }
}

================
File: presentation/chatbot/edit_bot/edit_bot_view.dart
================
import 'package:flutter/material.dart';
import 'package:jarvis/presentation/common/custome_header_bar.dart';
import 'package:jarvis/presentation/resources/color_manager.dart';
import 'package:jarvis/presentation/resources/values_manager.dart';

class EditBotView extends StatelessWidget {
  const EditBotView({super.key});

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      backgroundColor: Colors.white,
      appBar: CustomHeaderBar(
        centerWidget: const Text(
          'Edit Bot',
          style: TextStyle(
            color: Colors.white,
            fontSize: 20.0,
            fontWeight: FontWeight.bold,
          ),
        ),
        centerTitle: true,
        leading: IconButton(
          icon: Icon(Icons.arrow_back, color: Colors.white),
          onPressed: () {
            Navigator.pop(context); // Go back to the previous screen
          },
        ),
      ),
      body: SafeArea(
        child: SingleChildScrollView(
          child: Column(
            children: [
              Container(
                padding: EdgeInsets.only(top: 30.0),
                child: Center(
                  child: CircleAvatar(
                    radius: 40.0,
                    backgroundImage: AssetImage('assets/images/avt.png'),
                  ),
                ),
              ),
              const SizedBox(height: 20.0),
              _buildInputField('Bot name', 'Super bot', context),
              _buildInputField('Description', 'The bot is an experienced science fiction writer...', context, maxLines: 5),
              _buildInputField('Persona & Prompt', 'Answer in 2 sentences', context, maxLines: 3),
              _buildKnowledgeField(),
              const SizedBox(height: 40.0),
              Padding(
                padding: const EdgeInsets.symmetric(horizontal: 20.0),
                child: ElevatedButton(
                  style: ElevatedButton.styleFrom(
                    backgroundColor: Colors.teal,
                    foregroundColor: Colors.white,
                    shape: RoundedRectangleBorder(
                      borderRadius: BorderRadius.circular(10.0),
                    ),
                    minimumSize: Size(double.infinity, 50), // Full width button
                  ),
                  onPressed: () {
                    // Logic to preview bot
                    _previewBot(context);
                  },
                  child: const Text(
                    'Save',
                    style: TextStyle(
                      fontWeight: FontWeight.w600,
                      fontSize: 16.0,
                    ),
                  ),
                ),
              ),
              const SizedBox(height: 20.0),
            ],
          ),
        ),
      ),
    );
  }

  void _previewBot(BuildContext context) {
    // Logic to handle preview action
    // You can show a dialog, navigate to another screen, etc.
    showDialog(
      context: context,
      builder: (BuildContext context) {
        return AlertDialog(
          title: Text('Preview Bot'),
          content: Text('This is a preview of the bot.'),
          actions: [
            TextButton(
              onPressed: () {
                Navigator.of(context).pop(); // Close the dialog
              },
              child: Text('Close'),
            ),
          ],
        );
      },
    );
  }

  Widget _buildInputField(String label, String preFilledText, BuildContext context, {int maxLines = 1}) {
    TextEditingController controller = TextEditingController(text: preFilledText);

    return Padding(
      padding: const EdgeInsets.symmetric(horizontal: 20.0, vertical: 10.0),
      child: Theme(
        data: Theme.of(context).copyWith(
          inputDecorationTheme: InputDecorationTheme(
            floatingLabelStyle: const TextStyle(
              fontSize: 18.0,
              fontWeight: FontWeight.bold,
              color: Colors.black,
            ),
          ),
        ),
        child: TextField(
          controller: controller,
          maxLines: maxLines,
          style: const TextStyle(
            fontSize: 14.0,
            color: Colors.black,
          ),
          decoration: InputDecoration(
            labelText: label,
            floatingLabelBehavior: FloatingLabelBehavior.auto,
            labelStyle: const TextStyle(
              fontSize: 14.0,
              color: Colors.black,
            ),
            border: OutlineInputBorder(
              borderRadius: BorderRadius.circular(10.0),
            ),
            focusedBorder: OutlineInputBorder(
              borderRadius: BorderRadius.circular(10.0),
              borderSide: const BorderSide(
                color: Colors.teal,
                width: 1.0,
              ),
            ),
            contentPadding: const EdgeInsets.symmetric(horizontal: 16.0, vertical: 14.0),
          ),
        ),
      ),
    );
  }


  Widget _buildKnowledgeField() {
    return Padding(
      padding: const EdgeInsets.symmetric(horizontal: 20.0, vertical: 10.0),
      child: Container(
        decoration: BoxDecoration(
          color: Colors.white,
          borderRadius: BorderRadius.circular(10.0),
          border: Border.all(color: Colors.grey),
        ),
        child: Padding(
          padding: const EdgeInsets.symmetric(horizontal: 12.0, vertical: 10.0),
          child: Column(
            crossAxisAlignment: CrossAxisAlignment.start,
            children: [
              Text(
                'Knowledge',
                style: TextStyle(
                  fontSize: 14.0,
                  color: Colors.black,
                  fontWeight: FontWeight.bold,
                ),
              ),
              const SizedBox(height: 6.0),
              Row(
                mainAxisAlignment: MainAxisAlignment.spaceBetween,
                children: [
                  Container(
                    decoration: BoxDecoration(
                      border: Border.all(color: ColorManager.teal), // Set border color and width
                      borderRadius: BorderRadius.circular(AppSize.s8),
                    ),
                    padding: const EdgeInsets.symmetric(horizontal: 10.0, vertical: 6.0),
                    child: Text(
                      '4 units',
                      style: TextStyle(
                        fontSize: 14.0,
                        color: Colors.green.shade800,
                      ),
                    ),
                  ),
                  const SizedBox(width: 10.0),
                  ElevatedButton(
                    style: ElevatedButton.styleFrom(
                      backgroundColor: Colors.teal,
                      elevation: 0,
                      shape: RoundedRectangleBorder(
                        borderRadius: BorderRadius.circular(20.0),
                      ),
                      padding: const EdgeInsets.symmetric(horizontal: 20.0, vertical: 8.0),
                    ),
                    onPressed: () {
                      // Add knowledge logic
                    },
                    child: const Text(
                      'Add',
                      style: TextStyle(
                        fontSize: 14.0,
                        fontWeight: FontWeight.bold,
                        color: Colors.white,
                      ),
                    ),
                  ),
                ],
              ),
            ],
          ),
        ),
      ),
    );
  }
}

================
File: presentation/chatbot/main_chatbot_view.dart
================
import 'package:flutter/material.dart';
import 'package:jarvis/presentation/common/custome_header_bar.dart';
import 'package:jarvis/presentation/resources/color_manager.dart';
import 'package:jarvis/presentation/resources/font_manager.dart';
import 'package:jarvis/presentation/resources/route_manager.dart';
import 'package:jarvis/presentation/resources/values_manager.dart';

class ChatBotMainView extends StatefulWidget {
  const ChatBotMainView({super.key});

  @override
  State<ChatBotMainView> createState() => _ChatBotMainViewState();
}

class _ChatBotMainViewState extends State<ChatBotMainView> {
  int _selectedIndex = 0;

  // Danh sách dữ liệu cho các tab
  final List<List<String>> _botData = [
    ['Bot A1', 'Bot A2', 'Bot A3','Bot A1', 'Bot A2', 'Bot A3','Bot A1', 'Bot A2', 'Bot A3','Bot A1', 'Bot A2', 'Bot A3','Bot A1', 'Bot A2', 'Bot A3'],
    ['Bot B1', 'Bot B2', 'Bot B3'],
    ['Bot C1', 'Bot C2', 'Bot C3'],
    ['Bot D1', 'Bot D2', 'Bot D3'],
    ['Bot E1', 'Bot E2', 'Bot E3'],
    ['Bot A1', 'Bot A2', 'Bot A3'],
    ['Bot B1', 'Bot B2', 'Bot B3'],
    ['Bot C1', 'Bot C2', 'Bot C3'],
    ['Bot D1', 'Bot D2', 'Bot D3'],
    ['Bot E1', 'Bot E2', 'Bot E3'],
    ['Bot A1', 'Bot A2', 'Bot A3'],
    ['Bot B1', 'Bot B2', 'Bot B3'],
    ['Bot C1', 'Bot C2', 'Bot C3'],
    ['Bot D1', 'Bot D2', 'Bot D3'],
    ['Bot E1', 'Bot E2', 'Bot E3'],
  ];

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: CustomHeaderBar(
        centerTitle: true,
        centerWidget: Text(
          "Bots",
          style: TextStyle(fontSize: AppSize.s20, fontWeight: FontWeightManager.semiBold),
        ),
        actions: [
          Padding(
            padding: EdgeInsets.all(AppSize.s6),
            child: Center(
              child: ElevatedButton(
                style: ElevatedButton.styleFrom(
                  foregroundColor: Colors.white,
                  backgroundColor: ColorManager.teal,
                  padding: EdgeInsets.symmetric(horizontal: AppSize.s8, vertical: AppSize.s6),
                  shape: RoundedRectangleBorder(
                    borderRadius: BorderRadius.circular(30),
                  ),
                ),
                onPressed: () {
                  Navigator.of(context).pushNamed(Routes.createBotRoute);
                },
                child: Row(
                  children: [
                    Icon(
                      Icons.add,
                      size: 14,
                    ),
                    const SizedBox(width: 4,),
                    Text(
                      'Create',
                      style: TextStyle(
                        fontSize: 14,
                        fontWeight: FontWeight.w500,
                      ),
                    ),
                  ],
                ),
              ),
            ),
          ),
        ],
      ),
      body: Container(
        color: Colors.teal[50],
        child: Column(
          children: [
            Padding(
              padding: const EdgeInsets.all(10.0),
              child: Row(
                children: [
                  Expanded(
                    child: TextField(
                      decoration: InputDecoration(
                        hintText: 'Search',
                        prefixIcon: Icon(Icons.search),
                        suffixIcon: IconButton(
                          icon: Icon(Icons.mic),
                          onPressed: () {
                          },
                        ),
                        fillColor: Colors.white,
                        filled: true,

                        border: OutlineInputBorder(
                          borderRadius: BorderRadius.circular(40.0),
                        ),
                        enabledBorder: OutlineInputBorder(
                          borderRadius: BorderRadius.circular(40.0),
                          borderSide: BorderSide(color: Colors.grey),
                        ),
                        focusedBorder: OutlineInputBorder(
                          borderRadius: BorderRadius.circular(40.0),
                          borderSide: BorderSide(color: ColorManager.teal),
                        ),
                      ),
                    ),
                  ),
                ],
              ),
            ),
            Container(
              height: 40,
              child: ListView(
                scrollDirection: Axis.horizontal,
                children: List.generate(_botData.length, (index) {
                  final bool isSelected = _selectedIndex == index;
                  return GestureDetector(
                    onTap: () {
                      setState(() {
                        _selectedIndex = index;
                      });
                    },
                    child: Container(
                      padding: const EdgeInsets.symmetric(horizontal: 16.0, vertical: 10.0),
                      margin: const EdgeInsets.symmetric(horizontal: 4.0),
                      decoration: BoxDecoration(
                        color: isSelected ? Colors.teal : Colors.white,
                        borderRadius: BorderRadius.circular(16),
                      ),
                      child: Text(
                        'Tab ${index + 1}',
                        style: TextStyle(
                          fontWeight: FontWeight.bold,
                          color: isSelected ? Colors.white : Colors.black,
                        ),
                      ),
                    ),
                  );
                }),
              ),
            ),
            Expanded(
              child: ListView.builder(
                itemCount: _botData[_selectedIndex].length,
                itemBuilder: (context, index) {
                  return Container(
                    margin: EdgeInsets.symmetric(vertical: AppSize.s6, horizontal: AppSize.s8),
                    padding: EdgeInsets.all(AppSize.s8),
                    decoration: BoxDecoration(
                      color: Colors.white,
                      borderRadius: BorderRadius.circular(AppSize.s12),
                      boxShadow: [
                        BoxShadow(
                          color: Colors.grey.withOpacity(0.2),
                          spreadRadius: 1,
                          blurRadius: 4,
                          offset: Offset(0, 2),
                        ),
                      ],
                    ),
                    child: Row(
                      children: [
                        CircleAvatar(
                          radius: AppSize.s24,
                          backgroundImage: AssetImage('assets/images/avatar.png'),
                        ),
                        SizedBox(width: AppSize.s12),
                        Expanded(
                          child: Column(
                            crossAxisAlignment: CrossAxisAlignment.start,
                            children: [
                              Text(
                                _botData[_selectedIndex][index],
                                style: TextStyle(
                                  fontWeight: FontWeight.bold,
                                  fontSize: AppSize.s16,
                                ),
                              ),
                              SizedBox(height: AppSize.s4),
                              Text(
                                'A brief description or tagline for the bot.',
                                style: TextStyle(
                                  fontSize: AppSize.s14,
                                  color: Colors.grey,
                                ),
                              ),
                              SizedBox(height: AppSize.s8),
                              Row(
                                children: [
                                  Text(
                                    'By Monica Team',
                                    style: TextStyle(
                                      fontSize: AppSize.s12,
                                      color: Colors.grey,
                                    ),
                                  ),
                                  SizedBox(width: AppSize.s8),
                                  Icon(
                                    Icons.public,
                                    color: Colors.grey,
                                    size: AppSize.s12,
                                  ),
                                  SizedBox(width: AppSize.s4),
                                  Text(
                                    '9.2k',
                                    style: TextStyle(
                                      fontSize: AppSize.s12,
                                      color: Colors.grey,
                                    ),
                                  ),
                                ],
                              ),
                            ],
                          ),
                        ),
                        IconButton(
                          icon: Icon(Icons.more_vert),
                          onPressed: () {
                            _showActions(context, _botData[_selectedIndex][index]);
                          },
                          color: Colors.grey,
                        ),
                      ],
                    ),
                  );
                },
              ),
            ),
          ],
        ),
      ),
    );
  }

  void _showActions(BuildContext context, String botName) {
    showModalBottomSheet(
      context: context,
      builder: (context) {
        return Container(
          padding: EdgeInsets.all(16.0),
          child: Column(
            mainAxisSize: MainAxisSize.min,
            children: [
              ListTile(
                leading: Icon(Icons.edit),
                title: Text('Edit'),
                onTap: () {
                  Navigator.pop(context);
                  Navigator.of(context).pushNamed(Routes.editBotRoute);
                },
              ),
              ListTile(
                leading: Icon(Icons.delete),
                title: Text('Delete'),
                onTap: () {
                  Navigator.pop(context);
                },
              ),
            ],
          ),
        );
      },
    );
  }
}

================
File: presentation/chatbot/preview_bot/preview_bot.dart
================
import 'package:flutter/material.dart';
import 'package:jarvis/presentation/common/chat_input_box.dart';
import 'package:jarvis/presentation/common/custome_header_bar.dart';
import 'package:jarvis/presentation/resources/color_manager.dart';
import 'package:jarvis/presentation/resources/font_manager.dart';
import 'package:jarvis/presentation/resources/values_manager.dart';

class PreviewBotView extends StatefulWidget {
  const PreviewBotView({super.key});

  @override
  State<PreviewBotView> createState() => _PreviewBotViewState();
}

class _PreviewBotViewState extends State<PreviewBotView> {
  final TextEditingController _chatController = TextEditingController();

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      backgroundColor: Colors.white,
      appBar: CustomHeaderBar(
        centerWidget: const Text(
          'Name Bot',
          style: TextStyle(
            color: Colors.white,
            fontSize: 20.0,
            fontWeight: FontWeight.bold,
          ),
        ),
        centerTitle: true,
        leading: IconButton(
          icon: Icon(Icons.arrow_back, color: Colors.white),
          onPressed: () {
            Navigator.pop(context);
          },
        ),
        actions: [
          Padding(
            padding: const EdgeInsets.all(8.0),
            child: TextButton(
                style: ElevatedButton.styleFrom(
                  foregroundColor: Colors.white,
                  backgroundColor: ColorManager.teal, // Text color
                  padding: EdgeInsets.symmetric(horizontal: AppSize.s8, vertical: AppSize.s4),
                  shape: RoundedRectangleBorder(
                    borderRadius: BorderRadius.circular(30), // Rounded corners
                  ),
                ),
                onPressed: () {
                  showDialog(context: context, builder: (builder) {
                    return Dialog(
                      insetPadding: const EdgeInsets.symmetric(horizontal: AppPadding.p16),
                      shape: RoundedRectangleBorder(
                        borderRadius: BorderRadius.circular(AppSize.s20),
                      ),
                      child: Container(
                        padding: const EdgeInsets.all(AppPadding.p20),
                        child: Column(
                          mainAxisSize: MainAxisSize.min,
                          children: [
                            Text(
                              'Save New Bot',
                              style: TextStyle(
                                fontSize: AppSize.s20,
                                fontWeight: FontWeight.bold,
                              ),
                            ),
                            const SizedBox(height: AppSize.s20),
                            Container(
                              width: AppSize.s60,
                              height: AppSize.s60,
                              decoration: BoxDecoration(
                                color: ColorManager.teal.withOpacity(0.1),
                                borderRadius: BorderRadius.circular(AppSize.s12),
                              ),
                              child: Icon(
                                Icons.layers_outlined,
                                size: AppSize.s32,
                                color: ColorManager.teal,
                              ),
                            ),
                            const SizedBox(height: AppSize.s20),
                            Column(
                              crossAxisAlignment: CrossAxisAlignment.start,
                              children: [
                                const Text(
                                  'Do you want to save this bot?',
                                  style: TextStyle(
                                    fontSize: AppSize.s16,
                                    fontWeight: FontWeight.w500,
                                  ),
                                ),
                              ],
                            ),
                            Row(
                              children: [
                                Expanded(
                                  child: TextButton(
                                    onPressed: () {
                                      Navigator.pop(context);
                                    },
                                    style: TextButton.styleFrom(
                                      padding: const EdgeInsets.symmetric(vertical: AppPadding.p12),
                                      shape: RoundedRectangleBorder(
                                        borderRadius: BorderRadius.circular(AppSize.s12),
                                      ),
                                      backgroundColor: ColorManager.teal.withOpacity(0.1),
                                    ),
                                    child: Text(
                                      'Cancel',
                                      style: TextStyle(
                                        color: ColorManager.teal,
                                        fontSize: AppSize.s16,
                                      ),
                                    ),
                                  ),
                                ),
                                const SizedBox(width: AppSize.s16),
                                Expanded(
                                  child: ElevatedButton(
                                    onPressed: () {
                                      // Handle confirm action
                                      Navigator.pop(context);
                                    },
                                    style: ElevatedButton.styleFrom(
                                      padding: const EdgeInsets.symmetric(vertical: AppPadding.p12),
                                      backgroundColor: ColorManager.teal,
                                      shape: RoundedRectangleBorder(
                                        borderRadius: BorderRadius.circular(AppSize.s12),
                                      ),
                                    ),
                                    child: const Text(
                                      'Save',
                                      style: TextStyle(
                                        color: Colors.white,
                                        fontSize: AppSize.s16,
                                      ),
                                    ),
                                  ),
                                ),
                              ],
                            ),
                          ],
                        ),
                      ),
                    );
                  });
                },
                child: Text("Save")
            ),
          )
        ],
      ),
      body: SafeArea(
        child: Column(
          children: [
            Expanded(
              child: SingleChildScrollView(
                child: Column(
                  children: [
                    Padding(
                      padding: EdgeInsets.only(top: 30.0),
                      child: Center(
                        child: CircleAvatar(
                          radius: 40.0,
                          backgroundImage: AssetImage('assets/images/avt.png'),
                        ),
                      ),
                    ),
                    SizedBox(height: AppSize.s8),
                    Center(
                      child: Text("Description", style: TextStyle(
                        fontSize: AppSize.s16,
                        fontWeight: FontWeightManager.medium,
                      ),),
                    )
                  ],
                ),
              ),
            ),
            ChatInputBox(
              controller: _chatController,
              onSend: _sendMessage,
            ),
          ],
        ),
      ),
    );
  }

  void _sendMessage() {
    String message = _chatController.text;
    if (message.isNotEmpty) {
      _chatController.clear();
    }
  }
}

================
File: presentation/common/animated_toggle_tab/animated_toggle_tab.dart
================
import 'package:flutter/material.dart';
import 'package:get_it/get_it.dart';

import '../../prompt/main_prompt_view.dart';

class AppinioAnimatedToggleTab extends StatefulWidget {
  /// function(int) for call back and control the view of tabs
  final Function(int) callback;

  /// a list of texts displayed on the tabs
  final List<String> tabTexts;

  /// style of text when active
  final TextStyle activeStyle;

  /// style of text when inactive
  final TextStyle inactiveStyle;

  /// height of the tab
  final double height;

  /// decoration of the tab
  final BoxDecoration boxDecoration;

  /// the decoration of animated box used to toggle
  final BoxDecoration animatedBoxDecoration;

  /// width of the tab
  final double width;

  /// offset of the area to toggle
  final double offset;

  /// animation duration for the toggling
  final Duration duration;

  final int initialIndex;

  const AppinioAnimatedToggleTab({
    Key? key,
    required this.callback,
    required this.tabTexts,
    required this.height,
    required this.boxDecoration,
    required this.animatedBoxDecoration,
    required this.activeStyle,
    required this.inactiveStyle,
    required this.width,
    this.offset = 0.02,
    this.duration = const Duration(milliseconds: 300),
    this.initialIndex = 0,
  }) : super(key: key);

  @override
  State<StatefulWidget> createState() => _AppinioAnimatedToggleTabState();
}

class _AppinioAnimatedToggleTabState extends State<AppinioAnimatedToggleTab> {
  late int index;

  @override
  void initState() {
    super.initState();
    index = widget.initialIndex;
  }

  @override
  Widget build(BuildContext context) {
    return Container(
      height: widget.height,
      width: widget.width,
      decoration: widget.boxDecoration,
      child: Stack(
        children: [
          AnimatedAlign(
            alignment: Alignment(
                (index / (widget.tabTexts.length - 1) * (2 - 2 * widget.offset)) -
                    1 +
                    widget.offset,
                0),
            duration: widget.duration,
            child: Container(
              width: (widget.width / widget.tabTexts.length),
              height: widget.height * 0.9,
              decoration: widget.animatedBoxDecoration,
            ),
          ),
          Row(
            crossAxisAlignment: CrossAxisAlignment.center,
            children: [
              for (int i = 0; i < widget.tabTexts.length; i++)
                Expanded(
                  child: GestureDetector(
                    onTap: () {
                      setState(() {
                        index = i;
                        widget.callback(i);
                        if (i == 0) {
                          GetIt.instance<PromptViewModel>().getPrivatePrompts("All");
                        } else {
                          GetIt.instance<PromptViewModel>().getPrompts("All");
                        }
                      });
                    },
                    child: _buildSwitchTab(
                      i == index,
                      widget.tabTexts[i],
                      i == index ? widget.activeStyle : widget.inactiveStyle,
                      i,
                    ),
                  ),
                ),
            ],
          ),
        ],
      ),
    );
  }

  Widget _buildSwitchTab(
    bool isLeft,
    String title,
    TextStyle style,
    int i,
  ) {
    return GestureDetector(
      behavior: HitTestBehavior.translucent,
      onTap: () {
        setState(() {
          index = i;
          widget.callback(i);
        });
      },
      child: Container(
        alignment: Alignment.center,
        width: double.infinity,
        height: widget.height,
        child: Text(
          title,
          textAlign: TextAlign.center,
          style: style,
        ),
      ),
    );
  }
}

================
File: presentation/common/app_drawer.dart
================
import 'package:flutter/material.dart';
import 'package:jarvis/presentation/resources/color_manager.dart';
import 'package:jarvis/presentation/resources/font_manager.dart';
import 'package:jarvis/presentation/resources/route_manager.dart';
import 'package:jarvis/presentation/resources/values_manager.dart';

class AppDrawer extends StatefulWidget {
  const AppDrawer({super.key});

  @override
  State<AppDrawer> createState() => _AppDrawerState();
}

class _AppDrawerState extends State<AppDrawer> {
  bool _isSearching = false;
  String _searchText = '';
  final _focusNode = FocusNode();
  final List<String> _chatHistoryTitle = [
    'Chat with Alice',
    'Chat with Bob',
    'Chat with Charlie',
    'Chat with David',
    'Chat with Eve',
    'Chat with Frank',
    'Chat with Grace',
    'Chat with Heidi',
    'Chat with Ivan',
    'Chat with Judy',
  ];

  @override
  Widget build(BuildContext context) {
    return Drawer(
      child: ListView(
        padding: EdgeInsets.zero,
        children: [
          DrawerHeader(
            decoration: BoxDecoration(
              color: ColorManager.teal,
            ),
            child: Text(
              'CyneAI',
              style: TextStyle(
                color: ColorManager.white,
                fontSize: AppSize.s24,
              ),
            ),
          ),
          ListTile(
            leading: const Icon(Icons.home),
            title: const Text('Home'),
            onTap: () {},
          ),
          ListTile(
            leading: const Icon(Icons.person),
            title: const Text('Profile'),
            onTap: () {
              Navigator.of(context).pushNamed(Routes.profileRoute);
            },
          ),
          ListTile(
            leading: const Icon(Icons.upgrade),
            title: const Text('Upgrade Pro'),
            onTap: () {
              Navigator.of(context).pushNamed(Routes.upgradeProRoute);
            },
          ),
          ListTile(
            title: _isSearching
                ? TextField(
                    focusNode: _focusNode,
                    onChanged: (text) {
                      setState(() {
                        _searchText = text; // Update search text
                      });
                    },
                    decoration: const InputDecoration(
                      hintText: 'Search chats...',
                      border: OutlineInputBorder(),
                    ),
                  )
                : const Text('All Chats',
                    style: TextStyle(
                      fontWeight: FontWeightManager.bold,
                    )),
            trailing: IconButton(
              onPressed: () {
                setState(() {
                  _isSearching = !_isSearching; // Toggle search bar
                  if (!_isSearching) {
                    _searchText = ''; // Clear search text when closing
                  }
                });
              },
              icon: const Icon(Icons.search),
            ),
          ),
          // ListView for chat history
          ListView.builder(
            padding: const EdgeInsets.only(top: 0),
            shrinkWrap: true, // Important for nested ListView
            physics: const NeverScrollableScrollPhysics(),
            itemCount: _chatHistoryTitle.length,
            itemBuilder: (context, index) {
              // Filter chat history based on search text
              // if (_isSearching && !_chatHistory[index].toLowerCase().contains(_searchText.toLowerCase())) {
              //   return Container(); // Skip this item
              // }
              return ListTile(
                title: Column(
                  crossAxisAlignment: CrossAxisAlignment.start,
                  children: [
                    Row(
                      mainAxisAlignment: MainAxisAlignment.spaceBetween,
                      children: [
                        Row(
                          children: [
                            const Icon(Icons.model_training, size: 16),
                            const SizedBox(width: 4),
                            Container(
                                child: const Text('Model',
                                    style: TextStyle(fontSize: 12))),
                          ],
                        ),
                        const Text("October 11, 2024"),
                      ],
                    ),
                    Container(
                      constraints:
                          const BoxConstraints(maxWidth: double.infinity),
                      child: Text(
                        _chatHistoryTitle[index],
                        overflow: TextOverflow.ellipsis,
                      ),
                    ),
                  ],
                ),
                subtitle: Row(
                  children: [
                    const Icon(Icons.message, size: 16),
                    const SizedBox(width: 4),
                    const Flexible(
                      child: Text(
                        'Last message or additional info',
                        overflow: TextOverflow.ellipsis,
                      ),
                    ),
                    IconButton(
                        onPressed: () {}, icon: const Icon(Icons.more_horiz))
                  ],
                ),
                onTap: () {
                  // Add action on tap, e.g., navigate to chat details
                },
              );
            },
          ),
        ],
      ),
    );
  }
}

================
File: presentation/common/bottom_navigation.dart
================
import 'package:flutter/material.dart';
import 'package:jarvis/presentation/resources/assets_manager.dart';
import 'package:jarvis/presentation/resources/values_manager.dart';

class BottomNavigation extends StatelessWidget {
  final int currentIndex;
  final ValueChanged<int> onTap;

  BottomNavigation({
    required this.currentIndex,
    required this.onTap,
  });

  @override
  Widget build(BuildContext context) {
    return BottomNavigationBar(
      type: BottomNavigationBarType.fixed,
      currentIndex: currentIndex,
      onTap: onTap,
      items: <BottomNavigationBarItem>[
        BottomNavigationBarItem(
            icon: Image.asset(
              ImageAssets.messageCircleIc,
              width: AppSize.s28,
              height: AppSize.s28,
            ),
            label: 'Chat'),
        BottomNavigationBarItem(
            icon: Image.asset(
              ImageAssets.botIc,
              width: AppSize.s28,
              height: AppSize.s28,
            ),
            label: 'Bot'),
        BottomNavigationBarItem(
            icon: Image.asset(
              ImageAssets.addIc,
              width: AppSize.s28,
              height: AppSize.s28,
            ),
            label: 'Prompt'),
        BottomNavigationBarItem(
            icon: Image.asset(
              ImageAssets.knowledgeIc,
              width: AppSize.s28,
              height: AppSize.s28,
            ),
            label: 'Knowledge'),
      ],
      selectedItemColor: Colors.teal,
      unselectedItemColor: Colors.grey,
    );
  }
}

================
File: presentation/common/chat_input_box.dart
================
import 'package:flutter/material.dart';
import 'package:jarvis/presentation/resources/color_manager.dart';
import 'package:jarvis/presentation/resources/strings_manager.dart';
import 'package:jarvis/presentation/resources/values_manager.dart';

class ChatInputBox extends StatelessWidget {
  final TextEditingController controller;
  final VoidCallback onSend;

  ChatInputBox({
    required this.controller,
    required this.onSend,
  });

  @override
  Widget build(BuildContext context) {
    return Container(
      padding: const EdgeInsets.symmetric(horizontal: AppSize.s8, vertical: AppSize.s10),
      decoration: BoxDecoration(
        color: Colors.teal.shade50,
        //borderRadius: BorderRadius.all(Radius.circular(AppSize.s16)),
      ),
      child: Row(
        children: [
          IconButton(
            icon: Icon(Icons.add_circle_outline),
            onPressed: () {
              // Logic khi nhấn nút thêm
            },
          ),
          Expanded(
            child: TextField(
              controller: controller,
              decoration: InputDecoration(
                hintText: AppStrings.chatHintText,

                // border: OutlineInputBorder(
                //   borderRadius: BorderRadius.circular(AppSize.s100),
                //   borderSide: BorderSide(color: Colors.blue),
                // ),
                // filled: true,
                // fillColor: ColorManager.white,
              ),
            ),
          ),
          IconButton(
            icon: Icon(Icons.send, color: ColorManager.teal),
            onPressed: onSend,
          ),
        ],
      ),
    );
  }
}

================
File: presentation/common/custome_header_bar.dart
================
import 'package:flutter/material.dart';

class CustomHeaderBar extends StatelessWidget implements PreferredSizeWidget {
  final Widget? centerWidget; // Widget ở giữa (như Dropdown)
  final List<Widget>? actions; // Nút hoặc icon ở bên phải
  final Widget? leading; // Nút bên trái (ví dụ: Icon menu)
  final bool centerTitle;
  const CustomHeaderBar({
    this.centerWidget,
    this.actions,
    this.leading,
    this.centerTitle = false,
  });

  @override
  Widget build(BuildContext context) {
    return AppBar(
      backgroundColor: Colors.teal.shade300,
      elevation: 0,
      leading: leading,
      title: centerWidget,
      centerTitle: centerTitle,
      actions: actions ?? [],
      automaticallyImplyLeading: false,
    );
  }

  @override
  Size get preferredSize => Size.fromHeight(kToolbarHeight);
}

================
File: presentation/common/dialog_util.dart
================
// lib/presentation/common/dialog_utils.dart

import 'package:flutter/material.dart';

enum DialogType { success, error }

Future<void> showCustomDialog({
  required BuildContext context,
  required DialogType type,
  required String title,
  required String message,
  String buttonText = 'OK',
}) {
  Color titleColor;
  IconData iconData;

  switch (type) {
    case DialogType.success:
      titleColor = Colors.green;
      iconData = Icons.check_circle;
      break;
    case DialogType.error:
      titleColor = Colors.red;
      iconData = Icons.error_outline;
      break;
  }

  return showDialog(
    context: context,
    barrierDismissible: false,
    builder: (context) => Dialog(
      shape: RoundedRectangleBorder(
        borderRadius: BorderRadius.circular(20),
      ),
      elevation: 10,
      backgroundColor: Colors.white,
      child: Container(
        padding: const EdgeInsets.symmetric(vertical: 20, horizontal: 20),
        child: Column(
          mainAxisSize: MainAxisSize.min,
          children: [
            Row(
              children: [
                Icon(
                  iconData,
                  color: titleColor,
                  size: 28,
                ),
                const SizedBox(width: 10),
                Expanded(
                  child: Text(
                    title,
                    style: TextStyle(
                      fontSize: 20,
                      fontWeight: FontWeight.bold,
                      color: titleColor,
                    ),
                  ),
                ),
              ],
            ),
            const SizedBox(height: 10),
            Divider(
              color: Colors.teal,
              thickness: 1,
            ),
            const SizedBox(height: 10),
            Text(
              message,
              style: const TextStyle(fontSize: 16, color: Colors.black87),
              textAlign: TextAlign.center,
            ),
            const SizedBox(height: 20),
            // Nút hành động
            ElevatedButton(
              onPressed: () => Navigator.of(context).pop(),
              style: ElevatedButton.styleFrom(
                backgroundColor: Colors.teal,
                padding: const EdgeInsets.symmetric(horizontal: 10, vertical: 10),
                shape: RoundedRectangleBorder(
                  borderRadius: BorderRadius.circular(30),
                ),
                // side: BorderSide( // Thêm màu viền
                //   color: Colors.teal,
                //   width: 1,
                // ),
              ),
              child: Text(
                buttonText,
                style: const TextStyle(fontSize: 16, color: Colors.white),
              ),
            ),
          ],
        ),
      ),
    ),
  );
}

================
File: presentation/common/freezed_data_classes.dart
================
import 'package:freezed_annotation/freezed_annotation.dart';

part 'freezed_data_classes.freezed.dart';

@freezed
class SignInObject with _$SignInObject {
  const factory SignInObject({
    required String email,
    required String password,
  }) = _SignInObject;
}

@freezed
class SignUpObject with _$SignUpObject {
  const factory SignUpObject({
    required String email,
    required String password,
    required String username,
  }) = _SignUpObject;
}

================
File: presentation/common/freezed_data_classes.freezed.dart
================
// coverage:ignore-file
// GENERATED CODE - DO NOT MODIFY BY HAND
// ignore_for_file: type=lint
// ignore_for_file: unused_element, deprecated_member_use, deprecated_member_use_from_same_package, use_function_type_syntax_for_parameters, unnecessary_const, avoid_init_to_null, invalid_override_different_default_values_named, prefer_expression_function_bodies, annotate_overrides, invalid_annotation_target, unnecessary_question_mark

part of 'freezed_data_classes.dart';

// **************************************************************************
// FreezedGenerator
// **************************************************************************

T _$identity<T>(T value) => value;

final _privateConstructorUsedError = UnsupportedError(
    'It seems like you constructed your class using `MyClass._()`. This constructor is only meant to be used by freezed and you are not supposed to need it nor use it.\nPlease check the documentation here for more information: https://github.com/rrousselGit/freezed#adding-getters-and-methods-to-our-models');

/// @nodoc
mixin _$SignInObject {
  String get email => throw _privateConstructorUsedError;
  String get password => throw _privateConstructorUsedError;

  /// Create a copy of SignInObject
  /// with the given fields replaced by the non-null parameter values.
  @JsonKey(includeFromJson: false, includeToJson: false)
  $SignInObjectCopyWith<SignInObject> get copyWith =>
      throw _privateConstructorUsedError;
}

/// @nodoc
abstract class $SignInObjectCopyWith<$Res> {
  factory $SignInObjectCopyWith(
          SignInObject value, $Res Function(SignInObject) then) =
      _$SignInObjectCopyWithImpl<$Res, SignInObject>;
  @useResult
  $Res call({String email, String password});
}

/// @nodoc
class _$SignInObjectCopyWithImpl<$Res, $Val extends SignInObject>
    implements $SignInObjectCopyWith<$Res> {
  _$SignInObjectCopyWithImpl(this._value, this._then);

  // ignore: unused_field
  final $Val _value;
  // ignore: unused_field
  final $Res Function($Val) _then;

  /// Create a copy of SignInObject
  /// with the given fields replaced by the non-null parameter values.
  @pragma('vm:prefer-inline')
  @override
  $Res call({
    Object? email = null,
    Object? password = null,
  }) {
    return _then(_value.copyWith(
      email: null == email
          ? _value.email
          : email // ignore: cast_nullable_to_non_nullable
              as String,
      password: null == password
          ? _value.password
          : password // ignore: cast_nullable_to_non_nullable
              as String,
    ) as $Val);
  }
}

/// @nodoc
abstract class _$$SignInObjectImplCopyWith<$Res>
    implements $SignInObjectCopyWith<$Res> {
  factory _$$SignInObjectImplCopyWith(
          _$SignInObjectImpl value, $Res Function(_$SignInObjectImpl) then) =
      __$$SignInObjectImplCopyWithImpl<$Res>;
  @override
  @useResult
  $Res call({String email, String password});
}

/// @nodoc
class __$$SignInObjectImplCopyWithImpl<$Res>
    extends _$SignInObjectCopyWithImpl<$Res, _$SignInObjectImpl>
    implements _$$SignInObjectImplCopyWith<$Res> {
  __$$SignInObjectImplCopyWithImpl(
      _$SignInObjectImpl _value, $Res Function(_$SignInObjectImpl) _then)
      : super(_value, _then);

  /// Create a copy of SignInObject
  /// with the given fields replaced by the non-null parameter values.
  @pragma('vm:prefer-inline')
  @override
  $Res call({
    Object? email = null,
    Object? password = null,
  }) {
    return _then(_$SignInObjectImpl(
      email: null == email
          ? _value.email
          : email // ignore: cast_nullable_to_non_nullable
              as String,
      password: null == password
          ? _value.password
          : password // ignore: cast_nullable_to_non_nullable
              as String,
    ));
  }
}

/// @nodoc

class _$SignInObjectImpl implements _SignInObject {
  const _$SignInObjectImpl({required this.email, required this.password});

  @override
  final String email;
  @override
  final String password;

  @override
  String toString() {
    return 'SignInObject(email: $email, password: $password)';
  }

  @override
  bool operator ==(Object other) {
    return identical(this, other) ||
        (other.runtimeType == runtimeType &&
            other is _$SignInObjectImpl &&
            (identical(other.email, email) || other.email == email) &&
            (identical(other.password, password) ||
                other.password == password));
  }

  @override
  int get hashCode => Object.hash(runtimeType, email, password);

  /// Create a copy of SignInObject
  /// with the given fields replaced by the non-null parameter values.
  @JsonKey(includeFromJson: false, includeToJson: false)
  @override
  @pragma('vm:prefer-inline')
  _$$SignInObjectImplCopyWith<_$SignInObjectImpl> get copyWith =>
      __$$SignInObjectImplCopyWithImpl<_$SignInObjectImpl>(this, _$identity);
}

abstract class _SignInObject implements SignInObject {
  const factory _SignInObject(
      {required final String email,
      required final String password}) = _$SignInObjectImpl;

  @override
  String get email;
  @override
  String get password;

  /// Create a copy of SignInObject
  /// with the given fields replaced by the non-null parameter values.
  @override
  @JsonKey(includeFromJson: false, includeToJson: false)
  _$$SignInObjectImplCopyWith<_$SignInObjectImpl> get copyWith =>
      throw _privateConstructorUsedError;
}

/// @nodoc
mixin _$SignUpObject {
  String get email => throw _privateConstructorUsedError;
  String get password => throw _privateConstructorUsedError;
  String get username => throw _privateConstructorUsedError;

  /// Create a copy of SignUpObject
  /// with the given fields replaced by the non-null parameter values.
  @JsonKey(includeFromJson: false, includeToJson: false)
  $SignUpObjectCopyWith<SignUpObject> get copyWith =>
      throw _privateConstructorUsedError;
}

/// @nodoc
abstract class $SignUpObjectCopyWith<$Res> {
  factory $SignUpObjectCopyWith(
          SignUpObject value, $Res Function(SignUpObject) then) =
      _$SignUpObjectCopyWithImpl<$Res, SignUpObject>;
  @useResult
  $Res call({String email, String password, String username});
}

/// @nodoc
class _$SignUpObjectCopyWithImpl<$Res, $Val extends SignUpObject>
    implements $SignUpObjectCopyWith<$Res> {
  _$SignUpObjectCopyWithImpl(this._value, this._then);

  // ignore: unused_field
  final $Val _value;
  // ignore: unused_field
  final $Res Function($Val) _then;

  /// Create a copy of SignUpObject
  /// with the given fields replaced by the non-null parameter values.
  @pragma('vm:prefer-inline')
  @override
  $Res call({
    Object? email = null,
    Object? password = null,
    Object? username = null,
  }) {
    return _then(_value.copyWith(
      email: null == email
          ? _value.email
          : email // ignore: cast_nullable_to_non_nullable
              as String,
      password: null == password
          ? _value.password
          : password // ignore: cast_nullable_to_non_nullable
              as String,
      username: null == username
          ? _value.username
          : username // ignore: cast_nullable_to_non_nullable
              as String,
    ) as $Val);
  }
}

/// @nodoc
abstract class _$$SignUpObjectImplCopyWith<$Res>
    implements $SignUpObjectCopyWith<$Res> {
  factory _$$SignUpObjectImplCopyWith(
          _$SignUpObjectImpl value, $Res Function(_$SignUpObjectImpl) then) =
      __$$SignUpObjectImplCopyWithImpl<$Res>;
  @override
  @useResult
  $Res call({String email, String password, String username});
}

/// @nodoc
class __$$SignUpObjectImplCopyWithImpl<$Res>
    extends _$SignUpObjectCopyWithImpl<$Res, _$SignUpObjectImpl>
    implements _$$SignUpObjectImplCopyWith<$Res> {
  __$$SignUpObjectImplCopyWithImpl(
      _$SignUpObjectImpl _value, $Res Function(_$SignUpObjectImpl) _then)
      : super(_value, _then);

  /// Create a copy of SignUpObject
  /// with the given fields replaced by the non-null parameter values.
  @pragma('vm:prefer-inline')
  @override
  $Res call({
    Object? email = null,
    Object? password = null,
    Object? username = null,
  }) {
    return _then(_$SignUpObjectImpl(
      email: null == email
          ? _value.email
          : email // ignore: cast_nullable_to_non_nullable
              as String,
      password: null == password
          ? _value.password
          : password // ignore: cast_nullable_to_non_nullable
              as String,
      username: null == username
          ? _value.username
          : username // ignore: cast_nullable_to_non_nullable
              as String,
    ));
  }
}

/// @nodoc

class _$SignUpObjectImpl implements _SignUpObject {
  const _$SignUpObjectImpl(
      {required this.email, required this.password, required this.username});

  @override
  final String email;
  @override
  final String password;
  @override
  final String username;

  @override
  String toString() {
    return 'SignUpObject(email: $email, password: $password, username: $username)';
  }

  @override
  bool operator ==(Object other) {
    return identical(this, other) ||
        (other.runtimeType == runtimeType &&
            other is _$SignUpObjectImpl &&
            (identical(other.email, email) || other.email == email) &&
            (identical(other.password, password) ||
                other.password == password) &&
            (identical(other.username, username) ||
                other.username == username));
  }

  @override
  int get hashCode => Object.hash(runtimeType, email, password, username);

  /// Create a copy of SignUpObject
  /// with the given fields replaced by the non-null parameter values.
  @JsonKey(includeFromJson: false, includeToJson: false)
  @override
  @pragma('vm:prefer-inline')
  _$$SignUpObjectImplCopyWith<_$SignUpObjectImpl> get copyWith =>
      __$$SignUpObjectImplCopyWithImpl<_$SignUpObjectImpl>(this, _$identity);
}

abstract class _SignUpObject implements SignUpObject {
  const factory _SignUpObject(
      {required final String email,
      required final String password,
      required final String username}) = _$SignUpObjectImpl;

  @override
  String get email;
  @override
  String get password;
  @override
  String get username;

  /// Create a copy of SignUpObject
  /// with the given fields replaced by the non-null parameter values.
  @override
  @JsonKey(includeFromJson: false, includeToJson: false)
  _$$SignUpObjectImplCopyWith<_$SignUpObjectImpl> get copyWith =>
      throw _privateConstructorUsedError;
}

================
File: presentation/getting_started/getting_started_viewmodel.dart
================
import 'package:flutter/material.dart';
import 'package:jarvis/presentation/base/baseviewmodel.dart';

class GettingStartedViewModel extends BaseViewModel {
  @override
  void dispose() {
  }

  @override
  void start() {
  }

  @override
  Future<void> navigateReplaceNamed(BuildContext context, String route) async {
    Navigator.pushReplacementNamed(context, route);
  }

  @override
  Future<void> navigateNamed(BuildContext context, String route) async {
    Navigator.pushNamed(context, route);
  }
}

================
File: presentation/getting_started/getting_started.dart
================
import 'package:flutter/material.dart';
import 'package:jarvis/presentation/resources/assets_manager.dart';
import 'package:jarvis/presentation/resources/color_manager.dart';
import 'package:jarvis/presentation/resources/font_manager.dart';
import 'package:jarvis/presentation/resources/route_manager.dart';
import 'package:jarvis/presentation/resources/values_manager.dart';
import 'getting_started_viewmodel.dart';

class GettingStartedView extends StatefulWidget {
  @override
  State<GettingStartedView> createState() => _GettingStartedViewState();
}

class _GettingStartedViewState extends State<GettingStartedView> {
  final GettingStartedViewModel _viewModel = GettingStartedViewModel();

  _bind() {
    _viewModel.start();
  }

  @override
  void initState() {
    _bind();
    super.initState();
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      body: LayoutBuilder(
        builder: (BuildContext context, BoxConstraints constraints) {
          return Container(
            width: constraints.maxWidth,
            height: constraints.maxHeight,
            decoration: BoxDecoration(
              gradient: LinearGradient(
                begin: Alignment.topCenter,
                end: Alignment.bottomCenter,
                colors: [
                  Colors.teal.shade300,
                  Colors.white,
                ],
              ),
            ),
            child: Column(
              mainAxisAlignment: MainAxisAlignment.center,
              children: [
                Image.asset(
                  ImageAssets.gettingStartedLogo,
                  fit: BoxFit.fill,
                ),
                SizedBox(height: AppSize.s20),
                Text(
                  'Welcome to AI\nchat bot',
                  textAlign: TextAlign.center,
                  style: TextStyle(
                    fontFamily: FontConstants.fontFamily,
                    fontSize: AppSize.s28,
                    fontWeight: FontWeightManager.bold,
                  ),
                ),
                SizedBox(height: AppSize.s40),
                ElevatedButton(
                  onPressed: () {
                    _viewModel.navigateNamed(context, Routes.signInRoute);
                  },
                  style: ElevatedButton.styleFrom(
                    backgroundColor: Colors.teal,
                    shape: RoundedRectangleBorder(
                      borderRadius: BorderRadius.circular(AppSize.s28),
                    ),
                    padding: EdgeInsets.symmetric(horizontal: AppSize.s40, vertical: AppSize.s16),
                  ),
                  child: Text(
                    'Getting Started',
                    style: TextStyle(
                      fontFamily: FontConstants.fontFamily,
                      fontSize: AppSize.s18,
                      color: ColorManager.white,
                    ),
                  ),
                ),
                SizedBox(height: AppSize.s20),
                TextButton(
                  onPressed: () {
                    // Điều hướng đến trang điều khoản và điều kiện
                  },
                  child: Text(
                    'Terms & conditions',
                    style: TextStyle(
                      fontFamily: FontConstants.fontFamily,
                      fontSize: AppSize.s16,
                      color: ColorManager.darkPrimary,
                      decoration: TextDecoration.underline,
                    ),
                  ),
                ),
                Spacer(),
              ],
            ),
          );
        }
      ),
    );
  }
}

================
File: presentation/knowledge/knowledge_create/knowledge_create.dart
================
import 'package:flutter/material.dart';
import 'package:jarvis/presentation/resources/color_manager.dart';
import 'package:jarvis/presentation/resources/values_manager.dart';

class CreateKnowledgeView extends StatefulWidget {
  @override
  State<CreateKnowledgeView> createState() => _CreateKnowledgeViewState();
}

class _CreateKnowledgeViewState extends State<CreateKnowledgeView> {
  final TextEditingController _nameController = TextEditingController();
  final TextEditingController _descriptionController = TextEditingController();

  @override
  void dispose() {
    _nameController.dispose();
    _descriptionController.dispose();
    super.dispose();
  }

  @override
  Widget build(BuildContext context) {
    return Dialog(
      insetPadding: const EdgeInsets.symmetric(horizontal: AppPadding.p16),
      shape: RoundedRectangleBorder(
        borderRadius: BorderRadius.circular(AppSize.s20),
      ),
      child: Container(
        padding: const EdgeInsets.all(AppPadding.p20),
        child: Column(
          mainAxisSize: MainAxisSize.min,
          children: [
            const Text(
              'Create knowledge',
              style: TextStyle(
                fontSize: AppSize.s20,
                fontWeight: FontWeight.bold,
              ),
            ),
            const SizedBox(height: AppSize.s20),
            Container(
              width: AppSize.s60,
              height: AppSize.s60,
              decoration: BoxDecoration(
                color: ColorManager.teal.withOpacity(0.1),
                borderRadius: BorderRadius.circular(AppSize.s12),
              ),
              child: Icon(
                Icons.layers_outlined,
                size: AppSize.s32,
                color: ColorManager.teal,
              ),
            ),
            const SizedBox(height: AppSize.s20),
            Column(
              crossAxisAlignment: CrossAxisAlignment.start,
              children: [
                const Text(
                  'Name',
                  style: TextStyle(
                    fontSize: AppSize.s16,
                    fontWeight: FontWeight.w500,
                  ),
                ),
                const SizedBox(height: AppSize.s8),
                TextField(
                  controller: _nameController,
                  decoration: InputDecoration(
                    hintText: 'Input name',
                    hintStyle: TextStyle(
                      color: Colors.grey[400],
                    ),
                    filled: true,
                    fillColor: Colors.grey[50],
                    border: OutlineInputBorder(
                      borderRadius: BorderRadius.circular(AppSize.s12),
                      borderSide: BorderSide.none,
                    ),
                    contentPadding: const EdgeInsets.symmetric(
                      horizontal: AppPadding.p16,
                      vertical: AppPadding.p12,
                    ),
                  ),
                ),
              ],
            ),
            const SizedBox(height: AppSize.s16),
            Column(
              crossAxisAlignment: CrossAxisAlignment.start,
              children: [
                const Text(
                  'Description',
                  style: TextStyle(
                    fontSize: AppSize.s16,
                    fontWeight: FontWeight.w500,
                  ),
                ),
                const SizedBox(height: AppSize.s8),
                TextField(
                  controller: _descriptionController,
                  decoration: InputDecoration(
                    hintText: 'Input description',
                    hintStyle: TextStyle(
                      color: Colors.grey[400],
                    ),
                    filled: true,
                    fillColor: Colors.grey[50],
                    border: OutlineInputBorder(
                      borderRadius: BorderRadius.circular(AppSize.s12),
                      borderSide: BorderSide.none,
                    ),
                    contentPadding: const EdgeInsets.symmetric(
                      horizontal: AppPadding.p16,
                      vertical: AppPadding.p12,
                    ),
                  ),
                ),
              ],
            ),
            const SizedBox(height: AppSize.s24),
            Row(
              children: [
                Expanded(
                  child: TextButton(
                    onPressed: () {
                      Navigator.pop(context);
                    },
                    style: TextButton.styleFrom(
                      padding: const EdgeInsets.symmetric(vertical: AppPadding.p12),
                      shape: RoundedRectangleBorder(
                        borderRadius: BorderRadius.circular(AppSize.s12),
                      ),
                      backgroundColor: ColorManager.teal.withOpacity(0.1),
                    ),
                    child: Text(
                      'Cancel',
                      style: TextStyle(
                        color: ColorManager.teal,
                        fontSize: AppSize.s16,
                      ),
                    ),
                  ),
                ),
                const SizedBox(width: AppSize.s16),
                Expanded(
                  child: ElevatedButton(
                    onPressed: () {
                      // Handle confirm action
                      if (_nameController.text.isNotEmpty) {
                        Navigator.pop(context, {
                          'name': _nameController.text,
                          'description': _descriptionController.text,
                        });
                      }
                    },
                    style: ElevatedButton.styleFrom(
                      padding: const EdgeInsets.symmetric(vertical: AppPadding.p12),
                      backgroundColor: ColorManager.teal,
                      shape: RoundedRectangleBorder(
                        borderRadius: BorderRadius.circular(AppSize.s12),
                      ),
                    ),
                    child: const Text(
                      'Confirm',
                      style: TextStyle(
                        color: Colors.white,
                        fontSize: AppSize.s16,
                      ),
                    ),
                  ),
                ),
              ],
            ),
          ],
        ),
      ),
    );
  }
}

================
File: presentation/knowledge/knowledge_delete/knowledge_delete.dart
================
import 'package:flutter/material.dart';
import 'package:jarvis/presentation/common/bottom_navigation.dart';
import 'package:jarvis/presentation/common/chat_input_box.dart';
import 'package:jarvis/presentation/common/custome_header_bar.dart';
import 'package:jarvis/presentation/resources/color_manager.dart';
import 'package:jarvis/presentation/resources/font_manager.dart';
import 'package:jarvis/presentation/resources/values_manager.dart';

class DeleteKnowledgeView extends StatelessWidget {
  final String? knowledgeName;

  const DeleteKnowledgeView({
    Key? key,
    this.knowledgeName,
  }) : super(key: key);

  @override
  Widget build(BuildContext context) {
    return Dialog(
      insetPadding: const EdgeInsets.symmetric(horizontal: AppPadding.p16),
      shape: RoundedRectangleBorder(
        borderRadius: BorderRadius.circular(AppSize.s20),
      ),
      child: Container(
        padding: const EdgeInsets.all(AppPadding.p20),
        child: Column(
          mainAxisSize: MainAxisSize.min,
          children: [
            Container(
              width: AppSize.s60,
              height: AppSize.s60,
              decoration: BoxDecoration(
                color: Colors.red.shade50,
                shape: BoxShape.circle,
              ),
              child: Icon(
                Icons.delete_outline,
                size: AppSize.s32,
                color: Colors.red[400],
              ),
            ),
            const SizedBox(height: AppSize.s20),
            const Text(
              'Remove Knowledge',
              style: TextStyle(
                fontSize: AppSize.s20,
                fontWeight: FontWeight.bold,
              ),
            ),
            const SizedBox(height: AppSize.s12),
            Text(
              'Are you sure you want to remove "$knowledgeName"?',
              textAlign: TextAlign.center,
              style: TextStyle(
                fontSize: AppSize.s16,
                color: Colors.grey[600],
              ),
            ),
            const SizedBox(height: AppSize.s24),
            Row(
              children: [
                Expanded(
                  child: TextButton(
                    onPressed: () {
                      Navigator.pop(context, false);
                    },
                    style: TextButton.styleFrom(
                      padding: const EdgeInsets.symmetric(vertical: AppPadding.p12),
                      shape: RoundedRectangleBorder(
                        borderRadius: BorderRadius.circular(AppSize.s12),
                      ),
                      backgroundColor: Colors.grey[100],
                    ),
                    child: Text(
                      'Cancel',
                      style: TextStyle(
                        color: Colors.grey[800],
                        fontSize: AppSize.s16,
                      ),
                    ),
                  ),
                ),
                const SizedBox(width: AppSize.s16),
                Expanded(
                  child: ElevatedButton(
                    onPressed: () {
                      Navigator.pop(context, true);
                    },
                    style: ElevatedButton.styleFrom(
                      padding: const EdgeInsets.symmetric(vertical: AppPadding.p12),
                      backgroundColor: Colors.red,
                      shape: RoundedRectangleBorder(
                        borderRadius: BorderRadius.circular(AppSize.s12),
                      ),
                    ),
                    child: const Text(
                      'Remove',
                      style: TextStyle(
                        color: Colors.white,
                        fontSize: AppSize.s16,
                      ),
                    ),
                  ),
                ),
              ],
            ),
          ],
        ),
      ),
    );
  }
}

================
File: presentation/knowledge/knowledge_detail/knowledge_detail.dart
================
import 'package:flutter/material.dart';
import 'package:jarvis/presentation/common/custome_header_bar.dart';
import 'package:jarvis/presentation/knowledge/knowledge_edit/knowledge_edit.dart';
import 'package:jarvis/presentation/resources/color_manager.dart';
import 'package:jarvis/presentation/resources/font_manager.dart';
import 'package:jarvis/presentation/resources/route_manager.dart';
import 'package:jarvis/presentation/resources/values_manager.dart';
import 'package:jarvis/presentation/unit_add/unit_add.dart';

class DetailKnowledgeView extends StatefulWidget {
  @override
  State<DetailKnowledgeView> createState() => _DetailKnowledgeViewState();
}

class _DetailKnowledgeViewState extends State<DetailKnowledgeView> {
  final List<KnowledgeUnit> units = [
    KnowledgeUnit(name: 'bai1.docx', size: '15KB', isEnabled: true),
    KnowledgeUnit(name: 'bai1.docx', size: '15KB', isEnabled: true),
  ];

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      backgroundColor: Colors.white,
      appBar: CustomHeaderBar(
        centerWidget: const Text(
          'Knowledge',
          style: TextStyle(
            color: Colors.white,
            fontSize: AppSize.s20,
            fontWeight: FontWeightManager.semiBold,
          ),
        ),
        leading: IconButton(
          icon: const Icon(Icons.arrow_back_ios, color: Colors.white),
          onPressed: () => Navigator.pop(context),
        ),
        centerTitle: true,
      ),
      body: Column(
        crossAxisAlignment: CrossAxisAlignment.start,
        children: [
          _buildKnowledgeHeader(),
          _buildUnitsHeader(),
          Expanded(
            child: ListView.builder(
              itemCount: units.length,
              itemBuilder: (context, index) {
                return _buildUnitItem(units[index]);
              },
            ),
          ),
        ],
      ),
    );
  }

  Widget _buildKnowledgeHeader() {
    return Padding(
      padding: const EdgeInsets.all(AppPadding.p16),
      child: Row(
        children: [
          Container(
            width: AppSize.s40,
            height: AppSize.s40,
            decoration: BoxDecoration(
              color: Colors.grey[100],
              borderRadius: BorderRadius.circular(AppSize.s8),
            ),
            child: const Icon(Icons.article_outlined),
          ),
          const SizedBox(width: AppSize.s16),
          Expanded(
            child: Column(
              crossAxisAlignment: CrossAxisAlignment.start,
              children: [
                const Text(
                  'Name of knowledge',
                  style: TextStyle(
                    fontSize: AppSize.s18,
                    fontWeight: FontWeight.bold,
                  ),
                ),
                Row(
                  children: [
                    Container(
                      padding: const EdgeInsets.symmetric(
                        horizontal: AppPadding.p8,
                        vertical: AppSize.s4,  // Changed to use AppSize instead
                      ),
                      decoration: BoxDecoration(
                        color: Colors.blue[50],
                        borderRadius: BorderRadius.circular(AppSize.s12),
                      ),
                      child: const Text(
                        '3 units',
                        style: TextStyle(color: Colors.blue),
                      ),
                    ),
                    const SizedBox(width: AppSize.s8),
                    Text(
                      '15KB',
                      style: TextStyle(color: Colors.grey[600]),
                    ),
                  ],
                ),
              ],
            ),
          ),
          Container(
            width: AppSize.s40,
            height: AppSize.s40,
            decoration: BoxDecoration(
              color: Colors.blue.shade100.withOpacity(0.4),
              shape: BoxShape.circle,
            ),
            child: IconButton(
              icon: Icon(
                Icons.edit_outlined,
                color: ColorManager.teal,
                size: AppSize.s20,
              ),
              onPressed: () {
                showDialog(context: context, builder: (builder) => EditKnowledgeView());
              },
            ),
          ),
        ],
      ),
    );
  }

  Widget _buildUnitsHeader() {
    return Padding(
      padding: const EdgeInsets.symmetric(
        horizontal: AppPadding.p16,
        vertical: AppPadding.p8,
      ),
      child: Row(
        mainAxisAlignment: MainAxisAlignment.spaceBetween,
        children: [
          const Text(
            'Units',
            style: TextStyle(
              fontSize: AppSize.s16,
              fontWeight: FontWeight.bold,
            ),
          ),
          TextButton(
            onPressed: () {
              showDialog(context: context, builder: (builder) => UnitAdd());
            },
            style: TextButton.styleFrom(
              backgroundColor: ColorManager.teal,
              shape: RoundedRectangleBorder(
                borderRadius: BorderRadius.circular(AppSize.s20),
              ),
              padding: const EdgeInsets.symmetric(
                horizontal: AppPadding.p16,
                vertical: AppPadding.p8,
              ),
            ),
            child: const Text(
              'Add',
              style: TextStyle(color: Colors.white),
            ),
          ),
        ],
      ),
    );
  }

  Widget _buildUnitItem(KnowledgeUnit unit) {
    return Padding(
      padding: const EdgeInsets.symmetric(
        horizontal: AppPadding.p16,
        vertical: AppPadding.p8,
      ),
      child: Row(
        children: [
          const Icon(Icons.attachment, color: Colors.grey),
          const SizedBox(width: AppSize.s12),
          Expanded(
            child: Column(
              crossAxisAlignment: CrossAxisAlignment.start,
              children: [
                Text(
                  unit.name,
                  style: const TextStyle(
                    fontSize: AppSize.s16,
                    fontWeight: FontWeight.w500,
                  ),
                ),
                Text(
                  unit.size,
                  style: TextStyle(
                    fontSize: AppSize.s14,
                    color: Colors.grey[600],
                  ),
                ),
              ],
            ),
          ),
          Switch(
            value: unit.isEnabled,
            onChanged: (value) {
              setState(() {
                unit.isEnabled = value;
              });
            },
            activeColor: ColorManager.teal,
          ),
        ],
      ),
    );
  }

  Widget _buildBottomNavigation() {
    return Container(
      padding: const EdgeInsets.all(AppPadding.p16),
      decoration: BoxDecoration(
        color: Colors.white,
        boxShadow: [
          BoxShadow(
            color: Colors.grey.withOpacity(0.2),
            spreadRadius: 1,
            blurRadius: 5,
          ),
        ],
      ),
      child: Row(
        mainAxisAlignment: MainAxisAlignment.spaceAround,
        children: [
          _buildNavItem('Title', false),
          _buildNavItem('Title', true),
          _buildNavItem('Title', false),
          _buildNavItem('Title', false),
        ],
      ),
    );
  }

  Widget _buildNavItem(String title, bool isSelected) {
    return Column(
      mainAxisSize: MainAxisSize.min,
      children: [
        Container(
          width: AppSize.s8,
          height: AppSize.s8,
          decoration: BoxDecoration(
            shape: BoxShape.circle,
            color: isSelected ? Colors.purple : Colors.transparent,
          ),
        ),
        const SizedBox(height: AppSize.s4),
        Text(
          title,
          style: TextStyle(
            color: isSelected ? Colors.purple : Colors.grey,
            fontSize: AppSize.s12,
          ),
        ),
      ],
    );
  }
}

class KnowledgeUnit {
  final String name;
  final String size;
  bool isEnabled;

  KnowledgeUnit({
    required this.name,
    required this.size,
    required this.isEnabled,
  });
}

================
File: presentation/knowledge/knowledge_edit/knowledge_edit.dart
================
import 'package:flutter/material.dart';
import 'package:jarvis/presentation/common/bottom_navigation.dart';
import 'package:jarvis/presentation/common/chat_input_box.dart';
import 'package:jarvis/presentation/common/custome_header_bar.dart';
import 'package:jarvis/presentation/resources/color_manager.dart';
import 'package:jarvis/presentation/resources/font_manager.dart';
import 'package:jarvis/presentation/resources/values_manager.dart';

class EditKnowledgeView extends StatefulWidget {
  @override
  State<EditKnowledgeView> createState() => _EditKnowledgeViewState();
}

class _EditKnowledgeViewState extends State<EditKnowledgeView> {
  final TextEditingController _nameController = TextEditingController();
  final TextEditingController _descriptionController = TextEditingController();

  @override
  void dispose() {
    _nameController.dispose();
    _descriptionController.dispose();
    super.dispose();
  }

  @override
  Widget build(BuildContext context) {
    return Dialog(
      insetPadding: const EdgeInsets.symmetric(horizontal: AppPadding.p16),
      shape: RoundedRectangleBorder(
        borderRadius: BorderRadius.circular(AppSize.s20),
      ),
      child: Container(
        padding: const EdgeInsets.all(AppPadding.p20),
        child: Column(
          mainAxisSize: MainAxisSize.min,
          children: [
            const Text(
              'Edit knowledge',
              style: TextStyle(
                fontSize: AppSize.s20,
                fontWeight: FontWeight.bold,
              ),
            ),
            const SizedBox(height: AppSize.s20),
            Container(
              width: AppSize.s60,
              height: AppSize.s60,
              decoration: BoxDecoration(
                color: ColorManager.teal.withOpacity(0.1),
                borderRadius: BorderRadius.circular(AppSize.s12),
              ),
              child: Icon(
                Icons.layers_outlined,
                size: AppSize.s32,
                color: ColorManager.teal,
              ),
            ),
            const SizedBox(height: AppSize.s20),
            Column(
              crossAxisAlignment: CrossAxisAlignment.start,
              children: [
                const Text(
                  'Name',
                  style: TextStyle(
                    fontSize: AppSize.s16,
                    fontWeight: FontWeight.w500,
                  ),
                ),
                const SizedBox(height: AppSize.s8),
                TextField(
                  controller: _nameController,
                  decoration: InputDecoration(
                    hintText: 'Input name',
                    hintStyle: TextStyle(
                      color: Colors.grey[400],
                    ),
                    filled: true,
                    fillColor: Colors.grey[50],
                    border: OutlineInputBorder(
                      borderRadius: BorderRadius.circular(AppSize.s12),
                      borderSide: BorderSide.none,
                    ),
                    contentPadding: const EdgeInsets.symmetric(
                      horizontal: AppPadding.p16,
                      vertical: AppPadding.p12,
                    ),
                  ),
                ),
              ],
            ),
            const SizedBox(height: AppSize.s16),
            Column(
              crossAxisAlignment: CrossAxisAlignment.start,
              children: [
                const Text(
                  'Description',
                  style: TextStyle(
                    fontSize: AppSize.s16,
                    fontWeight: FontWeight.w500,
                  ),
                ),
                const SizedBox(height: AppSize.s8),
                TextField(
                  controller: _descriptionController,
                  decoration: InputDecoration(
                    hintText: 'Input description',
                    hintStyle: TextStyle(
                      color: Colors.grey[400],
                    ),
                    filled: true,
                    fillColor: Colors.grey[50],
                    border: OutlineInputBorder(
                      borderRadius: BorderRadius.circular(AppSize.s12),
                      borderSide: BorderSide.none,
                    ),
                    contentPadding: const EdgeInsets.symmetric(
                      horizontal: AppPadding.p16,
                      vertical: AppPadding.p12,
                    ),
                  ),
                ),
              ],
            ),
            const SizedBox(height: AppSize.s24),
            Row(
              children: [
                Expanded(
                  child: TextButton(
                    onPressed: () {
                      Navigator.pop(context);
                    },
                    style: TextButton.styleFrom(
                      padding: const EdgeInsets.symmetric(vertical: AppPadding.p12),
                      shape: RoundedRectangleBorder(
                        borderRadius: BorderRadius.circular(AppSize.s12),
                      ),
                      backgroundColor: ColorManager.teal.withOpacity(0.1),
                    ),
                    child: Text(
                      'Cancel',
                      style: TextStyle(
                        color: ColorManager.teal,
                        fontSize: AppSize.s16,
                      ),
                    ),
                  ),
                ),
                const SizedBox(width: AppSize.s16),
                Expanded(
                  child: ElevatedButton(
                    onPressed: () {
                      // Handle confirm action
                      if (_nameController.text.isNotEmpty) {
                        Navigator.pop(context, {
                          'name': _nameController.text,
                          'description': _descriptionController.text,
                        });
                      }
                    },
                    style: ElevatedButton.styleFrom(
                      padding: const EdgeInsets.symmetric(vertical: AppPadding.p12),
                      backgroundColor: ColorManager.teal,
                      shape: RoundedRectangleBorder(
                        borderRadius: BorderRadius.circular(AppSize.s12),
                      ),
                    ),
                    child: const Text(
                      'Confirm',
                      style: TextStyle(
                        color: Colors.white,
                        fontSize: AppSize.s16,
                      ),
                    ),
                  ),
                ),
              ],
            ),
          ],
        ),
      ),
    );
  }
}

================
File: presentation/knowledge/knowledge_view.dart
================
import 'package:flutter/material.dart';
import 'package:jarvis/presentation/common/bottom_navigation.dart';
import 'package:jarvis/presentation/common/chat_input_box.dart';
import 'package:jarvis/presentation/common/custome_header_bar.dart';
import 'package:jarvis/presentation/knowledge/knowledge_create/knowledge_create.dart';
import 'package:jarvis/presentation/knowledge/knowledge_delete/knowledge_delete.dart';
import 'package:jarvis/presentation/knowledge/knowledge_detail/knowledge_detail.dart';
import 'package:jarvis/presentation/knowledge/knowledge_edit/knowledge_edit.dart';
import 'package:jarvis/presentation/resources/color_manager.dart';
import 'package:jarvis/presentation/resources/font_manager.dart';
import 'package:jarvis/presentation/resources/route_manager.dart';
import 'package:jarvis/presentation/resources/values_manager.dart';

class KnowledgeView extends StatefulWidget {
  @override
  State<KnowledgeView> createState() => _KnowledgeViewState();
}

class _KnowledgeViewState extends State<KnowledgeView> {
  final TextEditingController _searchController = TextEditingController();

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      backgroundColor: ColorManager.white,
      appBar: CustomHeaderBar(
        centerWidget: const Text(
          'Knowledge',
          style: TextStyle(
            color: Colors.white,
            fontSize: AppSize.s20,
            fontWeight: FontWeightManager.semiBold,
          ),
        ),
        actions: [
          Padding(
            padding: EdgeInsets.all(AppSize.s6),
            child: Center(
              child: ElevatedButton(
                style: ElevatedButton.styleFrom(
                  foregroundColor: Colors.white,
                  backgroundColor: ColorManager.teal,
                  padding: EdgeInsets.symmetric(horizontal: AppSize.s8, vertical: AppSize.s6),
                  shape: RoundedRectangleBorder(
                    borderRadius: BorderRadius.circular(30),
                  ),
                ),
                onPressed: () {
                  showDialog(context: context, builder: (builder) => CreateKnowledgeView());
                },
                child: Row(
                  children: [
                    Icon(
                      Icons.add,
                      size: 14,
                    ),
                    const SizedBox(width: 4,),
                    Text(
                      'Create',
                      style: TextStyle(
                        fontSize: 14,
                        fontWeight: FontWeight.w500,
                      ),
                    ),
                  ],
                ),
              ),
            ),
          ),
        ],
        centerTitle: true,
      ),
      body: Container(
        color: Colors.teal[50],
        child: Column(
          children: [
            Padding(
              padding: const EdgeInsets.only(top: 18, bottom: 10, right: 10, left: 10),
              child: Row(
                children: [
                  Expanded(
                    child: TextField(
                      decoration: InputDecoration(
                        hintText: 'Search',
                        prefixIcon: Icon(Icons.search),
                        suffixIcon: IconButton(
                          icon: Icon(Icons.mic),
                          onPressed: () {
                          },
                        ),
                        fillColor: Colors.white,
                        filled: true,
                        border: OutlineInputBorder(
                          borderRadius: BorderRadius.circular(40.0),
                        ),
                        enabledBorder: OutlineInputBorder(
                          borderRadius: BorderRadius.circular(40.0),
                          borderSide: BorderSide(color: Colors.grey),
                        ),
                        focusedBorder: OutlineInputBorder(
                          borderRadius: BorderRadius.circular(40.0),
                          borderSide: BorderSide(color: ColorManager.teal),
                        ),
                      ),
                    ),
                  ),
                ],
              ),
            ),
            Expanded(
              child: ListView.builder(
                itemCount: 4,
                itemBuilder: (context, index) {
                  return Container(
                    margin: EdgeInsets.symmetric(vertical: AppSize.s6, horizontal: AppSize.s8),
                    padding: EdgeInsets.all(AppSize.s8),
                    decoration: BoxDecoration(
                      color: Colors.white,
                      borderRadius: BorderRadius.circular(AppSize.s12),
                      boxShadow: [
                        BoxShadow(
                          color: Colors.grey.withOpacity(0.2),
                          spreadRadius: 1,
                          blurRadius: 4,
                          offset: Offset(0, 2),
                        ),
                      ],
                    ),
                    child: ListTile(
                      minTileHeight: AppSize.s40,
                      leading: CircleAvatar(
                        child: Icon(Icons.article_outlined),
                      ),
                      title: Text("Title",
                        style: TextStyle(
                        fontWeight: FontWeight.bold,
                        fontSize: AppSize.s14,
                      ),),
                      subtitle: Text('Description',
                        style: TextStyle(
                        fontSize: AppSize.s14,
                        color: Colors.grey,
                      ),),
                      trailing: IconButton(
                        icon: Icon(Icons.more_vert),
                        onPressed: () {
                          _showActions(context);
                        },
                        color: Colors.grey,
                      ),
                      contentPadding: EdgeInsets.only(left: AppSize.s8),
                      onTap: () {
                        Navigator.of(context).pushNamed(Routes.detailKnowledgeRoute);
                      },
                    ),
                  );
                },
              ),
            ),
          ],
        ),
      ),
    );
  }

  void _showActions(BuildContext context) {
    showModalBottomSheet(
      context: context,
      builder: (context) {
        return Container(
          padding: EdgeInsets.all(16.0),
          child: Column(
            mainAxisSize: MainAxisSize.min,
            children: [
              ListTile(
                leading: Icon(Icons.edit),
                title: Text('Edit'),
                onTap: () {
                  Navigator.pop(context);
                  showDialog(context: context, builder: (builder) => EditKnowledgeView());
                },
              ),
              ListTile(
                leading: Icon(Icons.delete),
                title: Text('Delete'),
                onTap: () {
                  Navigator.pop(context);
                  showDialog(context: context, builder: (builder) => DeleteKnowledgeView());
                },
              ),
            ],
          ),
        );
      },
    );
  }
}

================
File: presentation/main/main_view.dart
================
import 'package:flutter/material.dart';
import 'package:jarvis/presentation/chat/chat_view.dart';
import 'package:jarvis/presentation/chatbot/main_chatbot_view.dart';
import 'package:jarvis/presentation/common/bottom_navigation.dart';
import 'package:jarvis/presentation/knowledge/knowledge_view.dart';
import 'package:jarvis/presentation/prompt/main_prompt_view.dart';

class MainView extends StatefulWidget {
  const MainView({super.key});

  @override
  State<MainView> createState() => _MainViewState();
}

class _MainViewState extends State<MainView> {
  int _currentIndex = 0;

  List<Widget> body = [
    const ChatView(),
    const ChatBotMainView(),
    const PromptView(),
     KnowledgeView(),
  ];

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      body: body[_currentIndex],
      bottomNavigationBar: BottomNavigation(
        currentIndex: _currentIndex,
        onTap: _onItemTapped,
      ),
    );
  }

  void _onItemTapped(int index) {
    setState(() {
      _currentIndex = index;
    });
  }
}

================
File: presentation/profile/detail_profile_view.dart
================
import 'package:flutter/material.dart';
import 'package:jarvis/presentation/authencation/sign_out/sign_out.dart';
import 'package:jarvis/presentation/common/custome_header_bar.dart';

class DetailProfileView extends StatelessWidget {
  const DetailProfileView({super.key});

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      backgroundColor: Colors.white,
      appBar: CustomHeaderBar(
        centerWidget: const Text(
          'Profile',
          style: TextStyle(
            color: Colors.white,
            fontSize: 20.0,
            fontWeight: FontWeight.bold,
          ),
        ),
        centerTitle: true,
        leading: IconButton(
          icon: const Icon(Icons.arrow_back, color: Colors.white),
          onPressed: () {
            Navigator.pop(context);
          },
        ),
      ),
      body: SafeArea(
        child: SingleChildScrollView(
          child: Column(
            children: [
              Container(
                padding: const EdgeInsets.only(top: 20.0),
                child: const Column(
                  children: [
                    CircleAvatar(
                      radius: 40.0,
                      backgroundImage: AssetImage('assets/images/avt.png'),
                    ),

                    SizedBox(height: 5.0),
                    Text(
                      'Click to change avatar',
                      style: TextStyle(
                        fontSize: 14.0,
                        color: Colors.grey,
                      ),
                    ),
                    SizedBox(height: 10.0),
                  ],
                ),
              ),
              const SizedBox(height: 20.0),
              _buildEditableField('Name', 'Hoang Thanh Nam', context),
              _buildEditableField('Email', 'htn1515@gmail.com', context),
              _buildEditableField('User ID', 'abdju39rjfmks9wu', context, editable: false),
              _buildEditableField('Delete Account', '', context, isDelete: true),
              const SizedBox(height: 20.0),
            ],
          ),
        ),
      ),
      bottomNavigationBar: Padding(
        padding: const EdgeInsets.all(20.0),
        child: ElevatedButton(
          style: ElevatedButton.styleFrom(
            backgroundColor: Colors.red.shade100,
            foregroundColor: Colors.red,
            shape: RoundedRectangleBorder(
              borderRadius: BorderRadius.circular(10.0),
            ),
          ),
          onPressed: () {
            Navigator.push(context, MaterialPageRoute(builder: (_) => const SignOutView()));
          },
          child: const Text('Log out',style: TextStyle(
            fontWeight: FontWeight.w600,
            fontSize: 14.0,
          ),),
        ),
      ),
    );
  }

  Widget _buildEditableField(String title, String value, BuildContext context, {bool editable = true, bool isDelete = false}) {
    return Padding(
      padding: const EdgeInsets.symmetric(horizontal: 20.0, vertical: 10.0),
      child: Container(
        padding: const EdgeInsets.symmetric(horizontal: 16.0),
        decoration: BoxDecoration(
          color: Colors.teal.shade50,
          borderRadius: BorderRadius.circular(10.0),
        ),
        height: 50.0,
        child: Row(
          mainAxisAlignment: MainAxisAlignment.spaceBetween,
          children: [
            Text(
              title,
              style: const TextStyle(
                fontWeight: FontWeight.w600,
                color: Colors.black,
              ),
            ),
            if (!isDelete) ...[
              Row(
                children: [
                  Text(
                    value,
                    style: const TextStyle(
                      color: Colors.grey,
                    ),
                  ),
                  editable
                      ? const Padding(
                    padding: EdgeInsets.only(left: 8.0),
                    child: Icon(
                      Icons.arrow_forward_ios,
                      size: 16.0,
                      color: Colors.grey,
                    ),
                  )
                      : Padding(
                    padding: const EdgeInsets.only(left: 8.0),
                    child: IconButton(
                      icon: const Icon(Icons.copy, size: 20.0, color: Colors.grey),
                      onPressed: () {
                        // Copy User ID to clipboard
                        ScaffoldMessenger.of(context).showSnackBar(
                          SnackBar(content: Text('$title copied to clipboard')),
                        );
                      },
                    ),
                  ),
                ],
              ),
            ]
          ],
        ),
      ),
    );
  }
}

================
File: presentation/profile/profile_view.dart
================
import 'package:flutter/material.dart';
import 'package:jarvis/presentation/common/custome_header_bar.dart';
import 'package:jarvis/presentation/resources/route_manager.dart';

class ProfileView extends StatelessWidget {
  const ProfileView({super.key});

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      backgroundColor: Colors.white,
      appBar: CustomHeaderBar(
        leading: IconButton(
          icon: Icon(Icons.arrow_back, color: Colors.white),
          onPressed: () {
            Navigator.pop(context);
          },
        ),
      ),
      body: SafeArea(
        child: SingleChildScrollView(
          child: Column(
            children: [
              Container(
                padding: EdgeInsets.only(top: 20.0),
                child: Column(
                  children: [
                    CircleAvatar(
                      radius: 40.0,
                      backgroundImage: AssetImage('assets/images/avt.png'),
                    ),
                    SizedBox(height: 10.0),
                    InkWell(
                      onTap: () {
                        Navigator.pushNamed(context, Routes.detailProfileRoute);
                      },
                      child: Row(
                        mainAxisAlignment: MainAxisAlignment.center,
                        children: [
                          Text(
                            'Hoang Thanh Nam',
                            style: TextStyle(
                              fontSize: 24.0,
                              fontWeight: FontWeight.bold,
                              color: Colors.black,
                            ),
                          ),
                          SizedBox(width: 5.0),
                          Icon(
                            Icons.arrow_forward_ios,
                            size: 16.0,
                            color: Colors.grey,
                          ),
                        ],
                      ),
                    ),
                    SizedBox(height: 5.0),
                    Text(
                      'htn15151@gmail.com',
                      style: TextStyle(
                        fontSize: 16.0,
                        color: Colors.grey,
                      ),
                    ),
                    SizedBox(height: 10.0),
                  ],
                ),
              ),
              _buildSectionTitle('General'),
              _buildListTile('Chat settings', Icons.chat),
              _buildListTile('Color scheme', Icons.color_lens),
              _buildListTile('Language', Icons.language),
              _buildSectionTitle('Other'),
              _buildListTile('Memory', Icons.memory),
              _buildListTile('Browser settings', Icons.public),
              _buildSectionTitle('About'),
              _buildListTile('Rate us', Icons.star_rate),
              _buildListTile('Share', Icons.share),
              _buildListTile('Contact us', Icons.contact_phone),
              _buildListTile('About', Icons.info),
            ],
          ),
        ),
      ),
    );
  }

  Widget _buildSectionTitle(String title) {
    return Padding(
      padding: const EdgeInsets.symmetric(horizontal: 20.0, vertical: 10.0),
      child: Align(
        alignment: Alignment.centerLeft,
        child: Text(
          title,
          style: TextStyle(
            fontWeight: FontWeight.bold,
            fontSize: 16.0,
            color: Colors.grey,
          ),
        ),
      ),
    );
  }

  Widget _buildListTile(String title, IconData icon) {
    return Padding(
      padding: const EdgeInsets.symmetric(horizontal: 20.0, vertical: 5.0),
      child: Container(
        decoration: BoxDecoration(
          borderRadius: BorderRadius.circular(15.0),
          color: Colors.teal.shade50, // Màu nền
        ),
        child: ListTile(
            contentPadding: EdgeInsets.symmetric(horizontal: 16.0, vertical: 0.0), // Padding cho ListTile
            leading: Icon(icon, color: Colors.black),
            title: Text(title),
            trailing:
            Icon(
              Icons.arrow_forward_ios,
              size: 18.0,
              color: Colors.grey,
            )
        ),
      ),
    );
  }
}

================
File: presentation/prompt/create_prompt/create_prompt_view.dart
================
import 'package:flutter/material.dart';
import 'package:get_it/get_it.dart';
import 'package:jarvis/presentation/common/animated_toggle_tab/animated_toggle_tab.dart';
import 'package:jarvis/presentation/common/dialog_util.dart';
import 'package:jarvis/presentation/resources/color_manager.dart';
import 'package:jarvis/presentation/resources/font_manager.dart';
import 'package:jarvis/presentation/resources/values_manager.dart';

import '../main_prompt_view.dart';

class CreatePromptView extends StatefulWidget {
  const CreatePromptView({super.key});

  @override
  State<CreatePromptView> createState() => _CreatePromptViewState();
}

class _CreatePromptViewState extends State<CreatePromptView> {
  bool _isPublicPrompts = false;
  final _formKey = GlobalKey<FormState>();
  final _titleController = TextEditingController();
  final _descriptionController = TextEditingController();
  final _contentController = TextEditingController();
  String _selectedCategory = 'other';
  bool _isLoading = false;

  @override
  void dispose() {
    _titleController.dispose();
    _descriptionController.dispose();
    _contentController.dispose();
    super.dispose();
  }

  Future<void> _createPrompt() async {
    if (!_formKey.currentState!.validate()) return;

    setState(() => _isLoading = true);

    try {
      await GetIt.instance<PromptViewModel>().createPrompt(
          _titleController.text,
          _contentController.text,
          _descriptionController.text,
          _selectedCategory,
          'English', // Default language
          _isPublicPrompts
      );

      Navigator.pop(context);
      showCustomDialog(
        context: context,
        type: DialogType.success,
        title: 'Success',
        message: 'Prompt created successfully',
      );
    } catch (e) {
      showCustomDialog(
        context: context,
        type: DialogType.error,
        title: 'Error',
        message: 'Failed to create prompt: $e',
      );
    } finally {
      setState(() => _isLoading = false);
    }
  }

  @override
  Widget build(BuildContext context) {
    return Dialog(
      shape: RoundedRectangleBorder(
        borderRadius: BorderRadius.circular(16.0),
      ),
      child: Container(
        padding: const EdgeInsets.all(AppSize.s16),
        width: 700,
        child: Form(
          key: _formKey,
          child: SingleChildScrollView(
            child: Column(
              mainAxisSize: MainAxisSize.min,
              crossAxisAlignment: CrossAxisAlignment.center,
              children: [
                const Text(
                  "New Prompt",
                  style: TextStyle(
                    fontWeight: FontWeightManager.bold,
                    fontSize: AppSize.s16,
                    fontFamily: FontConstants.fontFamily,
                  ),
                ),
                Padding(
                  padding: const EdgeInsets.only(top: AppSize.s8),
                  child: AppinioAnimatedToggleTab(
                    callback: (int i) {
                      setState(() => _isPublicPrompts = i == 1);
                    },
                    tabTexts: const [
                      'Private Prompt',
                      'Public Prompt',
                    ],
                    height: 40,
                    width: 300,
                    boxDecoration: BoxDecoration(
                      color: ColorManager.primary,
                      borderRadius: BorderRadius.circular(AppSize.s8),
                    ),
                    animatedBoxDecoration: BoxDecoration(
                      boxShadow: [
                        BoxShadow(
                          color: const Color(0xFFc3d2db).withOpacity(0.1),
                          spreadRadius: 1,
                          blurRadius: 5,
                          offset: const Offset(2, 2),
                        ),
                      ],
                      color: ColorManager.white,
                      borderRadius: const BorderRadius.all(
                        Radius.circular(AppSize.s8),
                      ),
                      border: Border.all(
                        color: Colors.grey,
                        width: 1,
                      ),
                    ),
                    activeStyle: const TextStyle(color: Colors.blue),
                    inactiveStyle: const TextStyle(color: Colors.black),
                  ),
                ),
                const SizedBox(height: AppSize.s16),
                TextFormField(
                  controller: _titleController,
                  decoration: const InputDecoration(
                    labelText: 'Name *',
                    hintText: 'Name of the prompt',
                  ),
                  validator: (value) {
                    if (value?.isEmpty ?? true) {
                      return 'Please enter a name';
                    }
                    return null;
                  },
                ),
                const SizedBox(height: AppSize.s16),
                DropdownButtonFormField<String>(
                    value: _selectedCategory,
                    decoration: const InputDecoration(
                      labelText: 'Category *',
                    ),
                    items: const [
                      DropdownMenuItem(value: 'other', child: Text('Other')),
                      DropdownMenuItem(value: 'marketing', child: Text('Marketing')),
                      DropdownMenuItem(value: 'business', child: Text('Business')),
                      DropdownMenuItem(value: 'writing', child: Text('Writing')),
                      DropdownMenuItem(value: 'coding', child: Text('Coding')),
                    ],
                    onChanged: (value) {
                      setState(() => _selectedCategory = value ?? 'other');
                    },
                  ),
                const SizedBox(height: AppSize.s16),
                TextFormField(
                  controller: _descriptionController,
                  maxLines: 3,
                  decoration: const InputDecoration(
                    labelText: 'Description *',
                    hintText: 'Describe your prompt',
                  ),
                  validator: (value) {
                    if (value?.isEmpty ?? true) {
                      return 'Please enter a description';
                    }
                    return null;
                  },
                ),
                const SizedBox(height: AppSize.s16),
                TextFormField(
                  controller: _contentController,
                  maxLines: 5,
                  decoration: const InputDecoration(
                    labelText: 'Prompt *',
                    hintText: 'Enter prompt content',
                  ),
                  validator: (value) {
                    if (value?.isEmpty ?? true) {
                      return 'Please enter prompt content';
                    }
                    return null;
                  },
                ),
                const SizedBox(height: AppSize.s16),
                Row(
                  mainAxisAlignment: MainAxisAlignment.end,
                  children: [
                    TextButton(
                      onPressed: _isLoading ? null : () {
                        Navigator.of(context).pop();
                      },
                      child: const Text('Cancel'),
                    ),
                    const SizedBox(width: AppSize.s8),
                    ElevatedButton(
                      onPressed: _isLoading ? null : _createPrompt,
                      child: _isLoading
                          ? const SizedBox(
                        width: 20,
                        height: 20,
                        child: CircularProgressIndicator(strokeWidth: 2),
                      )
                          : const Text('Create'),
                    ),
                  ],
                ),
              ],
            ),
          ),
        ),
      ),
    );
  }
}

================
File: presentation/prompt/edit_prompt/edit_prompt_view.dart
================
import 'package:flutter/material.dart';
import 'package:get_it/get_it.dart';
import 'package:jarvis/presentation/common/custome_header_bar.dart';
import 'package:jarvis/presentation/resources/color_manager.dart';
import 'package:jarvis/presentation/resources/values_manager.dart';

import '../../../domain/model/prompt.dart';
import '../main_prompt_view.dart';


class EditPromptView extends StatefulWidget {
  final Prompt prompt;
  const EditPromptView({required this.prompt, super.key});

  @override
  State<EditPromptView> createState() => _EditPromptViewState();
}

class _EditPromptViewState extends State<EditPromptView> {
  final _formKey = GlobalKey<FormState>();
  late final TextEditingController _titleController;
  late final TextEditingController _descriptionController;
  late final TextEditingController _categoryController;
  late final TextEditingController _contentController;


  late bool _isPublic;
  bool _isLoading = false;

  @override
  void initState() {
    super.initState();
    _contentController = TextEditingController(text: widget.prompt.content);
    _titleController = TextEditingController(text: widget.prompt.title);
    _descriptionController = TextEditingController(text: widget.prompt.description);
    _categoryController = TextEditingController(text: widget.prompt.category);
    _isPublic = widget.prompt.isPublic;
  }

  @override
  void dispose() {
    _contentController.dispose();
    _titleController.dispose();
    _descriptionController.dispose();
    _categoryController.dispose();
    super.dispose();
  }

  void _handleUpdate() async {
    if (!_formKey.currentState!.validate()) return;

    setState(() => _isLoading = true);

    try {
      await GetIt.instance<PromptViewModel>().updatePrompt(
          widget.prompt.id,
          _titleController.text,
          _contentController.text,
          _descriptionController.text,
          _categoryController.text,
          _isPublic,
          'English'
      );

      if (mounted) {
        Navigator.pop(context);
        ScaffoldMessenger.of(context).showSnackBar(
            const SnackBar(content: Text('Prompt updated successfully'))
        );
      }
    } catch (e) {
      if (mounted) {
        ScaffoldMessenger.of(context).showSnackBar(
            SnackBar(content: Text('Error updating prompt: $e'))
        );
      }
    } finally {
      if (mounted) {
        setState(() => _isLoading = false);
      }
    }
  }

  @override
  Widget build(BuildContext context) {
    return Dialog(
      child: Container(
        padding: const EdgeInsets.all(AppPadding.p20),
        child: Form(
          key: _formKey,
          child: Column(
            mainAxisSize: MainAxisSize.min,
            children: [
              const Text(
                'Edit Prompt',
                style: TextStyle(
                  fontSize: AppSize.s20,
                  fontWeight: FontWeight.bold,
                ),
              ),
              const SizedBox(height: AppSize.s20),
              TextFormField(
                controller: _titleController,
                decoration: const InputDecoration(labelText: 'Title'),
                validator: (value) => value?.isEmpty ?? true ? 'Required' : null,
              ),
              const SizedBox(height: AppSize.s16),
              TextFormField(
                controller: _descriptionController,
                decoration: const InputDecoration(labelText: 'Description'),
                validator: (value) => value?.isEmpty ?? true ? 'Required' : null,
              ),
              const SizedBox(height: AppSize.s16),
              TextFormField(
                controller: _contentController,
                decoration: const InputDecoration(labelText: 'Content'),
                validator: (value) => value?.isEmpty ?? true ? 'Required' : null,
              ),
              const SizedBox(height: AppSize.s16),
              TextFormField(
                controller: _categoryController,
                decoration: const InputDecoration(labelText: 'Category'),
                validator: (value) => value?.isEmpty ?? true ? 'Required' : null,
              ),
              const SizedBox(height: AppSize.s16),
              SwitchListTile(
                title: const Text('Public'),
                value: _isPublic,
                onChanged: (bool value) {
                  setState(() => _isPublic = value);
                },
              ),
              const SizedBox(height: AppSize.s24),
              Row(
                children: [
                  Expanded(
                    child: TextButton(
                      onPressed: _isLoading ? null : () => Navigator.pop(context),
                      style: TextButton.styleFrom(
                        foregroundColor: ColorManager.teal,
                        padding: const EdgeInsets.symmetric(vertical: AppPadding.p12),
                        backgroundColor: ColorManager.teal.withOpacity(0.1),
                      ),
                      child: const Text('Cancel'),
                    ),
                  ),
                  const SizedBox(width: AppSize.s16),
                  Expanded(
                    child: ElevatedButton(
                      onPressed: _isLoading ? null : _handleUpdate,
                      style: ElevatedButton.styleFrom(
                        backgroundColor: ColorManager.teal,
                        padding: const EdgeInsets.symmetric(vertical: AppPadding.p12),
                      ),
                      child: _isLoading
                          ? const CircularProgressIndicator()
                          : const Text('Update'),
                    ),
                  ),
                ],
              ),
            ],
          ),
        ),
      ),
    );
  }
}

================
File: presentation/prompt/main_prompt_view.dart
================
import 'dart:async';
import 'dart:developer';

import 'package:flutter/material.dart';
import 'package:freezed_annotation/freezed_annotation.dart';
import 'package:get_it/get_it.dart';
import 'package:jarvis/domain/usecase/delete_prompt_usecase.dart';
import 'package:jarvis/domain/usecase/update%20_prompt_usecase.dart';
import 'package:jarvis/presentation/common/animated_toggle_tab/animated_toggle_tab.dart';
import 'package:jarvis/presentation/common/custome_header_bar.dart';
import 'package:jarvis/presentation/prompt/create_prompt/create_prompt_view.dart';
import 'package:jarvis/presentation/prompt/edit_prompt/edit_prompt_view.dart';
import 'package:jarvis/presentation/resources/color_manager.dart';
import 'package:jarvis/presentation/resources/font_manager.dart';
import 'package:jarvis/presentation/resources/values_manager.dart';

import '../../data/request/request.dart';
import '../../domain/model/prompt.dart';
import '../../domain/usecase/create_prompt_usecase.dart';
import '../../domain/usecase/get_public_prompts_usecase.dart';
import '../base/baseviewmodel.dart';


class PromptView extends StatefulWidget {
  const PromptView({super.key});

  @override
  State<PromptView> createState() => _PromptViewState();
}

class _PromptViewState extends State<PromptView> {
  final TextEditingController _searchController = TextEditingController();
  String _currentCategory = 'All';
  int _selectedIndexTab = 0;
  bool _isPublicPrompts = false;
  late final PromptViewModel _viewModel;
  bool _isInitialized = false;

  @override
  void initState() {
    super.initState();
    _viewModel = GetIt.instance<PromptViewModel>();

    _searchController.addListener(() {
      if (!_searchController.text.isNotEmpty) {
        _viewModel.clearSearch();
      }
    });
  }

  @override
  void didChangeDependencies() {
    super.didChangeDependencies();
    if (!_isInitialized) {
      _viewModel.getPrivatePrompts(_currentCategory); // Add this
      _viewModel.getPrompts(_currentCategory);
      _isInitialized = true;
    }
  }

  // Danh sách dữ liệu cho các tab
  final List<List<String>> _myPromptDataTab = [
    ['MyPrompt A1', 'MyPrompt A2', 'MyPrompt A3','MyPrompt A1', 'MyPrompt A2', 'MyPrompt A3','MyPrompt A1', 'MyPrompt A2', 'MyPrompt A3','MyPrompt A1', 'MyPrompt A2', 'MyPrompt A3','MyPrompt A1', 'MyPrompt A2', 'MyPrompt A3'],
    ['MyPrompt B1', 'MyPrompt B2', 'MyPrompt B3'],
    ['MyPrompt C1', 'MyPrompt C2', 'MyPrompt C3'],
    ['MyPrompt D1', 'MyPrompt D2', 'MyPrompt D3'],
    ['MyPrompt E1', 'MyPrompt E2', 'MyPrompt E3'],
    ['MyPrompt A1', 'MyPrompt A2', 'MyPrompt A3'],
    ['MyPrompt B1', 'MyPrompt B2', 'MyPrompt B3'],
    ['MyPrompt C1', 'MyPrompt C2', 'MyPrompt C3'],
    ['MyPrompt D1', 'MyPrompt D2', 'MyPrompt D3'],
    ['MyPrompt E1', 'MyPrompt E2', 'MyPrompt E3'],
    ['MyPrompt A1', 'MyPrompt A2', 'MyPrompt A3'],
    ['MyPrompt B1', 'MyPrompt B2', 'MyPrompt B3'],
    ['MyPrompt C1', 'MyPrompt C2', 'MyPrompt C3'],
    ['MyPrompt D1', 'MyPrompt D2', 'MyPrompt D3'],
    ['MyPrompt E1', 'MyPrompt E2', 'MyPrompt E3'],
  ];

  final List<List<String>> _publicPromptDataTab = [
    ['Public Prompt 1', 'Public Prompt 2', 'Public Prompt 3'],
    ['Public Prompt 11', 'Public Prompt 22', 'Public Prompt 33'],
  ];

  @override
  Widget build(BuildContext context) {

    return Scaffold(
      appBar: CustomHeaderBar(
        centerTitle: true,
        centerWidget: const Text(
          "Prompt Libraries",
          style: TextStyle(
            fontSize: AppSize.s20,
            fontWeight: FontWeightManager.semiBold,
          ),
        ),
        actions: [
          IconButton(
            icon: Icon(Icons.star),
            onPressed: () {
              showDialog(
                context: context,
                builder: (context) => FavoritePromptsModal(viewModel: _viewModel),
              );
            },
          ),
          Padding(
            padding: EdgeInsets.all(AppSize.s6),
            child: Center(
              child: ElevatedButton(
                style: ElevatedButton.styleFrom(
                  foregroundColor: Colors.white,
                  backgroundColor: ColorManager.teal,
                  padding: EdgeInsets.symmetric(horizontal: AppSize.s8, vertical: AppSize.s6),
                  shape: RoundedRectangleBorder(
                    borderRadius: BorderRadius.circular(30),
                  ),
                ),
                onPressed: () {
                  showDialog(
                    context: context,
                    builder: (BuildContext context) {
                      return const CreatePromptView();
                    },
                  );
                },
                child: Row(
                  children: [
                    Icon(
                      Icons.add,
                      size: 14,
                    ),
                    const SizedBox(width: 4,),
                    Text(
                      'Create',
                      style: TextStyle(
                        fontSize: 14,
                        fontWeight: FontWeight.w500,
                      ),
                    ),
                  ],
                ),
              ),
            ),
          ),
        ],
      ),
      body: Container(
        color: Colors.teal[50],
        child: Column(
          children: [
            Padding(
              padding: const EdgeInsets.only(top: AppSize.s12),
              child:  AppinioAnimatedToggleTab(
                callback: (int i) {
                  setState(() {
                    _isPublicPrompts = i == 1;
                    _viewModel.setPublicMode(i == 1);
                  });
                },
                tabTexts: const [
                  'My Prompts',
                  'Public Prompts',
                ],
                height: 50,
                width: 405,
                boxDecoration: BoxDecoration(
                  color: Colors.white,
                  borderRadius: BorderRadius.circular(AppSize.s8),
                ),
                animatedBoxDecoration: BoxDecoration(
                  boxShadow: [
                    BoxShadow(
                      color: const Color(0xFFc3d2db).withOpacity(0.1),
                      spreadRadius: 1,
                      blurRadius: 5,
                      offset: const Offset(2, 2),
                    ),
                  ],
                  color: ColorManager.teal,
                  borderRadius: const BorderRadius.all(
                    Radius.circular(AppSize.s8),
                  ),
                  border: Border.all(
                    color: Colors.white,
                    width: 1,
                  ),
                ),
                activeStyle: const TextStyle(
                  color: Colors.white,
                ),
                inactiveStyle: const TextStyle(
                  color: Colors.black,
                ),
              ),
            ),
            // Thanh tìm kiếm
            Padding(
              padding: const EdgeInsets.all(12.0),
              child: Row(
                children: [
                  Expanded(
                    child: TextField(
                      controller: _searchController,
                      decoration: InputDecoration(
                        hintText: 'Search',
                        prefixIcon: const Icon(Icons.search),
                        suffixIcon: _searchController.text.isNotEmpty
                            ? IconButton(
                          icon: const Icon(Icons.clear),
                          onPressed: () {
                            _searchController.clear();
                            _viewModel.clearSearch();
                          },
                        )
                            : null,
                        fillColor: Colors.white,
                        filled: true,
                        border: OutlineInputBorder(
                          borderRadius: BorderRadius.circular(40.0),
                        ),
                        enabledBorder: OutlineInputBorder(
                          borderRadius: BorderRadius.circular(40.0),
                          borderSide: BorderSide(color: Colors.grey),
                        ),
                        focusedBorder: OutlineInputBorder(
                          borderRadius: BorderRadius.circular(40.0),
                          borderSide: BorderSide(color: ColorManager.teal),
                        ),
                      ),
                      onSubmitted: (value) {
                        _executeSearch();
                      },
                    ),
                  ),
                  // Search Button
                  const SizedBox(width: 8),
                  ElevatedButton(
                    onPressed: _executeSearch,
                    style: ElevatedButton.styleFrom(
                      backgroundColor: ColorManager.teal,
                      shape: RoundedRectangleBorder(
                        borderRadius: BorderRadius.circular(20),
                      ),
                      padding: const EdgeInsets.symmetric(horizontal: 16, vertical: 13),
                    ),
                    child: const Text(
                      'Search',
                      style: TextStyle(
                        color: Colors.white,
                        fontSize: 14,
                        fontWeight: FontWeight.w500,
                      ),
                    ),
                  ),
                ],
              ),
            ),
            SizedBox(
              height: 40,
              child: ListView(
                scrollDirection: Axis.horizontal,
                children: _generateListTab(),
              ),
            ),
            Expanded(
              child: _generateListData(_isPublicPrompts ? _publicPromptDataTab : _myPromptDataTab),
            ),
          ],
        ),
      ),
    );
  }
  void _executeSearch() {
    _viewModel.setSearchQuery(_searchController.text);
    _viewModel.executeSearch();
  }


  void _showActions(BuildContext context,  Prompt prompt) {
    showModalBottomSheet(
      context: context,
      builder: (context) {
        return Container(
          padding: const EdgeInsets.all(16.0),
          child: Column(
            mainAxisSize: MainAxisSize.min,
            children: [
              ListTile(
                leading: const Icon(Icons.edit),
                title: const Text('Edit'),
                onTap: () {
                  Navigator.pop(context);
                  showDialog(
                    context: context,
                    builder: (context) => EditPromptView(prompt: prompt),
                  );
                },
              ),
              ListTile(
                leading: const Icon(Icons.delete),
                title: const Text('Delete'),
                onTap: () {
                  Navigator.pop(context);
                  _showDeleteConfirmation(context, prompt);
                },
              ),
            ],
          ),
        );
      },
    );
  }

  void _showDeleteConfirmation(BuildContext context, Prompt prompt) {
    showDialog(
      context: context,
      builder: (context) => AlertDialog(
        title: const Text('Delete Prompt'),
        content: Text('Are you sure you want to delete "${prompt.title}"?'),
        actions: [
          TextButton(
            onPressed: () => Navigator.pop(context),
            child: const Text('Cancel'),
          ),
          TextButton(
            onPressed: () {
              _viewModel.deletePrompt(prompt.id);
              Navigator.pop(context);
            },
            style: TextButton.styleFrom(foregroundColor: Colors.red),
            child: const Text('Delete'),
          ),
        ],
      ),
    );
  }

  List<Widget> _generateListTab() {
    final categories = _viewModel.getPromptCategories();
    return categories.map((category) {
      return StreamBuilder<String>(
          stream: _viewModel.currentCategoryStream,
          initialData: _viewModel.currentCategory,
          builder: (context, snapshot)
      {
        final bool isSelected = _currentCategory == category;
        return GestureDetector(
          onTap: () {
            setState(() {
              _currentCategory = category;
              _viewModel.setCurrentCategory(category);
            });
          },
          child: Container(
            padding: const EdgeInsets.symmetric(
                horizontal: 16.0, vertical: 10.0),
            margin: const EdgeInsets.symmetric(horizontal: 4.0),
            decoration: BoxDecoration(
              color: isSelected ? Colors.teal : Colors.white,
              borderRadius: BorderRadius.circular(16),
            ),
            child: Text(
              category,
              style: TextStyle(
                fontWeight: FontWeight.bold,
                color: isSelected ? Colors.white : Colors.black,
              ),
            ),
          ),
        );
      }
      );
    }).toList();
  }

  @override
  Widget _generateListData(List<List<String>> promptData) {
    final Stream<List<Prompt>> activeStream = _isPublicPrompts ?
    _viewModel.promptsStream :
    _viewModel.privatePromptsStream;
      return StreamBuilder<List<Prompt>>(
        stream: activeStream,
        builder: (context, snapshot) {
          if (snapshot.connectionState == ConnectionState.waiting && !snapshot.hasData) {
            return const Center(child: CircularProgressIndicator());
          }
          if (snapshot.hasError) {
            return Center(child: Text('Error: ${snapshot.error}'));
          }

          final prompts = snapshot.data ?? [];

          if (prompts.isEmpty) {
            return _buildEmptyState();
          }
          if (snapshot.hasData) {
            return ListView.builder(
              itemCount: prompts.length,
              itemBuilder: (context, index) => _buildPromptItem(prompts[index]),
            );
          }
          if (snapshot.hasError) {
            return const Center(child: Text('Error loading prompts'));
          }
          // Add a default return for loading state
          return const Center(child: CircularProgressIndicator());
        },
      );
    }

  Widget _buildEmptyState() {
    return Center(
      child: Column(
        mainAxisAlignment: MainAxisAlignment.center,
        children: [
          Icon(
            _searchController.text.isNotEmpty ? Icons.search_off : Icons.list,
            size: 48,
            color: Colors.grey[400],
          ),
          const SizedBox(height: 16),
          Text(
            _searchController.text.isNotEmpty
                ? 'No prompts found for "${_searchController.text}"'
                : 'No prompts found in this category',
            style: TextStyle(
              color: Colors.grey[600],
              fontSize: 16,
            ),
            textAlign: TextAlign.center,
          ),
          if (_searchController.text.isNotEmpty) ...[
            const SizedBox(height: 16),
            TextButton.icon(
              onPressed: () {
                _searchController.clear();
                _viewModel.clearSearch();
              },
              icon: const Icon(Icons.refresh),
              label: const Text('Clear Search'),
            ),
          ],
        ],
      ),
    );
  }

  Widget _buildPromptItem(Prompt prompt) {
    return Container(
      margin: const EdgeInsets.symmetric(vertical: AppSize.s6, horizontal: AppSize.s8),
      padding: const EdgeInsets.all(AppSize.s4),
      decoration: BoxDecoration(
        color: Colors.white,
        borderRadius: BorderRadius.circular(AppSize.s12),
        boxShadow: [
          BoxShadow(
            color: Colors.grey.withOpacity(0.2),
            spreadRadius: 1,
            blurRadius: 4,
            offset: const Offset(0, 2),
          ),
        ],
      ),
      child: ListTile(
        title: Text(
          prompt.title,
          style: const TextStyle(
            fontWeight: FontWeight.bold,
            fontSize: AppSize.s14,
          ),
        ),
        subtitle: Text(
          prompt.description,
          style: TextStyle(
            fontSize: AppSize.s14,
            color: Colors.grey,
          ),
        ),
        trailing: Row(
          mainAxisSize: MainAxisSize.min,
          children: [
            IconButton(
              icon: Icon(
                Icons.star,
                color: prompt.isFavorite ? Colors.yellow : Colors.grey,
              ),
              onPressed: () => _viewModel.toggleFavorite(prompt),
            ),
            IconButton(
              icon: const Icon(Icons.more_vert),
              onPressed: () => _showActions(context, prompt),
            ),
          ],
        ),
      ),
    );
  }
  @override
  void dispose() {
    _viewModel.dispose();
    _searchController.dispose();
    super.dispose();
  }

  @override
  bool get wantKeepAlive => true;
}



class PromptViewModel extends BaseViewModel {
  final GetPublicPromptsUseCase _getPublicPromptsUseCase;
  final GetPrivatePromptsUseCase _getPrivatePromptsUseCase;
  final AddPromptToFavoriteUseCase _addPromptToFavoriteUseCase;
  final CreatePromptUseCase _createPromptUseCase;
  final UpdatePromptUseCase _updatePromptUseCase;
  final DeletePromptUseCase _deletePromptUseCase;

  bool showFavorites = false;
  String _currentCategory = 'all';
  bool _isPublicMode = false;
  List<Prompt> prompts = [];


  final StreamController<List<Prompt>> _promptsStreamController = StreamController<List<Prompt>>.broadcast();
  final StreamController<String> _errorStreamController = StreamController<String>.broadcast();
  final StreamController<List<Prompt>> _favoritesStreamController = StreamController<List<Prompt>>.broadcast();
  final StreamController<List<Prompt>> _privatePromptsStreamController = StreamController<List<Prompt>>.broadcast();
  final StreamController<String> _currentCategoryController = StreamController<String>.broadcast();


  Stream<String> get currentCategoryStream => _currentCategoryController.stream;
  String get currentCategory => _currentCategory;
  List<Prompt> favoritePrompts = [];
  List<Prompt> privatePrompts = [];
  String _searchQuery = '';

  Stream<List<Prompt>> get promptsStream => _promptsStreamController.stream;
  Stream<List<Prompt>> get favoritesStream => _favoritesStreamController.stream;
  Stream<List<Prompt>> get privatePromptsStream => _privatePromptsStreamController.stream;

  Stream<String> get errorStream => _errorStreamController.stream;
  PromptViewModel(this._getPublicPromptsUseCase, this._addPromptToFavoriteUseCase, this._createPromptUseCase, this._getPrivatePromptsUseCase, this._updatePromptUseCase, this._deletePromptUseCase);

  // Helper method to refresh the current view based on mode and category
  void refreshCurrentView() {
    if (_isPublicMode) {
      getPrompts(_currentCategory, query: _searchQuery);
    } else {
      getPrivatePrompts(_currentCategory, query: _searchQuery);
    }
  }

  void setSearchQuery(String query) {
    _searchQuery = query;
    refreshCurrentView();  // Refresh with new search query
  }

  void executeSearch() {
    refreshCurrentView(); // Only refresh when search is executed
  }

  void clearSearch() {
    _searchQuery = '';
    refreshCurrentView();
  }

  Future<void> getPrompts(String category, {bool? isFavorite, String? query}) async {
    final input = GetPublicPromptsUseCaseInput(
        category.toLowerCase(),
        isFavorite: isFavorite,
        query: query?.isNotEmpty == true ? query : null
    );

    (await _getPublicPromptsUseCase.execute(input)).fold(
            (failure) => _errorStreamController.add(failure.message),
            (fetchedPrompts) {
          prompts = fetchedPrompts.sublist(0,100);
          log(prompts.toString());
          _promptsStreamController.add(prompts);
        }
    );
  }

  Future<void> getPrivatePrompts(String category,  {bool? isFavorite, String? query}) async {
    final input = GetPublicPromptsUseCaseInput(
        category.toLowerCase(),
        isFavorite: isFavorite,
        query: query?.isNotEmpty == true ? query : null

    );

    (await _getPrivatePromptsUseCase.execute(input)).fold(
            (failure) => _errorStreamController.add(failure.message),
            (prompts) {
          privatePrompts = prompts;
          _privatePromptsStreamController.add(privatePrompts);
        }
    );
  }

  Future<void> getFavoritePrompts() async {
    final input = GetPublicPromptsUseCaseInput("all", isFavorite: true);
    final input2 = GetPublicPromptsUseCaseInput("all", isFavorite: true);

    (await _getPublicPromptsUseCase.execute(input)).fold(
            (failure) => _errorStreamController.add(failure.message),
            (fetchedPrompts) {
          favoritePrompts = fetchedPrompts;
          _favoritesStreamController.add(favoritePrompts);
        }
    );
    (await _getPrivatePromptsUseCase.execute(input2)).fold(
            (failure) => _errorStreamController.add(failure.message),
            (fetchedPrompts) {
          favoritePrompts = favoritePrompts + fetchedPrompts;
          _favoritesStreamController.add(favoritePrompts);
        }
    );
  }
  Future<void> toggleFavorite(Prompt prompt) async {
    final result = await _addPromptToFavoriteUseCase.execute(prompt.id);

    result.fold(
            (failure) => _errorStreamController.add(failure.message),
            (_) {
          final index = prompts.indexWhere((p) => p.id == prompt.id);
          if (index != -1) {
            prompts[index] = Prompt(
              id: prompt.id,
              title: prompt.title,
              content: prompt.content,
              description: prompt.description,
              category: prompt.category,
              isPublic: prompt.isPublic,
              userName: prompt.userName,
              isFavorite: !prompt.isFavorite,
            );
            if (_isPublicMode){
              _promptsStreamController.add(prompts);
            }
            else{
              _privatePromptsStreamController.add(prompts);
            }
            refreshCurrentView();
          }
        }
    );
  }
  Future<void> createPrompt(String title, String content, String description,
      String category, String language, bool isPublic) async {
    final request = CreatePromptRequest(
        title: title,
        content: content,
        description: description,
        category: category,
        language: language,
        isPublic: isPublic
    );

    (await _createPromptUseCase.execute(request)).fold(
            (failure) => _errorStreamController.add(failure.message),
            (_) {
              refreshCurrentView(); // Refresh the list after creating
            }
    );
  }

  Future<void> updatePrompt(String id, String title,String content, String description, String category, bool isPublic, String language) async {
    final request = UpdatePromptUseCaseInput(id, title, content, description, category, language, isPublic);
    (await _updatePromptUseCase.execute(request)).fold(
            (failure) => _errorStreamController.add(failure.message),
            (_) {
                 refreshCurrentView(); // Refresh the list after updating
            }
    );
  }

  Future<void> deletePrompt(String id) async {
    (await _deletePromptUseCase.execute(id)).fold(
            (failure) => _errorStreamController.add(failure.message),
            (_) {
              refreshCurrentView(); // Refresh the list after updating
            }
    );
  }

  void setCurrentCategory(String category) {
    _currentCategory = category;
    log("rest:"+_currentCategory);
    if (_isPublicMode) {
      getPrompts(category);
    } else {
      getPrivatePrompts(category);
    }
  }

  // Update mode (public/private) and refresh prompts
  void setPublicMode(bool isPublic) {
    _isPublicMode = isPublic;
    if (isPublic) {
      getPrompts(_currentCategory);
    } else {
      getPrivatePrompts(_currentCategory);
    }
  }
  String getCurrentCategory() => _currentCategory;

  void toggleFavoriteFilter() {
    showFavorites = !showFavorites;
    getPrompts('All');
  }

  List<String> getPromptCategories() {
    return [
      'All',
      'Marketing',
      'Business',
      'SEO',
      'Writing',
      'Coding',
      'Career',
      'Chatbot',
      'Education',
      'Fun',
      'Productivity',
      'Other'
    ];
  }
  @override
  void dispose() {
    _promptsStreamController.close();
    _errorStreamController.close();
    _favoritesStreamController.close();
    _privatePromptsStreamController.close();
    super.dispose();
  }

  @override
  Future<void> navigateNamed(BuildContext context, String route) {
    // TODO: implement navigateNamed
    throw UnimplementedError();
  }

  @override
  Future<void> navigateReplaceNamed(BuildContext context, String route) {
    // TODO: implement navigateReplaceNamed
    throw UnimplementedError();
  }
}

class FavoritePromptsModal extends StatefulWidget {
  final PromptViewModel viewModel;

  const FavoritePromptsModal({
    Key? key,
    required this.viewModel,
  }) : super(key: key);

  @override
  State<FavoritePromptsModal> createState() => _FavoritePromptsModalState();
}

class _FavoritePromptsModalState extends State<FavoritePromptsModal> {
  @override
  void initState() {
    super.initState();
    widget.viewModel.getFavoritePrompts();  }

  @override
  Widget build(BuildContext context) {
    return Dialog(
      child: Container(
        width: double.infinity,
        height: MediaQuery.of(context).size.height * 0.8,
        padding: const EdgeInsets.all(AppSize.s16),
        child: Column(
          children: [
            Row(
              mainAxisAlignment: MainAxisAlignment.spaceBetween,
              children: [
                const Text(
                  "Favorite Prompts",
                  style: TextStyle(
                    fontSize: AppSize.s20,
                    fontWeight: FontWeightManager.semiBold,
                  ),
                ),
                IconButton(
                  icon: const Icon(Icons.close),
                  onPressed: () => Navigator.pop(context),
                ),
              ],
            ),
            const SizedBox(height: AppSize.s16),
            Expanded(
              child: StreamBuilder<List<Prompt>>(
                stream: widget.viewModel.favoritesStream,
                builder: (context, snapshot) {
                  if (snapshot.hasData) {
                    if (snapshot.data!.isEmpty) {
                      return const Center(
                        child: Text("No favorite prompts yet"),
                      );
                    }
                    return ListView.builder(
                      itemCount: snapshot.data!.length,
                      itemBuilder: (context, index) {
                        final prompt = snapshot.data![index];
                        return Container(
                          margin: const EdgeInsets.symmetric(vertical: AppSize.s6),
                          decoration: BoxDecoration(
                            color: Colors.white,
                            borderRadius: BorderRadius.circular(AppSize.s12),
                            boxShadow: [
                              BoxShadow(
                                color: Colors.grey.withOpacity(0.2),
                                spreadRadius: 1,
                                blurRadius: 4,
                                offset: const Offset(0, 2),
                              ),
                            ],
                          ),
                          child: ListTile(
                            title: Text(
                              prompt.title,
                              style: const TextStyle(
                                fontWeight: FontWeight.bold,
                                fontSize: AppSize.s14,
                              ),
                            ),
                            subtitle: Text(
                              prompt.description ?? '',
                              style: const TextStyle(
                                fontSize: AppSize.s14,
                                color: Colors.grey,
                              ),
                            ),
                            trailing: IconButton(
                              icon: const Icon(Icons.star, color: Colors.yellow),
                              onPressed: () {
                                widget.viewModel.toggleFavorite(prompt);
                              },
                            ),
                          ),
                        );
                      },
                    );
                  }
                  if (snapshot.hasError) {
                    return const Center(child: Text('Error loading favorites'));
                  }
                  return const Center(child: CircularProgressIndicator());
                },
              ),
            ),
          ],
        ),
      ),
    );
  }
}

================
File: presentation/resources/assets_manager.dart
================
const String IMAGE_PATH = "assets/images";

class ImageAssets {
  static const String splashLogo = "$IMAGE_PATH/splash_logo.png";

  static const String onboardingLogo1 = "$IMAGE_PATH/onboarding_logo1.svg";
  static const String onboardingLogo2 = "$IMAGE_PATH/onboarding_logo2.svg";
  static const String onboardingLogo3 = "$IMAGE_PATH/onboarding_logo3.svg";
  static const String onboardingLogo4 = "$IMAGE_PATH/onboarding_logo4.svg";

  static const String hollowCircleIc = "$IMAGE_PATH/hollow_circle_ic.svg";
  static const String solidCircleIc = "$IMAGE_PATH/solid_circle_ic.svg";
  static const String leftArrowIc = "$IMAGE_PATH/left_arrow_ic.svg";
  static const String rightArrowIc = "$IMAGE_PATH/right_arrow_ic.svg";
  static const String logoIc = "$IMAGE_PATH/logo_ic.svg";

  static const String gettingStartedLogo = "$IMAGE_PATH/logo_ic_1.png";
  static const String botIc = "$IMAGE_PATH/bot_ic.png";
  static const String addIc = "$IMAGE_PATH/add_ic.png";
  static const String knowledgeIc = "$IMAGE_PATH/knowledge_ic.png";
  static const String messageCircleIc = "$IMAGE_PATH/message_circle_ic.png";
  static const String fb_ic = "$IMAGE_PATH/fb_ic.png";
  static const String gg_ic = "$IMAGE_PATH/gg_ic.png";
  static const String apple_ic = "$IMAGE_PATH/apple_ic.png";
}

================
File: presentation/resources/color_manager.dart
================
import 'package:flutter/material.dart';

class ColorManager {
  static Color primary = HexColor.fromHex("#51DACF");
  static Color darkGrey = HexColor.fromHex("#525252");
  static Color grey =HexColor.fromHex("#737477");
  static Color lightGrey = HexColor.fromHex("#9E9E9E");
  static Color primaryOpacity70 = HexColor.fromHex("#B3ED9728");

  // new colors
  static Color darkPrimary = HexColor.fromHex("#d17d11");
  static Color grey1 = HexColor.fromHex("#707070");
  static Color grey2 = HexColor.fromHex("#797979");
  static Color white = HexColor.fromHex("#FFFFFF");
  static Color error = HexColor.fromHex("#e61f34"); // red color
  static Color teal = HexColor.fromHex("#008080");
}

extension HexColor on Color {
  static Color fromHex(String hexColorString) {
    hexColorString = hexColorString.replaceAll('#', '');
    if (hexColorString.length == 6) {
      hexColorString = "FF$hexColorString"; // 8 char with opacity 100%
    }
    return Color(int.parse(hexColorString, radix: 16));
  }
}

================
File: presentation/resources/font_manager.dart
================
import 'package:flutter/material.dart';

class FontConstants {
  static const String fontFamily = "Montserrat";
}

class FontWeightManager {
  static const FontWeight light = FontWeight.w300;
  static const FontWeight regular = FontWeight.w400;
  static const FontWeight medium = FontWeight.w500;
  static const FontWeight semiBold = FontWeight.w600;
  static const FontWeight bold = FontWeight.w700;
}

class FontSize {
  static const double s12 = 12.0;
  static const double s14 = 14.0;
  static const double s16 = 16.0;
  static const double s18 = 18.0;
  static const double s20 = 20.0;
  static const double s22 = 22.0;
  static const double s24 = 24.0;
  static const double s26 = 26.0;
  static const double s28 = 28.0;
}

================
File: presentation/resources/language_manager.dart
================
enum LanguageType {
  ENGLISH,
  VIETNAM,
}

const String VIETNAM = "vi";
const String ENGLISH = "en";

extension LanguageTypeExtension on LanguageType {
  String getValue() {
    switch (this) {
      case LanguageType.ENGLISH:
        return ENGLISH;
      case LanguageType.VIETNAM:
        return VIETNAM;
    }
  }
}

================
File: presentation/resources/route_manager.dart
================
import 'package:flutter/material.dart';
import 'package:jarvis/presentation/chatbot/chat/chat_bot_view.dart';
import 'package:jarvis/presentation/chatbot/create_bot/create_bot_view.dart';
import 'package:jarvis/presentation/chatbot/edit_bot/edit_bot_view.dart';
import 'package:jarvis/presentation/chatbot/main_chatbot_view.dart';
import 'package:jarvis/presentation/chatbot/preview_bot/preview_bot.dart';
import 'package:jarvis/presentation/authencation/forgot_password/forgot_password.dart';
import 'package:jarvis/presentation/getting_started/getting_started.dart';
import 'package:jarvis/presentation/knowledge/knowledge_create/knowledge_create.dart';
import 'package:jarvis/presentation/knowledge/knowledge_delete/knowledge_delete.dart';
import 'package:jarvis/presentation/knowledge/knowledge_detail/knowledge_detail.dart';
import 'package:jarvis/presentation/knowledge/knowledge_edit/knowledge_edit.dart';
import 'package:jarvis/presentation/authencation/sign_in/sign_in.dart';
import 'package:jarvis/presentation/main/main_view.dart';
import 'package:jarvis/presentation/profile/detail_profile_view.dart';
import 'package:jarvis/presentation/profile/profile_view.dart';
import 'package:jarvis/presentation/prompt/create_prompt/create_prompt_view.dart';
import 'package:jarvis/presentation/prompt/main_prompt_view.dart';
import 'package:jarvis/presentation/authencation/sign_up/sign_up.dart';
import 'package:jarvis/presentation/resources/strings_manager.dart';
import 'package:jarvis/presentation/splash/splash.dart';
import 'package:jarvis/presentation/upgrade/upgrade.dart';

class Routes {
  static const String splashRoute = "/";
  static const String gettingStartedRoute = "/gettingStarted";
  static const String onBoardingRoute = "/onBoarding";
  static const String signInRoute = "/sign-in";
  static const String signUpRoute = "/sign-up";
  static const String forgotPasswordRoute = "/forgot-password";
  static const String mainRoute = "/main";
  static const String chatbotMainRoute = "/chatbotMain";
  static const String chatbotRoute = "/chatbot";
  static const String profileRoute = "/profile";
  static const String detailProfileRoute = "/detailProfile";
  static const String createBotRoute = "/createBot";
  static const String previewBotRoute = "/previewBot";
  static const String editBotRoute = "/editBot";
  static const String promptRoute = "/promptBot";
  static const String createPromptRoute = "/createPrompt";
  static const String createKnowledgeRoute = "/createKnowledge";
  static const String editKnowledgeRoute = "/editKnowledge";
  static const String deleteKnowledgeRoute = "/deleteKnowledge";
  static const String detailKnowledgeRoute = "/detailKnowledge";
  static const String upgradeProRoute = "/upgradePro";
}

class RouteGenerator {
  static Route<dynamic> getRoute(RouteSettings routeSettings) {
    switch (routeSettings.name) {
      case Routes.splashRoute:
        return MaterialPageRoute(builder: (_) => SplashView());
      case Routes.gettingStartedRoute:
        return MaterialPageRoute(builder: (_) => GettingStartedView());
      case Routes.signInRoute:
        return MaterialPageRoute(builder: (_) => const SignInView());
      case Routes.signUpRoute:
        return MaterialPageRoute(builder: (_) => const SignUpView());
      case Routes.forgotPasswordRoute:
        return MaterialPageRoute(builder: (_) => const ForgotPasswordView());
      case Routes.mainRoute:
        return MaterialPageRoute(builder: (_) => const MainView());
      case Routes.chatbotMainRoute:
        return MaterialPageRoute(builder: (_) => const ChatBotMainView());
      case Routes.chatbotRoute:
        return MaterialPageRoute(builder: (_) => const ChatBotView());
      case Routes.profileRoute:
        return MaterialPageRoute(builder: (_) => const ProfileView());
      case Routes.detailProfileRoute:
        return MaterialPageRoute(builder: (_) => const DetailProfileView());
      case Routes.createBotRoute:
        return MaterialPageRoute(builder: (_) => const CreateBotView());
      case Routes.previewBotRoute:
      return MaterialPageRoute(builder: (_) => const PreviewBotView());
      case Routes.editBotRoute:
        return MaterialPageRoute(builder: (_) => const EditBotView());
      case Routes.promptRoute:
        return MaterialPageRoute(builder: (_) => const PromptView());
      case Routes.createPromptRoute:
        return MaterialPageRoute(builder: (_) => CreatePromptView());
      case Routes.createKnowledgeRoute:
        return MaterialPageRoute(builder: (_) => CreateKnowledgeView());
      case Routes.deleteKnowledgeRoute:
        return MaterialPageRoute(builder: (_) => DeleteKnowledgeView());
      case Routes.editKnowledgeRoute:
        return MaterialPageRoute(builder: (_) => EditKnowledgeView());
      case Routes.detailKnowledgeRoute:
        return MaterialPageRoute(builder: (_) => DetailKnowledgeView());
      case Routes.upgradeProRoute:
        return MaterialPageRoute(builder: (_) => UpgradeView());
      default:
        return UndefinedRoute();
    }
  }

  static Route<dynamic> UndefinedRoute() {
    return MaterialPageRoute(
        builder: (_) => Scaffold(
          appBar: AppBar(
            title: Text(AppStrings.noRouteFound),
          ),
          body: Center(
            child: Text(AppStrings.noRouteFound),
          ),
        ));
  }
}

================
File: presentation/resources/strings_manager.dart
================
class AppStrings {
  static const String noRouteFound = "No Route Found";

  static const String onBoardingTitle1 = "SEE THE BEST COURSE #1";
  static const String onBoardingTitle2 = "SEE THE BEST COURSE #2";
  static const String onBoardingTitle3 = "SEE THE BEST COURSE #3";
  static const String onBoardingTitle4 = "SEE THE BEST COURSE #4";

  static const String onBoardingSubTitle1 = "Tut app is an awesome flutter application using clean architecture #1";
  static const String onBoardingSubTitle2 = "Tut app is an awesome flutter application using clean architecture #2";
  static const String onBoardingSubTitle3 = "Tut app is an awesome flutter application using clean architecture #3";
  static const String onBoardingSubTitle4 = "Tut app is an awesome flutter application using clean architecture #4";

  static const String skip = "Skip";

  static const String chatHintText = "Chat anything with ...";
}

================
File: presentation/resources/style_manager.dart
================
import 'package:flutter/material.dart';
import 'package:jarvis/presentation/resources/font_manager.dart';

TextStyle _getTextStyle(
    double fontSize, String fontFamily, FontWeight fontWeight, Color color) {
  return TextStyle(
    fontSize: fontSize,
    fontFamily: fontFamily,
    fontWeight: fontWeight,
    color: color,
  );
}

TextStyle getLightStyle(
    {double fontSize = FontSize.s12, required Color color}) {
  return _getTextStyle(
      fontSize, FontConstants.fontFamily, FontWeightManager.light, color);
}

TextStyle getRegularStyle(
    {double fontSize = FontSize.s12, required Color color}) {
  return _getTextStyle(
      fontSize, FontConstants.fontFamily, FontWeightManager.regular, color);
}

TextStyle getMediumStyle(
    {double fontSize = FontSize.s12, required Color color}) {
  return _getTextStyle(
      fontSize, FontConstants.fontFamily, FontWeightManager.medium, color);
}

TextStyle getSemiBoldStyle(
    {double fontSize = FontSize.s12, required Color color}) {
  return _getTextStyle(
      fontSize, FontConstants.fontFamily, FontWeightManager.semiBold, color);
}

TextStyle getBoldStyle({double fontSize = FontSize.s12, required Color color}) {
  return _getTextStyle(
      fontSize, FontConstants.fontFamily, FontWeightManager.bold, color);
}

================
File: presentation/resources/theme_manager.dart
================
import 'package:flutter/material.dart';
import 'package:jarvis/presentation/resources/color_manager.dart';
import 'package:jarvis/presentation/resources/font_manager.dart';
import 'package:jarvis/presentation/resources/style_manager.dart';
import 'package:jarvis/presentation/resources/values_manager.dart';

ThemeData getApplicationTheme() {
  final ThemeData theme = ThemeData();
  return ThemeData(
    // main colors of the app
    primaryColor: ColorManager.primary,
    primaryColorDark: ColorManager.darkPrimary,
    primaryColorLight: ColorManager.primaryOpacity70,

    disabledColor: ColorManager.grey1,
    // old accent color
    colorScheme: theme.colorScheme.copyWith(secondary: ColorManager.grey),
    // splashColor: ColorManager.primaryOpacity70, // will be used incase of disabled button for example

    // card view theme
    cardTheme: CardTheme(
      color: ColorManager.white,
      shadowColor: ColorManager.grey,
      elevation: AppSize.s4,
    ),

    // app bar theme
    appBarTheme: AppBarTheme(
      centerTitle: true,
      color: ColorManager.primary,
      elevation: AppSize.s4,
      // shadowColor: ColorManager.primaryOpacity70,
      titleTextStyle:
          getRegularStyle(color: ColorManager.white, fontSize: FontSize.s16),
    ),

    // button theme
    buttonTheme: ButtonThemeData(
      shape: const StadiumBorder(),
      disabledColor: ColorManager.grey,
      // splashColor: ColorManager.primaryOpacity70,
      buttonColor: ColorManager.primary,
    ),

    // elevated button theme
    elevatedButtonTheme: ElevatedButtonThemeData(
        style: ElevatedButton.styleFrom(
      textStyle: getRegularStyle(color: ColorManager.primary),
      backgroundColor: ColorManager.primary,
      shape: RoundedRectangleBorder(
          borderRadius: BorderRadius.circular(AppSize.s16)),
    )),

    // text theme
    textTheme: TextTheme(
      displayLarge: getSemiBoldStyle(
          color: ColorManager.darkGrey, fontSize: FontSize.s16),
      titleMedium:
          getMediumStyle(color: ColorManager.lightGrey, fontSize: FontSize.s14),
      bodySmall: getRegularStyle(color: ColorManager.grey1),
      bodyLarge: getRegularStyle(color: ColorManager.grey),
    ),

    // input decoration theme (text from field)
    inputDecorationTheme: InputDecorationTheme(
      contentPadding: EdgeInsets.all(AppPadding.p8),
      hintStyle: getRegularStyle(color: ColorManager.grey),
      labelStyle: getMediumStyle(color: ColorManager.darkGrey),
      errorStyle: getRegularStyle(color: ColorManager.error),

      enabledBorder: OutlineInputBorder(
        borderSide: BorderSide(color: ColorManager.grey, width: AppSize.s1_5),
        borderRadius: const BorderRadius.all(Radius.circular(AppSize.s8)),
      ),

      focusedBorder: OutlineInputBorder(
        borderSide: BorderSide(color: ColorManager.primary, width: AppSize.s1_5),
        borderRadius: const BorderRadius.all(Radius.circular(AppSize.s8)),
      ),

      errorBorder: OutlineInputBorder(
        borderSide: BorderSide(color: ColorManager.error, width: AppSize.s1_5),
        borderRadius: const BorderRadius.all(Radius.circular(AppSize.s8)),
      ),

      focusedErrorBorder: OutlineInputBorder(
        borderSide: BorderSide(color: ColorManager.primary, width: AppSize.s1_5),
        borderRadius: const BorderRadius.all(Radius.circular(AppSize.s8)),
      ),
    ),
  );
}

================
File: presentation/resources/values_manager.dart
================
class AppMargin {
  static const double m8 = 8.0;
  static const double m12 = 12.0;
  static const double m14 = 14.0;
  static const double m16 = 16.0;
  static const double m18 = 18.0;
  static const double m20 = 20.0;
}

class AppPadding {
  static const double p8 = 8.0;
  static const double p12 = 12.0;
  static const double p14 = 14.0;
  static const double p16 = 16.0;
  static const double p18 = 18.0;
  static const double p20 = 20.0;
}

class AppSize {
  static const double s0 = 0;
  static const double s1_5 = 1.5;
  static const double s4 = 4.0;
  static const double s6 = 6.0;
  static const double s8 = 8.0;
  static const double s10 = 10.0;
  static const double s12 = 12.0;
  static const double s14 = 14.0;
  static const double s16 = 16.0;
  static const double s18 = 18.0; 
  static const double s20 = 20.0;
  static const double s24 = 24.0;
  static const double s28 = 28.0;
  static const double s32 = 32.0;
  static const double s40 = 40.0;
  static const double s60 = 60.0;
  static const double s65 = 65.0;
  static const double s100 = 100.0;
}

class DurationConstant {
  static const int d300 = 300;
}

================
File: presentation/splash/splash_viewmodel.dart
================
import 'package:flutter/src/widgets/framework.dart';
import 'package:jarvis/app/app_prefs.dart';
import 'package:jarvis/presentation/base/baseviewmodel.dart';

class SplashViewModel extends BaseViewModel {
  final AppPreferences _appPreferences;

  SplashViewModel(this._appPreferences);

  Future<String> getAccessToken() async {
    return await _appPreferences.getAccessToken();
  }

  Future<void> clearAccessToken() async {
    await _appPreferences.clearTokens();
  }

  Future<bool> isUserLoggedIn() async {
    String token = await getAccessToken();
    return token.isNotEmpty;
  }

  @override
  Future<void> navigateNamed(BuildContext context, String route) {
    // TODO: implement navigateNamed
    throw UnimplementedError();
  }

  @override
  Future<void> navigateReplaceNamed(BuildContext context, String route) {
    // TODO: implement navigateReplaceNamed
    throw UnimplementedError();
  }
}

================
File: presentation/splash/splash.dart
================
import 'dart:async';

import 'package:flutter/material.dart';
import 'package:get_it/get_it.dart';
import 'package:jarvis/presentation/resources/assets_manager.dart';
import 'package:jarvis/presentation/resources/color_manager.dart';
import 'package:jarvis/presentation/resources/route_manager.dart';
import 'package:jarvis/presentation/splash/splash_viewmodel.dart';

class SplashView extends StatefulWidget {
  const SplashView({super.key});

  @override
  State<SplashView> createState() => _SplashViewState();
}

class _SplashViewState extends State<SplashView> {
  late SplashViewModel _viewModel;
  Timer? _timer;

  _startDelay() {
    _timer = Timer(const Duration(seconds: 2), _goNext);
  }

  _goNext() async {
    bool isLoggedIn = await _viewModel.isUserLoggedIn();
    if (isLoggedIn) {
      Navigator.pushReplacementNamed(context, Routes.mainRoute);
    } else {
      Navigator.pushReplacementNamed(context, Routes.gettingStartedRoute);
    }
  }

  @override
  void initState() {
    super.initState();
    _viewModel = GetIt.instance<SplashViewModel>();
    _startDelay();
  }

  @override
  void dispose() {
    _timer?.cancel();
    super.dispose();
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      backgroundColor: ColorManager.white,
      body: const Center(
        child: Image(
          image: AssetImage(ImageAssets.splashLogo),
        ),
      ),
    );
  }
}

================
File: presentation/unit_add/unit_add_confluence.dart
================
import 'package:flutter/material.dart';
import 'package:jarvis/presentation/common/bottom_navigation.dart';
import 'package:jarvis/presentation/common/chat_input_box.dart';
import 'package:jarvis/presentation/common/custome_header_bar.dart';
import 'package:jarvis/presentation/resources/color_manager.dart';
import 'package:jarvis/presentation/resources/font_manager.dart';
import 'package:jarvis/presentation/resources/values_manager.dart';
import 'package:file_picker/file_picker.dart';

class UnitAddConfluence extends StatefulWidget {
  @override
  State<UnitAddConfluence> createState() => _UnitAddConfluenceState();
}

class _UnitAddConfluenceState extends State<UnitAddConfluence> {
  final TextEditingController _urlController = TextEditingController();
  final TextEditingController _labelController = TextEditingController();
  String? _urlErrorText;
  String? _labelErrorText;
  bool _isLoading = false;

  @override
  void dispose() {
    _urlController.dispose();
    _labelController.dispose();
    super.dispose();
  }

  bool _isValidUrl(String url) {
    Uri? uri = Uri.tryParse(url);
    return uri != null &&
        (uri.scheme == 'http' || uri.scheme == 'https') &&
        uri.host.isNotEmpty;
  }

  Future<void> _handleConnect() async {
    final url = _urlController.text.trim();
    final label = _labelController.text.trim();
    bool hasError = false;

    if (url.isEmpty) {
      setState(() {
        _urlErrorText = 'Please enter a URL';
      });
      hasError = true;
    } else if (!_isValidUrl(url)) {
      setState(() {
        _urlErrorText = 'Please enter a valid URL';
      });
      hasError = true;
    }

    if (label.isEmpty) {
      setState(() {
        _labelErrorText = 'Please enter a label';
      });
      hasError = true;
    }

    if (hasError) return;

    setState(() {
      _isLoading = true;
      _urlErrorText = null;
      _labelErrorText = null;
    });

    try {
      // Simulate API call
      await Future.delayed(const Duration(seconds: 1));
      if (mounted) {
        Navigator.pop(context, {
          'url': url,
          'label': label,
        });
      }
    } catch (e) {
      if (mounted) {
        setState(() {
          _urlErrorText = 'Failed to connect to website';
        });
      }
    } finally {
      if (mounted) {
        setState(() {
          _isLoading = false;
        });
      }
    }
  }

  @override
  Widget build(BuildContext context) {
    return Dialog(
      insetPadding: const EdgeInsets.symmetric(horizontal: AppPadding.p16),
      shape: RoundedRectangleBorder(
        borderRadius: BorderRadius.circular(AppSize.s20),
      ),
      child: Container(
        padding: const EdgeInsets.all(AppPadding.p20),
        child: Column(
          mainAxisSize: MainAxisSize.min,
          crossAxisAlignment: CrossAxisAlignment.stretch,
          children: [
            const Row(
              children: [
                Expanded(
                  child: Text(
                    'Confluence',
                    style: TextStyle(
                      fontSize: AppSize.s20,
                      fontWeight: FontWeight.bold,
                    ),
                  ),
                ),
              ],
            ),
            const SizedBox(height: AppSize.s24),
            Container(
              decoration: BoxDecoration(
                color: Colors.grey[100],
                borderRadius: BorderRadius.circular(AppSize.s12),
              ),
              child: Column(
                children: [
                  const SizedBox(height: AppSize.s16),
                  Container(
                    width: AppSize.s60,
                    height: AppSize.s60,
                    decoration: BoxDecoration(
                      color: Colors.white,
                      borderRadius: BorderRadius.circular(AppSize.s12),
                      border: Border.all(
                        color: Colors.grey[300]!,
                        width: 2,
                      ),
                    ),
                    child: Icon(
                      Icons.language,
                      size: AppSize.s32,
                      color: Colors.grey[400],
                    ),
                  ),
                  const SizedBox(height: AppSize.s16),
                  Padding(
                    padding: const EdgeInsets.symmetric(horizontal: AppPadding.p16),
                    child: Column(
                      children: [
                        TextField(
                          controller: _labelController,
                          decoration: InputDecoration(
                            hintText: 'Enter label',
                            hintStyle: TextStyle(
                              color: Colors.grey[400],
                            ),
                            errorText: _labelErrorText,
                            filled: true,
                            fillColor: Colors.white,
                            border: OutlineInputBorder(
                              borderRadius: BorderRadius.circular(AppSize.s12),
                              borderSide: BorderSide.none,
                            ),
                            prefixIcon: Icon(
                              Icons.label_outline,
                              color: Colors.grey[400],
                            ),
                            contentPadding: const EdgeInsets.symmetric(
                              horizontal: AppPadding.p16,
                              vertical: AppPadding.p12,
                            ),
                          ),
                          onChanged: (value) {
                            if (_labelErrorText != null) {
                              setState(() {
                                _labelErrorText = null;
                              });
                            }
                          },
                          textInputAction: TextInputAction.next,
                        ),
                        const SizedBox(height: AppSize.s12),
                        TextField(
                          controller: _urlController,
                          decoration: InputDecoration(
                            hintText: 'Enter website URL',
                            hintStyle: TextStyle(
                              color: Colors.grey[400],
                            ),
                            errorText: _urlErrorText,
                            filled: true,
                            fillColor: Colors.white,
                            border: OutlineInputBorder(
                              borderRadius: BorderRadius.circular(AppSize.s12),
                              borderSide: BorderSide.none,
                            ),
                            prefixIcon: Icon(
                              Icons.link,
                              color: Colors.grey[400],
                            ),
                            contentPadding: const EdgeInsets.symmetric(
                              horizontal: AppPadding.p16,
                              vertical: AppPadding.p12,
                            ),
                          ),
                          onChanged: (value) {
                            if (_urlErrorText != null) {
                              setState(() {
                                _urlErrorText = null;
                              });
                            }
                          },
                          keyboardType: TextInputType.url,
                          textInputAction: TextInputAction.done,
                          onSubmitted: (_) => _handleConnect(),
                        ),
                      ],
                    ),
                  ),
                  const SizedBox(height: AppSize.s16),
                ],
              ),
            ),
            const SizedBox(height: AppSize.s24),
            ElevatedButton(
              onPressed: _isLoading ? null : _handleConnect,
              style: ElevatedButton.styleFrom(
                padding: const EdgeInsets.symmetric(vertical: AppPadding.p16),
                backgroundColor: ColorManager.teal,
                shape: RoundedRectangleBorder(
                  borderRadius: BorderRadius.circular(AppSize.s12),
                ),
                disabledBackgroundColor: Colors.grey[300],
              ),
              child: _isLoading
                  ? SizedBox(
                height: AppSize.s20,
                width: AppSize.s20,
                child: CircularProgressIndicator(
                  strokeWidth: 2,
                  valueColor: AlwaysStoppedAnimation<Color>(Colors.white),
                ),
              )
                  : const Text(
                'Connect',
                style: TextStyle(
                  color: Colors.white,
                  fontSize: AppSize.s16,
                  fontWeight: FontWeight.w500,
                ),
              ),
            ),
          ],
        ),
      ),
    );
  }
}

================
File: presentation/unit_add/unit_add_ggdrive.dart
================
import 'package:flutter/material.dart';
import 'package:jarvis/presentation/resources/color_manager.dart';
import 'package:jarvis/presentation/resources/values_manager.dart';

class UnitAddGoogleDrive extends StatefulWidget {
  @override
  State<UnitAddGoogleDrive> createState() => _UnitAddGoogleDriveState();
}

class _UnitAddGoogleDriveState extends State<UnitAddGoogleDrive> {
  final TextEditingController _urlController = TextEditingController();
  final TextEditingController _labelController = TextEditingController();
  String? _urlErrorText;
  String? _labelErrorText;
  bool _isLoading = false;

  @override
  void dispose() {
    _urlController.dispose();
    _labelController.dispose();
    super.dispose();
  }

  bool _isValidUrl(String url) {
    Uri? uri = Uri.tryParse(url);
    return uri != null &&
        (uri.scheme == 'http' || uri.scheme == 'https') &&
        uri.host.isNotEmpty;
  }

  Future<void> _handleConnect() async {
    final url = _urlController.text.trim();
    final label = _labelController.text.trim();
    bool hasError = false;

    if (url.isEmpty) {
      setState(() {
        _urlErrorText = 'Please enter a URL';
      });
      hasError = true;
    } else if (!_isValidUrl(url)) {
      setState(() {
        _urlErrorText = 'Please enter a valid URL';
      });
      hasError = true;
    }

    if (label.isEmpty) {
      setState(() {
        _labelErrorText = 'Please enter a label';
      });
      hasError = true;
    }

    if (hasError) return;

    setState(() {
      _isLoading = true;
      _urlErrorText = null;
      _labelErrorText = null;
    });

    try {
      // Simulate API call
      await Future.delayed(const Duration(seconds: 1));
      if (mounted) {
        Navigator.pop(context, {
          'url': url,
          'label': label,
        });
      }
    } catch (e) {
      if (mounted) {
        setState(() {
          _urlErrorText = 'Failed to connect to website';
        });
      }
    } finally {
      if (mounted) {
        setState(() {
          _isLoading = false;
        });
      }
    }
  }

  @override
  Widget build(BuildContext context) {
    return Dialog(
      insetPadding: const EdgeInsets.symmetric(horizontal: AppPadding.p16),
      shape: RoundedRectangleBorder(
        borderRadius: BorderRadius.circular(AppSize.s20),
      ),
      child: Container(
        padding: const EdgeInsets.all(AppPadding.p20),
        child: Column(
          mainAxisSize: MainAxisSize.min,
          crossAxisAlignment: CrossAxisAlignment.stretch,
          children: [
            const Row(
              children: [
                Expanded(
                  child: Text(
                    'Slack',
                    style: TextStyle(
                      fontSize: AppSize.s20,
                      fontWeight: FontWeight.bold,
                    ),
                  ),
                ),
              ],
            ),
            const SizedBox(height: AppSize.s24),
            Container(
              decoration: BoxDecoration(
                color: Colors.grey[100],
                borderRadius: BorderRadius.circular(AppSize.s12),
              ),
              child: Column(
                children: [
                  const SizedBox(height: AppSize.s16),
                  Container(
                    width: AppSize.s60,
                    height: AppSize.s60,
                    decoration: BoxDecoration(
                      color: Colors.white,
                      borderRadius: BorderRadius.circular(AppSize.s12),
                      border: Border.all(
                        color: Colors.grey[300]!,
                        width: 2,
                      ),
                    ),
                    child: Icon(
                      Icons.language,
                      size: AppSize.s32,
                      color: Colors.grey[400],
                    ),
                  ),
                  const SizedBox(height: AppSize.s16),
                  Padding(
                    padding: const EdgeInsets.symmetric(horizontal: AppPadding.p16),
                    child: Column(
                      children: [
                        TextField(
                          controller: _labelController,
                          decoration: InputDecoration(
                            hintText: 'Enter label',
                            hintStyle: TextStyle(
                              color: Colors.grey[400],
                            ),
                            errorText: _labelErrorText,
                            filled: true,
                            fillColor: Colors.white,
                            border: OutlineInputBorder(
                              borderRadius: BorderRadius.circular(AppSize.s12),
                              borderSide: BorderSide.none,
                            ),
                            prefixIcon: Icon(
                              Icons.label_outline,
                              color: Colors.grey[400],
                            ),
                            contentPadding: const EdgeInsets.symmetric(
                              horizontal: AppPadding.p16,
                              vertical: AppPadding.p12,
                            ),
                          ),
                          onChanged: (value) {
                            if (_labelErrorText != null) {
                              setState(() {
                                _labelErrorText = null;
                              });
                            }
                          },
                          textInputAction: TextInputAction.next,
                        ),
                        const SizedBox(height: AppSize.s12),
                        TextField(
                          controller: _urlController,
                          decoration: InputDecoration(
                            hintText: 'Enter website URL',
                            hintStyle: TextStyle(
                              color: Colors.grey[400],
                            ),
                            errorText: _urlErrorText,
                            filled: true,
                            fillColor: Colors.white,
                            border: OutlineInputBorder(
                              borderRadius: BorderRadius.circular(AppSize.s12),
                              borderSide: BorderSide.none,
                            ),
                            prefixIcon: Icon(
                              Icons.link,
                              color: Colors.grey[400],
                            ),
                            contentPadding: const EdgeInsets.symmetric(
                              horizontal: AppPadding.p16,
                              vertical: AppPadding.p12,
                            ),
                          ),
                          onChanged: (value) {
                            if (_urlErrorText != null) {
                              setState(() {
                                _urlErrorText = null;
                              });
                            }
                          },
                          keyboardType: TextInputType.url,
                          textInputAction: TextInputAction.done,
                          onSubmitted: (_) => _handleConnect(),
                        ),
                      ],
                    ),
                  ),
                  const SizedBox(height: AppSize.s16),
                ],
              ),
            ),
            const SizedBox(height: AppSize.s24),
            ElevatedButton(
              onPressed: _isLoading ? null : _handleConnect,
              style: ElevatedButton.styleFrom(
                padding: const EdgeInsets.symmetric(vertical: AppPadding.p16),
                backgroundColor: ColorManager.teal,
                shape: RoundedRectangleBorder(
                  borderRadius: BorderRadius.circular(AppSize.s12),
                ),
                disabledBackgroundColor: Colors.grey[300],
              ),
              child: _isLoading
                  ? SizedBox(
                height: AppSize.s20,
                width: AppSize.s20,
                child: CircularProgressIndicator(
                  strokeWidth: 2,
                  valueColor: AlwaysStoppedAnimation<Color>(Colors.white),
                ),
              )
                  : const Text(
                'Connect',
                style: TextStyle(
                  color: Colors.white,
                  fontSize: AppSize.s16,
                  fontWeight: FontWeight.w500,
                ),
              ),
            ),
          ],
        ),
      ),
    );
  }
}

================
File: presentation/unit_add/unit_add_localfile.dart
================
import 'package:flutter/material.dart';
import 'package:jarvis/presentation/common/bottom_navigation.dart';
import 'package:jarvis/presentation/common/chat_input_box.dart';
import 'package:jarvis/presentation/common/custome_header_bar.dart';
import 'package:jarvis/presentation/resources/color_manager.dart';
import 'package:jarvis/presentation/resources/font_manager.dart';
import 'package:jarvis/presentation/resources/values_manager.dart';
import 'package:file_picker/file_picker.dart';

class UnitAddLocalfile extends StatefulWidget {
  @override
  State<UnitAddLocalfile> createState() => _UnitAddLocalfileState();
}

class _UnitAddLocalfileState extends State<UnitAddLocalfile> {
  PlatformFile? _selectedFile;

  Future<void> _handleFileSelection() async {
    try {
      FilePickerResult? result = await FilePicker.platform.pickFiles(
        type: FileType.custom,
        allowedExtensions: ['pdf', 'doc', 'docx', 'txt'],
      );

      if (result != null) {
        setState(() {
          _selectedFile = result.files.first;
        });
      }
    } catch (e) {
      // Handle any errors that occurred during file picking
      debugPrint('Error picking file: $e');
    }
  }

  @override
  Widget build(BuildContext context) {
    return Dialog(
      insetPadding: const EdgeInsets.symmetric(horizontal: AppPadding.p16),
      shape: RoundedRectangleBorder(
        borderRadius: BorderRadius.circular(AppSize.s20),
      ),
      child: Container(
        padding: const EdgeInsets.all(AppPadding.p20),
        child: Column(
          mainAxisSize: MainAxisSize.min,
          crossAxisAlignment: CrossAxisAlignment.stretch,
          children: [
            const Row(
              children: [
                Expanded(
                  child: Text(
                    'Local file',
                    style: TextStyle(
                      fontSize: AppSize.s20,
                      fontWeight: FontWeight.bold,
                    ),
                  ),
                ),
              ],
            ),
            const SizedBox(height: AppSize.s24),
            GestureDetector(
              onTap: _handleFileSelection,
              child: Container(
                height: 200,
                decoration: BoxDecoration(
                  color: Colors.grey[100],
                  borderRadius: BorderRadius.circular(AppSize.s12),
                ),
                child: Column(
                  mainAxisAlignment: MainAxisAlignment.center,
                  children: [
                    Container(
                      width: AppSize.s60,
                      height: AppSize.s60,
                      decoration: BoxDecoration(
                        color: Colors.white,
                        borderRadius: BorderRadius.circular(AppSize.s12),
                        border: Border.all(
                          color: Colors.grey[300]!,
                          width: 2,
                        ),
                      ),
                      child: Icon(
                        _selectedFile != null ? Icons.description : Icons.add,
                        size: AppSize.s32,
                        color: _selectedFile != null ? ColorManager.teal : Colors.grey[400],
                      ),
                    ),
                    const SizedBox(height: AppSize.s16),
                    Text(
                      _selectedFile?.name ?? 'Click here to upload file',
                      style: TextStyle(
                        fontSize: AppSize.s14,
                        color: Colors.grey[600],
                      ),
                    ),
                    if (_selectedFile != null) ...[
                      const SizedBox(height: AppSize.s8),
                      Text(
                        '${(_selectedFile!.size / 1024).toStringAsFixed(2)} KB',
                        style: TextStyle(
                          fontSize: AppSize.s12,
                          color: Colors.grey[500],
                        ),
                      ),
                    ],
                  ],
                ),
              ),
            ),
            const SizedBox(height: AppSize.s24),
            ElevatedButton(
              onPressed: _selectedFile != null
                  ? () {
                Navigator.pop(context, _selectedFile);
              }
                  : null,
              style: ElevatedButton.styleFrom(
                padding: const EdgeInsets.symmetric(vertical: AppPadding.p16),
                backgroundColor: ColorManager.teal,
                shape: RoundedRectangleBorder(
                  borderRadius: BorderRadius.circular(AppSize.s12),
                ),
                disabledBackgroundColor: Colors.grey[300],
              ),
              child: const Text(
                'Connect',
                style: TextStyle(
                  color: Colors.white,
                  fontSize: AppSize.s16,
                  fontWeight: FontWeight.w500,
                ),
              ),
            ),
          ],
        ),
      ),
    );
  }
}

================
File: presentation/unit_add/unit_add_slack.dart
================
import 'package:flutter/material.dart';
import 'package:jarvis/presentation/resources/color_manager.dart';
import 'package:jarvis/presentation/resources/values_manager.dart';

class UnitAddSlack extends StatefulWidget {
  @override
  State<UnitAddSlack> createState() => _UnitAddSlackState();
}

class _UnitAddSlackState extends State<UnitAddSlack> {
  final TextEditingController _urlController = TextEditingController();
  final TextEditingController _labelController = TextEditingController();
  String? _urlErrorText;
  String? _labelErrorText;
  bool _isLoading = false;

  @override
  void dispose() {
    _urlController.dispose();
    _labelController.dispose();
    super.dispose();
  }

  bool _isValidUrl(String url) {
    Uri? uri = Uri.tryParse(url);
    return uri != null &&
        (uri.scheme == 'http' || uri.scheme == 'https') &&
        uri.host.isNotEmpty;
  }

  Future<void> _handleConnect() async {
    final url = _urlController.text.trim();
    final label = _labelController.text.trim();
    bool hasError = false;

    if (url.isEmpty) {
      setState(() {
        _urlErrorText = 'Please enter a URL';
      });
      hasError = true;
    } else if (!_isValidUrl(url)) {
      setState(() {
        _urlErrorText = 'Please enter a valid URL';
      });
      hasError = true;
    }

    if (label.isEmpty) {
      setState(() {
        _labelErrorText = 'Please enter a label';
      });
      hasError = true;
    }

    if (hasError) return;

    setState(() {
      _isLoading = true;
      _urlErrorText = null;
      _labelErrorText = null;
    });

    try {
      // Simulate API call
      await Future.delayed(const Duration(seconds: 1));
      if (mounted) {
        Navigator.pop(context, {
          'url': url,
          'label': label,
        });
      }
    } catch (e) {
      if (mounted) {
        setState(() {
          _urlErrorText = 'Failed to connect to website';
        });
      }
    } finally {
      if (mounted) {
        setState(() {
          _isLoading = false;
        });
      }
    }
  }

  @override
  Widget build(BuildContext context) {
    return Dialog(
      insetPadding: const EdgeInsets.symmetric(horizontal: AppPadding.p16),
      shape: RoundedRectangleBorder(
        borderRadius: BorderRadius.circular(AppSize.s20),
      ),
      child: Container(
        padding: const EdgeInsets.all(AppPadding.p20),
        child: Column(
          mainAxisSize: MainAxisSize.min,
          crossAxisAlignment: CrossAxisAlignment.stretch,
          children: [
            const Row(
              children: [
                Expanded(
                  child: Text(
                    'Slack',
                    style: TextStyle(
                      fontSize: AppSize.s20,
                      fontWeight: FontWeight.bold,
                    ),
                  ),
                ),
              ],
            ),
            const SizedBox(height: AppSize.s24),
            Container(
              decoration: BoxDecoration(
                color: Colors.grey[100],
                borderRadius: BorderRadius.circular(AppSize.s12),
              ),
              child: Column(
                children: [
                  const SizedBox(height: AppSize.s16),
                  Container(
                    width: AppSize.s60,
                    height: AppSize.s60,
                    decoration: BoxDecoration(
                      color: Colors.white,
                      borderRadius: BorderRadius.circular(AppSize.s12),
                      border: Border.all(
                        color: Colors.grey[300]!,
                        width: 2,
                      ),
                    ),
                    child: Icon(
                      Icons.language,
                      size: AppSize.s32,
                      color: Colors.grey[400],
                    ),
                  ),
                  const SizedBox(height: AppSize.s16),
                  Padding(
                    padding: const EdgeInsets.symmetric(horizontal: AppPadding.p16),
                    child: Column(
                      children: [
                        TextField(
                          controller: _labelController,
                          decoration: InputDecoration(
                            hintText: 'Enter label',
                            hintStyle: TextStyle(
                              color: Colors.grey[400],
                            ),
                            errorText: _labelErrorText,
                            filled: true,
                            fillColor: Colors.white,
                            border: OutlineInputBorder(
                              borderRadius: BorderRadius.circular(AppSize.s12),
                              borderSide: BorderSide.none,
                            ),
                            prefixIcon: Icon(
                              Icons.label_outline,
                              color: Colors.grey[400],
                            ),
                            contentPadding: const EdgeInsets.symmetric(
                              horizontal: AppPadding.p16,
                              vertical: AppPadding.p12,
                            ),
                          ),
                          onChanged: (value) {
                            if (_labelErrorText != null) {
                              setState(() {
                                _labelErrorText = null;
                              });
                            }
                          },
                          textInputAction: TextInputAction.next,
                        ),
                        const SizedBox(height: AppSize.s12),
                        TextField(
                          controller: _urlController,
                          decoration: InputDecoration(
                            hintText: 'Enter website URL',
                            hintStyle: TextStyle(
                              color: Colors.grey[400],
                            ),
                            errorText: _urlErrorText,
                            filled: true,
                            fillColor: Colors.white,
                            border: OutlineInputBorder(
                              borderRadius: BorderRadius.circular(AppSize.s12),
                              borderSide: BorderSide.none,
                            ),
                            prefixIcon: Icon(
                              Icons.link,
                              color: Colors.grey[400],
                            ),
                            contentPadding: const EdgeInsets.symmetric(
                              horizontal: AppPadding.p16,
                              vertical: AppPadding.p12,
                            ),
                          ),
                          onChanged: (value) {
                            if (_urlErrorText != null) {
                              setState(() {
                                _urlErrorText = null;
                              });
                            }
                          },
                          keyboardType: TextInputType.url,
                          textInputAction: TextInputAction.done,
                          onSubmitted: (_) => _handleConnect(),
                        ),
                      ],
                    ),
                  ),
                  const SizedBox(height: AppSize.s16),
                ],
              ),
            ),
            const SizedBox(height: AppSize.s24),
            ElevatedButton(
              onPressed: _isLoading ? null : _handleConnect,
              style: ElevatedButton.styleFrom(
                padding: const EdgeInsets.symmetric(vertical: AppPadding.p16),
                backgroundColor: ColorManager.teal,
                shape: RoundedRectangleBorder(
                  borderRadius: BorderRadius.circular(AppSize.s12),
                ),
                disabledBackgroundColor: Colors.grey[300],
              ),
              child: _isLoading
                  ? SizedBox(
                height: AppSize.s20,
                width: AppSize.s20,
                child: CircularProgressIndicator(
                  strokeWidth: 2,
                  valueColor: AlwaysStoppedAnimation<Color>(Colors.white),
                ),
              )
                  : const Text(
                'Connect',
                style: TextStyle(
                  color: Colors.white,
                  fontSize: AppSize.s16,
                  fontWeight: FontWeight.w500,
                ),
              ),
            ),
          ],
        ),
      ),
    );
  }
}

================
File: presentation/unit_add/unit_add_website.dart
================
import 'package:flutter/material.dart';
import 'package:jarvis/presentation/common/bottom_navigation.dart';
import 'package:jarvis/presentation/common/chat_input_box.dart';
import 'package:jarvis/presentation/common/custome_header_bar.dart';
import 'package:jarvis/presentation/resources/color_manager.dart';
import 'package:jarvis/presentation/resources/font_manager.dart';
import 'package:jarvis/presentation/resources/values_manager.dart';
import 'package:file_picker/file_picker.dart';

class UnitAddWebsite extends StatefulWidget {
  @override
  State<UnitAddWebsite> createState() => _UnitAddWebsiteState();
}

class _UnitAddWebsiteState extends State<UnitAddWebsite> {
  final TextEditingController _urlController = TextEditingController();
  final TextEditingController _labelController = TextEditingController();
  String? _urlErrorText;
  String? _labelErrorText;
  bool _isLoading = false;

  @override
  void dispose() {
    _urlController.dispose();
    _labelController.dispose();
    super.dispose();
  }

  bool _isValidUrl(String url) {
    Uri? uri = Uri.tryParse(url);
    return uri != null &&
        (uri.scheme == 'http' || uri.scheme == 'https') &&
        uri.host.isNotEmpty;
  }

  Future<void> _handleConnect() async {
    final url = _urlController.text.trim();
    final label = _labelController.text.trim();
    bool hasError = false;

    if (url.isEmpty) {
      setState(() {
        _urlErrorText = 'Please enter a URL';
      });
      hasError = true;
    } else if (!_isValidUrl(url)) {
      setState(() {
        _urlErrorText = 'Please enter a valid URL';
      });
      hasError = true;
    }

    if (label.isEmpty) {
      setState(() {
        _labelErrorText = 'Please enter a label';
      });
      hasError = true;
    }

    if (hasError) return;

    setState(() {
      _isLoading = true;
      _urlErrorText = null;
      _labelErrorText = null;
    });

    try {
      // Simulate API call
      await Future.delayed(const Duration(seconds: 1));
      if (mounted) {
        Navigator.pop(context, {
          'url': url,
          'label': label,
        });
      }
    } catch (e) {
      if (mounted) {
        setState(() {
          _urlErrorText = 'Failed to connect to website';
        });
      }
    } finally {
      if (mounted) {
        setState(() {
          _isLoading = false;
        });
      }
    }
  }

  @override
  Widget build(BuildContext context) {
    return Dialog(
      insetPadding: const EdgeInsets.symmetric(horizontal: AppPadding.p16),
      shape: RoundedRectangleBorder(
        borderRadius: BorderRadius.circular(AppSize.s20),
      ),
      child: Container(
        padding: const EdgeInsets.all(AppPadding.p20),
        child: Column(
          mainAxisSize: MainAxisSize.min,
          crossAxisAlignment: CrossAxisAlignment.stretch,
          children: [
            const Row(
              children: [
                Expanded(
                  child: Text(
                    'Website',
                    style: TextStyle(
                      fontSize: AppSize.s20,
                      fontWeight: FontWeight.bold,
                    ),
                  ),
                ),
              ],
            ),
            const SizedBox(height: AppSize.s24),
            Container(
              decoration: BoxDecoration(
                color: Colors.grey[100],
                borderRadius: BorderRadius.circular(AppSize.s12),
              ),
              child: Column(
                children: [
                  const SizedBox(height: AppSize.s16),
                  Container(
                    width: AppSize.s60,
                    height: AppSize.s60,
                    decoration: BoxDecoration(
                      color: Colors.white,
                      borderRadius: BorderRadius.circular(AppSize.s12),
                      border: Border.all(
                        color: Colors.grey[300]!,
                        width: 2,
                      ),
                    ),
                    child: Icon(
                      Icons.language,
                      size: AppSize.s32,
                      color: Colors.grey[400],
                    ),
                  ),
                  const SizedBox(height: AppSize.s16),
                  Padding(
                    padding: const EdgeInsets.symmetric(horizontal: AppPadding.p16),
                    child: Column(
                      children: [
                        TextField(
                          controller: _labelController,
                          decoration: InputDecoration(
                            hintText: 'Enter label',
                            hintStyle: TextStyle(
                              color: Colors.grey[400],
                            ),
                            errorText: _labelErrorText,
                            filled: true,
                            fillColor: Colors.white,
                            border: OutlineInputBorder(
                              borderRadius: BorderRadius.circular(AppSize.s12),
                              borderSide: BorderSide.none,
                            ),
                            prefixIcon: Icon(
                              Icons.label_outline,
                              color: Colors.grey[400],
                            ),
                            contentPadding: const EdgeInsets.symmetric(
                              horizontal: AppPadding.p16,
                              vertical: AppPadding.p12,
                            ),
                          ),
                          onChanged: (value) {
                            if (_labelErrorText != null) {
                              setState(() {
                                _labelErrorText = null;
                              });
                            }
                          },
                          textInputAction: TextInputAction.next,
                        ),
                        const SizedBox(height: AppSize.s12),
                        TextField(
                          controller: _urlController,
                          decoration: InputDecoration(
                            hintText: 'Enter website URL',
                            hintStyle: TextStyle(
                              color: Colors.grey[400],
                            ),
                            errorText: _urlErrorText,
                            filled: true,
                            fillColor: Colors.white,
                            border: OutlineInputBorder(
                              borderRadius: BorderRadius.circular(AppSize.s12),
                              borderSide: BorderSide.none,
                            ),
                            prefixIcon: Icon(
                              Icons.link,
                              color: Colors.grey[400],
                            ),
                            contentPadding: const EdgeInsets.symmetric(
                              horizontal: AppPadding.p16,
                              vertical: AppPadding.p12,
                            ),
                          ),
                          onChanged: (value) {
                            if (_urlErrorText != null) {
                              setState(() {
                                _urlErrorText = null;
                              });
                            }
                          },
                          keyboardType: TextInputType.url,
                          textInputAction: TextInputAction.done,
                          onSubmitted: (_) => _handleConnect(),
                        ),
                      ],
                    ),
                  ),
                  const SizedBox(height: AppSize.s16),
                ],
              ),
            ),
            const SizedBox(height: AppSize.s24),
            ElevatedButton(
              onPressed: _isLoading ? null : _handleConnect,
              style: ElevatedButton.styleFrom(
                padding: const EdgeInsets.symmetric(vertical: AppPadding.p16),
                backgroundColor: ColorManager.teal,
                shape: RoundedRectangleBorder(
                  borderRadius: BorderRadius.circular(AppSize.s12),
                ),
                disabledBackgroundColor: Colors.grey[300],
              ),
              child: _isLoading
                  ? SizedBox(
                height: AppSize.s20,
                width: AppSize.s20,
                child: CircularProgressIndicator(
                  strokeWidth: 2,
                  valueColor: AlwaysStoppedAnimation<Color>(Colors.white),
                ),
              )
                  : const Text(
                'Connect',
                style: TextStyle(
                  color: Colors.white,
                  fontSize: AppSize.s16,
                  fontWeight: FontWeight.w500,
                ),
              ),
            ),
          ],
        ),
      ),
    );
  }
}

================
File: presentation/unit_add/unit_add.dart
================
import 'package:flutter/material.dart';
import 'package:jarvis/presentation/resources/color_manager.dart';
import 'package:jarvis/presentation/resources/values_manager.dart';
import 'package:jarvis/presentation/unit_add/unit_add_confluence.dart';
import 'package:jarvis/presentation/unit_add/unit_add_ggdrive.dart';
import 'package:jarvis/presentation/unit_add/unit_add_localfile.dart';
import 'package:jarvis/presentation/unit_add/unit_add_slack.dart';
import 'package:jarvis/presentation/unit_add/unit_add_website.dart';

class UnitAdd extends StatefulWidget {
  @override
  State<UnitAdd> createState() => _UnitAddState();
}

class _UnitAddState extends State<UnitAdd> {
  int _selectedIndex = 0;

  final List<UnitOption> _unitOptions = [
    UnitOption(
      icon: Icons.upload_file_outlined,
      title: 'Local File',
      description: 'Upload .docx, .pdf, .txt file',
    ),
    UnitOption(
      icon: Icons.link_outlined,
      title: 'Website',
      description: 'Add website URL',
    ),
    UnitOption(
      icon: Icons.link_outlined,
      title: 'Confluence',
      description: 'Add Confluence link',
    ),
    UnitOption(
      icon: Icons.link_outlined,
      title: 'Slack',
      description: 'Add Slack link',
    ),UnitOption(
      icon: Icons.link_outlined,
      title: 'Google Drive',
      description: 'Add Google Drive link',
    )

  ];

  @override
  Widget build(BuildContext context) {
    return Dialog(
      insetPadding: const EdgeInsets.symmetric(horizontal: AppPadding.p16),
      shape: RoundedRectangleBorder(
        borderRadius: BorderRadius.circular(AppSize.s20),
      ),
      child: Container(
        padding: const EdgeInsets.all(AppPadding.p20),
        child: Column(
          mainAxisSize: MainAxisSize.min,
          children: [
            const Text(
              'Add unit',
              style: TextStyle(
                fontSize: AppSize.s20,
                fontWeight: FontWeight.bold,
              ),
            ),
            const SizedBox(height: AppSize.s20),
            Container(
              width: AppSize.s60,
              height: AppSize.s60,
              decoration: BoxDecoration(
                color: ColorManager.teal.withOpacity(0.1),
                borderRadius: BorderRadius.circular(AppSize.s12),
              ),
              child: Icon(
                Icons.add_box_outlined,
                size: AppSize.s32,
                color: ColorManager.teal,
              ),
            ),
            const SizedBox(height: AppSize.s20),
            ..._unitOptions.asMap().entries.map((entry) {
              final index = entry.key;
              final option = entry.value;
              return _buildOptionTile(index, option);
            }),
            const SizedBox(height: AppSize.s24),
            Row(
              children: [
                Expanded(
                  child: TextButton(
                    onPressed: () {
                      Navigator.pop(context);
                    },
                    style: TextButton.styleFrom(
                      padding: const EdgeInsets.symmetric(vertical: AppPadding.p12),
                      shape: RoundedRectangleBorder(
                        borderRadius: BorderRadius.circular(AppSize.s12),
                      ),
                      backgroundColor: ColorManager.teal.withOpacity(0.1),
                    ),
                    child: Text(
                      'Cancel',
                      style: TextStyle(
                        color: ColorManager.teal,
                        fontSize: AppSize.s16,
                      ),
                    ),
                  ),
                ),
                const SizedBox(width: AppSize.s16),
                Expanded(
                  child: ElevatedButton(
                    onPressed: () {
                      showDialog(context: context, builder: (builder) => _handleAddUnit(_selectedIndex));
                    },
                    style: ElevatedButton.styleFrom(
                      padding: const EdgeInsets.symmetric(vertical: AppPadding.p12),
                      backgroundColor: ColorManager.teal,
                      shape: RoundedRectangleBorder(
                        borderRadius: BorderRadius.circular(AppSize.s12),
                      ),
                    ),
                    child: const Text(
                      'Continue',
                      style: TextStyle(
                        color: Colors.white,
                        fontSize: AppSize.s16,
                      ),
                    ),
                  ),
                ),
              ],
            ),
          ],
        ),
      ),
    );
  }

  Widget _buildOptionTile(int index, UnitOption option) {
    final isSelected = _selectedIndex == index;
    return GestureDetector(
      onTap: () {
        setState(() {
          _selectedIndex = index;
        });
      },
      child: Container(
        margin: const EdgeInsets.only(bottom: AppSize.s12),
        padding: const EdgeInsets.all(AppPadding.p16),
        decoration: BoxDecoration(
          color: isSelected ? ColorManager.teal.withOpacity(0.1) : Colors.grey[50],
          borderRadius: BorderRadius.circular(AppSize.s12),
          border: Border.all(
            color: isSelected ? ColorManager.teal : Colors.transparent,
            width: 2,
          ),
        ),
        child: Row(
          children: [
            Container(
              width: AppSize.s40,
              height: AppSize.s40,
              decoration: BoxDecoration(
                color: isSelected ? ColorManager.teal.withOpacity(0.2) : Colors.white,
                borderRadius: BorderRadius.circular(AppSize.s8),
              ),
              child: Icon(
                option.icon,
                color: isSelected ? ColorManager.teal : Colors.grey,
                size: AppSize.s24,
              ),
            ),
            const SizedBox(width: AppSize.s12),
            Expanded(
              child: Column(
                crossAxisAlignment: CrossAxisAlignment.start,
                children: [
                  Text(
                    option.title,
                    style: TextStyle(
                      fontSize: AppSize.s16,
                      fontWeight: FontWeight.w500,
                      color: isSelected ? ColorManager.teal : Colors.black,
                    ),
                  ),
                  Text(
                    option.description,
                    style: TextStyle(
                      fontSize: AppSize.s14,
                      color: Colors.grey[600],
                    ),
                  ),
                ],
              ),
            ),
            Radio(
              value: index,
              groupValue: _selectedIndex,
              activeColor: ColorManager.teal,
              onChanged: (int? value) {
                if (value != null) {
                  setState(() {
                    _selectedIndex = value;
                  });
                }
              },
            ),
          ],
        ),
      ),
    );
  }

  Widget _handleAddUnit(int selectedIndex) {
    switch (selectedIndex) {
      case 0:
        return UnitAddLocalfile();
      case 1:
        return UnitAddWebsite();
      case 2:
        return UnitAddConfluence();
      case 3:
        return UnitAddSlack();
      case 4:
        return UnitAddGoogleDrive();
      default:
        return Container();
    }
  }
}

class UnitOption {
  final IconData icon;
  final String title;
  final String description;

  UnitOption({
    required this.icon,
    required this.title,
    required this.description,
  });
}

================
File: presentation/upgrade/upgrade.dart
================
import 'package:flutter/material.dart';
import 'package:jarvis/presentation/common/custome_header_bar.dart';
import 'package:jarvis/presentation/resources/values_manager.dart';

class UpgradeView extends StatefulWidget {
  const UpgradeView({super.key});

  @override
  _UpgradeViewState createState() => _UpgradeViewState();
}

class _UpgradeViewState extends State<UpgradeView> {
  bool isFreeTrialEnabled = false;
  String? selectedPlan;

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: CustomHeaderBar(
        leading: IconButton(
          icon: const Icon(Icons.arrow_back, color: Colors.white),
          onPressed: () {
            Navigator.pop(context);
          },
        ),
      ),
      body: Container(
        color: Colors.white,
        padding: const EdgeInsets.all(16.0),
        child: SingleChildScrollView(
          child: Column(
            crossAxisAlignment: CrossAxisAlignment.start,
            children: [
              Text(
                "CyneAI Pro",
                style: TextStyle(
                  fontSize: 32,
                  fontWeight: FontWeight.bold,
                  color: Colors.teal,
                ),
              ),
              Text(
                "Nâng cao Hiệu suất của Bạn",
                style: TextStyle(
                  fontSize: 16,
                  fontWeight: FontWeight.bold,
                  color: Colors.teal,
                ),
              ),
              const SizedBox(height: 20),
              const FeatureItem(
                title: "Bậc thầy Chế giễu và tương tự: Không cần xếp hàng",
                subtitle: "Tạo ngay Chế giễu AI và tương tự",
              ),
              const SizedBox(height: 16),
              const FeatureItem(
                title: "Truy cập GPT-4o & Claude",
                subtitle: "Nhận câu trả lời chính xác và chi tiết hơn",
              ),
              const SizedBox(height: 16),
              const FeatureItem(
                title: "Tóm tắt trang web & YouTube",
                subtitle: "Kích hoạt tóm tắt nổi bật chỉ bằng một lần nhấp",
              ),
              const SizedBox(height: 16),
              const FeatureItem(
                title: "Tạo dễ dàng với trí tuệ nhân tạo",
                subtitle: "Kích hoạt sáng tạo nội dung văn bản & hình ảnh AI",
              ),
              const SizedBox(height: 20),

              // Bảng so sánh các tính năng
              Text(
                "So sánh các tính năng",
                style: TextStyle(
                  fontSize: 18,
                  fontWeight: FontWeight.bold,
                  color: Colors.black,
                ),
              ),
              const SizedBox(height: 10),
              _buildComparisonTable(),
              const SizedBox(height: 20),

              const SizedBox(height: 20),

              Row(
                mainAxisAlignment: MainAxisAlignment.spaceBetween,
                children: [
                  Text(
                    'Bắt đầu dùng thử miễn phí',
                    style: TextStyle(
                      fontSize: 18,
                      fontWeight: FontWeight.bold,
                      color: Colors.black,
                    ),
                  ),
                  Switch(
                    value: isFreeTrialEnabled,
                    onChanged: (value) {
                      setState(() {
                        isFreeTrialEnabled = value;
                      });
                    },
                    activeColor: Colors.teal,
                  ),
                ],
              ),
              const SizedBox(height: 16),
              GestureDetector(
                onTap: () {
                  setState(() {
                    if (selectedPlan == 'monthly') {
                      selectedPlan = null;
                    } else {
                      selectedPlan = 'monthly';
                    }
                  });
                },
                child: Container(
                  width: double.infinity,
                  padding: const EdgeInsets.all(16),
                  decoration: BoxDecoration(
                    color: selectedPlan == 'monthly'
                        ? Colors.teal[50]
                        : Colors.white,
                    borderRadius: BorderRadius.circular(12),
                    border: Border.all(color: Colors.teal),
                    boxShadow: [
                      BoxShadow(
                        color: Colors.grey.withOpacity(0.2),
                        spreadRadius: 1,
                        blurRadius: 4,
                        offset: const Offset(0, 2),
                      ),
                    ],
                  ),
                  child: Column(
                    crossAxisAlignment: CrossAxisAlignment.start,
                    children: const [
                      Text(
                        "234.000 đ/tháng",
                        style: TextStyle(
                          fontSize: 18,
                          fontWeight: FontWeight.bold,
                          color: Colors.black,
                        ),
                      ),
                      SizedBox(height: 4),
                      Text(
                        "Khoảng 7800.0/ngày",
                        style: TextStyle(
                          fontSize: 14,
                          color: Colors.grey,
                        ),
                      ),
                    ],
                  ),
                ),
              ),
              const SizedBox(height: 16),

              GestureDetector(
                onTap: () {
                  setState(() {
                    if (selectedPlan == 'yearly') {
                      selectedPlan = null;
                    } else {
                      selectedPlan = 'yearly';
                    }
                  });
                },
                child: Container(
                  padding: const EdgeInsets.all(16),
                  decoration: BoxDecoration(
                    color: selectedPlan == 'yearly'
                        ? Colors.teal[50]
                        : Colors.white,
                    borderRadius: BorderRadius.circular(12),
                    border: Border.all(color: Colors.teal),
                    boxShadow: [
                      BoxShadow(
                        color: Colors.grey.withOpacity(0.2),
                        spreadRadius: 1,
                        blurRadius: 4,
                        offset: const Offset(0, 2),
                      ),
                    ],
                  ),
                  child: Column(
                    crossAxisAlignment: CrossAxisAlignment.start,
                    children: [
                      Row(
                        children: [
                          const Text(
                            "2.350.000 đ/năm",
                            style: TextStyle(
                              fontSize: 18,
                              fontWeight: FontWeight.bold,
                              color: Colors.black,
                            ),
                          ),
                          const SizedBox(width: 8),
                          Container(
                            padding: const EdgeInsets.symmetric(
                              vertical: 4,
                              horizontal: 8,
                            ),
                            decoration: BoxDecoration(
                              color: Colors.orange[100],
                              borderRadius: BorderRadius.circular(8),
                            ),
                            child: const Text(
                              "17% GIẢM GIÁ",
                              style: TextStyle(
                                color: Colors.red,
                                fontSize: 14,
                                fontWeight: FontWeight.bold,
                              ),
                            ),
                          ),
                        ],
                      ),
                      const SizedBox(height: 4),
                      const Text(
                        "2.880.000 đ/năm",
                        style: TextStyle(
                          fontSize: 14,
                          color: Colors.grey,
                          decoration: TextDecoration.lineThrough,
                        ),
                      ),
                    ],
                  ),
                ),
              ),
              const SizedBox(height: 16),
              const Text(
                "3 ngày dùng thử miễn phí, sau đó 2.350.000 đ/năm. Hủy bất cứ lúc nào.",
                style: TextStyle(
                  fontSize: 14,
                  color: Colors.grey,
                ),
              ),
              const SizedBox(height: 16),
              ElevatedButton(
                onPressed: () {},
                style: ElevatedButton.styleFrom(
                  backgroundColor: Colors.teal,
                  foregroundColor: Colors.white,
                  minimumSize: const Size(double.infinity, 50),
                ),
                child: const Text(
                  'Bắt đầu Miễn phí trong 3 ngày',
                  style: TextStyle(
                    fontSize: 16,
                    color: Colors.white,
                  ),
                ),
              ),
            ],
          ),
        ),
      ),
    );
  }
}

// Widget to build the comparison table
Widget _buildComparisonTable() {
  return Container(
    decoration: BoxDecoration(
      borderRadius: BorderRadius.only(
          topLeft: Radius.circular(AppSize.s12),
          topRight: Radius.circular(AppSize.s12)),
      border: Border.all(color: Colors.teal),
    ),
    child: Table(
      columnWidths: const {
        0: FlexColumnWidth(2),
        1: FlexColumnWidth(1),
        2: FlexColumnWidth(1),
      },
      children: [
        _buildHeaderRow(),
        _buildDataRow(1, 'Câu truy vấn cơ bản', '40/ngày', '5000/tháng'),
        _buildDataRow(2, 'Câu truy vấn nâng cao', '❌', '200/tháng'),
        _buildDataRow(3, 'Tín dụng nâng cao', '❌', '1500/tháng'),
        _buildDataRow(4, 'Truy cập OpenAI-01', '❌', '✅'),
        _buildDataRow(5, 'ChatPDF', '❌', '✅'),
        _buildDataRow(6, 'Tìm kiếm trên web', '❌', '✅'),
        _buildDataRow(7, 'Tóm tắt YouTube', '❌', '✅'),
      ],
    ),
  );
}

// Widget to create the header row
TableRow _buildHeaderRow() {
  return TableRow(
    decoration: BoxDecoration(
      color: Colors.teal.shade700,
      borderRadius: BorderRadius.vertical(top: Radius.circular(12)),
    ),
    children: [
      _buildHeaderCell('Tính Năng'),
      _buildHeaderCell('Basic'),
      _buildHeaderCell('Pro'),
    ],
  );
}

// Widget to create a data row
TableRow _buildDataRow(int index, String feature, String basic, String pro) {
  bool isEvenRow = (index % 2 == 0);
  return TableRow(
    decoration: BoxDecoration(
      color: isEvenRow ? Colors.teal.shade50 : Colors.white,
    ),
    children: [
      _buildDataCell(feature),
      _buildDataCell(basic),
      _buildDataCell(pro),
    ],
  );
}

// Helper method to build header cell
Widget _buildHeaderCell(String text) {
  return Padding(
    padding: const EdgeInsets.all(12.0),
    child: Text(
      text,
      style: const TextStyle(
        fontWeight: FontWeight.bold,
        color: Colors.white,
      ),
      textAlign: TextAlign.center,
    ),
  );
}

// Helper method to build data cell
Widget _buildDataCell(String text) {
  return Padding(
    padding: const EdgeInsets.all(12.0),
    child: Center(
      child: Text(
        text,
        style: const TextStyle(
          fontSize: 14,
          color: Colors.black,
        ),
      ),
    ),
  );
}

class FeatureItem extends StatelessWidget {
  final String title;
  final String subtitle;

  const FeatureItem({
    required this.title,
    required this.subtitle,
  });

  @override
  Widget build(BuildContext context) {
    return Row(
      children: [
        Icon(Icons.check_circle, color: Colors.teal),
        const SizedBox(width: 12),
        Expanded(
          child: Column(
            crossAxisAlignment: CrossAxisAlignment.start,
            children: [
              Text(
                title,
                style: const TextStyle(
                  fontSize: 16,
                  fontWeight: FontWeight.bold,
                  color: Colors.black,
                ),
              ),
              const SizedBox(height: 4),
              Text(
                subtitle,
                style: const TextStyle(
                  fontSize: 14,
                  color: Colors.grey,
                ),
              ),
            ],
          ),
        ),
      ],
    );
  }
}

================
File: test.dart
================
import 'package:flutter/material.dart';
import 'package:jarvis/app/app.dart';

class Test extends StatelessWidget {
  const Test({super.key});

  void updateAppState() {
    MyApp.instance.appState = 10;
  }

  void getAppState() {
    print(MyApp.instance.appState);
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: const Text('Test App'),
      ),
      body: Center(
        child: Column(
          mainAxisAlignment: MainAxisAlignment.center,
          children: [
            ElevatedButton(
              onPressed: () {
                updateAppState();
                getAppState();
              },
              child: const Text('Update and Get App State'),
            ),
            ElevatedButton(
              onPressed: getAppState,
              child: const Text('Get App State'),
            ),
          ],
        ),
      ),
    );
  }
}
